name: Project Tests

on:
  workflow_dispatch:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
    branches:
      - main

permissions:
  contents: read

jobs:
  test:
    name: Project Checks
    runs-on: ${{ vars.RUNNER_RUNS_ON || 'ubuntu-latest' }}
    timeout-minutes: 60
    
    steps:
      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 1
          
      - name: Set up Go
        uses: actions/setup-go@d35c59abb061a4a6fb18e82ac0862c26744d6ab5 # v5.5.0
        with:
          cache-dependency-path: "**/go.sum"
          go-version: ${{ vars.GO_VERSION || '1.24.2' }}
          
      - name: "Go build CICD"
        run: make build-cicd

      - name: "Go build MGC"
        run: make build-cli        

      - name: Set MGC Profiles
        env:
          PROFILE_NAME: ${{ inputs.profile_name || 'default' }}
          ACCESS_KEY: ${{ secrets.MGC_ACCESS_KEY || '' }}
          SECRET_KEY: ${{ secrets.MGC_SECRET_KEY || ''}}
        run: |
          # Criar diretório do perfil
          PROFILE_DIR="$HOME/.config/mgc/$PROFILE_NAME"
          echo "Criando diretório: $PROFILE_DIR"
          mkdir -p "$PROFILE_DIR"

          # Criar auth.yaml
          AUTH_FILE="$PROFILE_DIR/auth.yaml"
          echo "Criando arquivo de autenticação: $AUTH_FILE"
          cat > "$AUTH_FILE" << EOF
          access_key_id: $ACCESS_KEY
          secret_access_key: $SECRET_KEY
          EOF

      - name: Run tests
        id: mgccli-tests
        uses: MagaluCloud/mgccli-tests@main
        continue-on-error: true
        env:
          MGC_API_KEY: ${{ secrets.MGC_API_KEY || '' }}
          MGC_OBJ_KEY_ID: ${{ secrets.MGC_OBJ_KEY_ID || ''}}
          MGC_OBJ_KEY_SECRET: ${{ secrets.MGC_OBJ_KEY_SECRET || ''}}
          MGC_PATH: "mgc/cli/mgc"

      - name: Download pytest results artifact
        if: github.event_name == 'pull_request'
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: pytest-results
          path: ./pytest-results

      - name: Comment test results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GH_PAT2 }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Ler o arquivo pytest_output.txt
            const pytestOutputPath = path.join('./pytest-results', 'pytest_output.txt');
            let testOutput = '';
            let exitCode = 1; // Default para falha
            
            try {
              if (fs.existsSync(pytestOutputPath)) {
                testOutput = fs.readFileSync(pytestOutputPath, 'utf8');
                
                // Tentar extrair o exit code do output
                const exitCodeMatch = testOutput.match(/exit_code: (\d+)/);
                if (exitCodeMatch) {
                  exitCode = parseInt(exitCodeMatch[1]);
                }
              }
            } catch (error) {
              console.log('Erro ao ler arquivo pytest_output.txt:', error.message);
            }
            
            // Determinar status baseado no exit code
            const testResult = exitCode === 0 ? '✅ PASSED' : '❌ FAILED';
            const testSummary = exitCode === 0 
              ? 'Todos os testes passaram com sucesso!' 
              : 'Alguns testes falharam. Verifique os detalhes abaixo.';
            
            // Criar comentário no PR
            const comment = `## 🧪 Resultados dos Testes
            
            **Status:** ${testResult}
            
            **Resumo:** ${testSummary}
            
            **Exit Code:** ${exitCode}
            
            <details>
            <summary>📋 Detalhes dos Testes</summary>
            
            \`\`\`
            ${testOutput || 'Nenhum output disponível'}
            \`\`\`
            </details>`;
            
            // Comentar no PR
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
            // Definir outputs para uso em outros steps se necessário
            core.setOutput('test-result', testResult);
            core.setOutput('test-summary', testSummary);
            core.setOutput('test-output', testOutput);
            core.setOutput('exit-code', exitCode.toString());