name: MGC SDK CI

on:
  push:
    tags:
      - "v*.*.*"
    branches: [ main ]
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - ready_for_review
  workflow_dispatch:

concurrency:
  group: ci-check-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.17.0'
          cache-dependency-path: "**/go.sum"
      - run: go version
      - name: Build CLI
        env:
          VERSION: CI
          CHECK_RELEASE: 0
        run: ./scripts/build_release.sh
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: mgc-folder
          path: build/mgc-cli-linux-amd64-CI/

  test-build:
    needs: build
    runs-on: ubuntu-latest
    env:
      PROFILES: ${{ secrets.tester_profiles_config }}
    container:
      image: ghcr.io/marmotitude/s3-tester:tests
      volumes:
        - ${{ github.workspace }}/build/mgc-cli-linux-amd64-CI:/tools/mgc2
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: mgc-folder
          path: build/mgc-cli-linux-amd64-CI/
      - name: Replace original mgc and run tests
        # TODO: remove the line below to make passing integration tests REQUIRED
        continue-on-error: true
        run: |
          cd /app
          # mgc to be replaced
          mgc --version
          sha256sum `which mgc`
          # remove original link to mgc
          rm /usr/local/bin/mgc
          # give execute permissions to new binary
          chmod +x /tools/mgc2/mgc
          # link the mgc from the mounted volume as the new mgc
          ln -s /tools/mgc2/mgc /usr/local/bin/mgc
          # custom mgc
          mgc --version
          sha256sum `which mgc`
          ./entrypoint.sh --profiles ${{ vars.tester_profiles }} --clients mgc --tests ${{ vars.tester_tests }}

  pre-commit:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
      - name: "Install go imports"
        run: go install golang.org/x/tools/cmd/goimports@latest
      - uses: actions/setup-go@v4
        with:
          go-version: '>=1.17.0'
          cache-dependency-path: "**/go.sum"
      - uses: pre-commit/action@v3.0.0
        with:
          extra_args: --show-diff-on-failure --color=always --hook-stage push --all-files
  pre-release:
    needs: pre-commit
    if: github.ref_type == 'tag'
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - uses: actions/checkout@v3
      - name: Check version.txt
        run: "bash ./scripts/check_release.sh"

#  cli-release:
#   needs: pre-release
#   runs-on: ubuntu-latest
#   if: github.ref_type == 'tag' && github.event_name == 'workflow_dispatch'
#   steps:
#     - name: Checkout
#       uses: actions/checkout@v4
#       with:
#         fetch-depth: 0
#     - name: Set up Go
#       uses: actions/setup-go@v5
#       with:
#         go-version: stable
#     - name: Run GoReleaser
#       uses: goreleaser/goreleaser-action@v5
#       with:
#         distribution: goreleaser
#         version: latest
#         args: release --clean --config="goreleaser_cli.yaml"
#       env:
#         GITHUB_TOKEN: ${{ secrets.GH_PAT }}

  terraform-release:
    needs: pre-release
    runs-on: ubuntu-latest
    if: github.ref_type == 'tag' && github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Import GPG key
        run: |
          gpg --batch --import ./.github/workflows/test.txt
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v5
        with:
          distribution: goreleaser
          version: latest
          args: release --clean --config="goreleaser_terraform.yaml"
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
          GPG_FINGERPRINT: C290A0E5A99DC0B00B5F229B1F21F3CCAC4AEB1E
          GPG_PASSPHRASE: 123
