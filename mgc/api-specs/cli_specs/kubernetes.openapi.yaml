openapi: 3.0.1
info:
  title: k8s-api-product
  description: APIs related to the Kubernetes product.
  contact:
    name: IAAS Cloud Tribe
    url: https://github.com/luizalabs
    email: suporte@jaxyendy.com
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
servers:
  - url: https://api-mke.pre-prod.br-ne-1.jaxyendy.com
    description: "NE-1 pre-prod"
  - url: https://api-mke.team-integration.br-ne-1.jaxyendy.com
    description: "NE-1 team-integration"
  - url: https://api-mke.br-ne-1.jaxyendy.com
    description: "NE-1 prod"
  - url: https://api-mke.br-se1-pre-prod.jaxyendy.com
    description: "SE1 pre-prod"
  - url: https://api-mke.br-se1-team-integration.jaxyendy.com
    description: "SE1 team-integration"
  - url: https://api-mke.br-se1-prod.jaxyendy.com
    description: "SE1 prod"

paths:
  /v0/clusters:
    post:
      tags:
        - cluster
      summary: Create a cluster
      description: Creates a Kubernetes cluster in Magalu Cloud.
      operationId: createCluster
      security:
        - BearerAuth:
          - mke.write
        - OAuth2:
          - mke.write
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClusterRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateClusterResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - cluster
      summary: List all clusters
      description: Lists all clusters for a user.
      operationId: getClusters
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClustersResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v0/clusters/{cluster_id}:
    get:
      tags:
        - cluster
      summary: List a cluster by uuid
      description: Lists detailed cluster information by cluster_uuid.
      operationId: getClusterById
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Cluster's UUID.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterByIdResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - cluster
      summary: Delete a cluster
      description: Deletes a cluster by cluster_uuid.
      operationId: deleteCluster
      security:
        - BearerAuth:
          - mke.write
        - OAuth2:
          - mke.write
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Cluster's UUID.
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v0/clusters/{cluster_id}/kubeconfig:
    get:
      tags:
        - cluster
      summary: Get kubeconfig cluster
      operationId: getKubeConfigCluster
      description: Retrieves the kubeconfig of a Kubernetes cluster by cluster_uuid.
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Schema to get the cluster's kubeconfig file.
      responses:
        '200':
          description: Successful operation
          content:
            application/yaml:
              schema:
                $ref: '#/components/schemas/ClusterKubeConfigResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v0/clusters/{cluster_id}/node_pools:
    post:
      tags:
        - nodepool
      summary: Create a node pool
      description: Creates a node pool in a Kubernetes cluster.
      operationId: createNodePool
      security:
        - BearerAuth:
          - mke.write
        - OAuth2:
          - mke.write
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Cluster's UUID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNodePoolRequest'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePoolsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - nodepool
      summary: List node pools by cluster_id
      description: Gets a node pool from a Kubernetes cluster by cluster_uuid.
      operationId: getClusterNodePools
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Cluster's UUID.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterNodePoolsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v0/clusters/{cluster_id}/node_pools/{node_pool_id}:
    get:
      tags:
        - nodepool
      summary: Get node pool by node_pool_id
      description: Gets nodes in a node pool by nodepool_uuid.
      operationId: getNodePool
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Cluster's UUID.
        - required: true
          name: node_pool_id
          in: path
          schema:
            type: string
            format: uuid
          description: Nodepool's UUID.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePoolsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
       - nodepool
      summary: Patch node pool replicas by node_pool_id
      description: Updates nodes from a node pool by nodepool_uuid.
      operationId: patchNodePool
      security:
        - BearerAuth:
          - mke.write
        - OAuth2:
          - mke.write
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Cluster's UUID.
        - required: true
          name: node_pool_id
          in: path
          schema:
            type: string
            format: uuid
          description: Nodepool's UUID.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchNodePoolRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodePoolsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - nodepool
      summary: Delete node pool by node_pool_id
      description: Deletes a node pool in a Kubernetes cluster by nodepool_uuid.
      operationId: deleteNodePool
      security:
        - BearerAuth:
          - mke.write
        - OAuth2:
          - mke.write
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Cluster's UUID.
        - required: true
          name: node_pool_id
          in: path
          schema:
            type: string
            format: uuid
          description: Nodepool's UUID.
      responses:
        '204':
          description: Successful operation
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v0/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes:
     get:
      tags:
        - nodepool
      summary: List nodes from a node pool by node_pool_id
      description: Lists nodes in a node pool by nodepool_uuid.
      operationId: getNodes
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      parameters:
        - required: true
          name: x-tenant-id
          in: header
          schema:
            type: string
            format: uuid
          description: User's UUID for identification.
        - required: true
          name: cluster_id
          in: path
          schema:
            type: string
            format: uuid
          description: Cluster's UUID.
        - required: true
          name: node_pool_id
          in: path
          schema:
            type: string
            format: uuid
          description: Nodepool's UUID.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NodesResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v0/info/flavors:
    get:
      tags:
        - info
      summary: Lists all available flavors
      description: Lists all available flavors.
      operationId: getFlavors
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlavorsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v0/info/versions:
    get:
      tags:
        - info
      summary: Lists all available versions
      description: Lists all available Kubernetes versions.
      operationId: getVersions
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/flavors:
    get:
      tags:
        - flavor
      summary: Lists all available flavors
      description: Lists all available flavors.
      operationId: getFlavorsV1
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlavorsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /v1/versions:
    get:
      tags:
        - version
      summary: Lists all available versions
      description: Lists all available Kubernetes versions.
      operationId: getVersionsV1
      security:
        - BearerAuth:
          - mke.read
        - OAuth2:
          - mke.read
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionsResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too Many Requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    ClusterRequest:
      type: object
      description: Request object for the creation of a Kubernetes cluster.
      properties:
        name:
          type: string
          description: |
            Kubernetes cluster name. The name is primarily intended for idempotence, and must be unique within a namespace. The name cannot be changed.
            The name must follow the following rules:
              - must contain a maximum of 63 characters
              - must contain only lowercase alphanumeric characters or '-'
              - must start with an alphabetic character
              - must end with an alphanumeric character
          example: "cluster-example"
        version:
          type: string
          description: |
            The native Kubernetes version of the cluster.
            Please specify the Kubernetes version using the standard "vX.Y.Z" format.
          example: "v1.28.5"
          enum:
            - v1.26.12
            - v1.28.5
          default: v1.28.5
        description:
          type: string
          description: |
            A brief description of the Kubernetes cluster.
          example: "This is an example cluster."
          default: ""
        zone:
          type: string
          description: |
            Identifier of the zone where the Kubernetes cluster will be located.
            - "br-ne-1a"
            - "br-ne-1b"
            - "br-ne-1c"
          example: "br-region-zone"
        enabled_bastion:
          type: boolean
          description: |
            Enables the use of a bastion host for secure access to the cluster.
          example: false
          default: false
        enabled_server_group:
          type: boolean
          description: |
            Enables the use of a server group with anti-affinity policy during the creation of the cluster and its node pools.
          example: false
          default: true
        node_pools:
          type: array
          description: |
            An array representing a set of nodes within a Kubernetes cluster.
          items:
            $ref: '#/components/schemas/CreateNodePoolRequest'
          example:
            - name: "nodepool-example"
              flavor: "cloud-k8s.gp1.small"
              replicas: 3
              tags:
                - "tag-value1"
              taints:
                - key: "example-key"
                  value: "valor1"
                  effect: "NoSchedule"
              auto_scale:
                min_replicas: 2
                max_replicas: 5
      required:
        - name
        - enabled_bastion
        - node_pools
    CreateClusterResponse:
      type: object
      description: Object of the cluster response request.
      required:
        - name
        - id
        - status
      properties:
        name:
          type: string
          description: Name of the Kubernetes cluster.
          example: "cluster-example"
        id:
          type: string
          description: Cluster's UUID.
          example: "10113826-624a-4801-900f-6a5742433411"
          format: uuid
        status:
          $ref: '#/components/schemas/SingleStatus'
    ClustersResponse:
      type: object
      description: Object of the clusters response request.
      required:
        - results
      properties:
        results:
          type: array
          description: List of Kubernetes clusters.
          items:
            $ref: '#/components/schemas/ClusterResponse'
    ClusterResponse:
      type: object
      description: Object of the cluster response request.
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: Cluster's UUID.
          example: "10113826-624a-4801-900f-6a5742433411"
        name:
          type: string
          description: Name of the Kubernetes cluster.
          example: "cluster-example"
        status:
          $ref: '#/components/schemas/SingleStatus'
        version:
          type: string
          description: Native Kubernetes version of the cluster.
          example: "v1.22.9"
        kube_api_server:
          $ref: '#/components/schemas/KubeApiServer'
        tags:
          type: array
          description: List of tags applied to the Kubernetes cluster.
          items:
            type: string
            nullable: true
            description: Items from the list of tags applied to the Kubernetes cluster.
            example: "tag-example"
        description:
          type: string
          description: Description of the Kubernetes cluster.
          example: "This is an example cluster"
        project_id:
          type: string
          description: (Deprecated) Unique identifier of the project where the cluster was provisioned.
          example: "0000806e53ec429792a7885e63264411"
        region:
          type: string
          description: Identifier of the region where the Kubernetes cluster is located.
          example: "br-ne-1a"
    ClusterKubeConfigResponse:
      type: object
      description: Object of the kubeconfig response request for the cluster.
      properties:
        fileName:
          type: string
          description: Object of the kubeconfig file for the Kubernetes cluster.
          format: binary
          example: |
            apiVersion: v1
            clusters:
            - cluster:
                certificate-authority-data: <ca-data>
                server: https://179.190.33.102:6443
              name: mke-cluster3
            contexts:
            - context:
                cluster: mke-cluster3
                user: mke-cluster3-admin
              name: mke-cluster3-admin@mke-cluster3
            current-context: mke-cluster3-admin@mke-cluster3
            kind: Config
            preferences: {}
            users:
            - name: mke-cluster3-admin
              user:
                client-certificate-data: <certified_data>
                client-key-data: <key_data>
    ClusterByIdResponse:
      type: object
      description: Object of the cluster response request by uuid.
      properties:
        name:
          type: string
          description: Name of the Kubernetes cluster.
          example: "cluster-example"
        id:
          type: string
          description: Cluster's UUID.
          example: "10113826-624a-4801-900f-6a5742433411"
        status:
          $ref: '#/components/schemas/SingleStatus'
        version:
          type: string
          description: Native Kubernetes version of the cluster.
          example: "v1.22.9"
        tags:
          type: array
          description: List of tags applied to the Kubernetes cluster.
          items:
            type: string
            nullable: true
            description: Items from the list of tags applied to the Kubernetes cluster.
            example: "tag-example"
        description:
          type: string
          description: Description of the Kubernetes cluster.
          example: "This is an example cluster"
        project_id:
          type: string
          description: (Deprecated) Unique identifier of the project where the cluster was provisioned.
          example: "0000806e53ec429792a7885e63264411"
        region:
          type: string
          description: Identifier of the region where the Kubernetes cluster is located.
          example: "br-ne-1a"
        created_at:
          type: string
          description: Creation date of the Kubernetes cluster.
          example: "2023-03-01T09:00:00Z"
          format: date-time
        updated_at:
          type: string
          description: Date of the last modification of the Kubernetes cluster.
          example: "2023-03-01T09:10:00Z"
          format: date-time
        network:
          $ref: '#/components/schemas/NetworkResponse'
        controlplane:
          $ref: '#/components/schemas/NodePoolsResponse'
        kube_api_server:
          $ref: '#/components/schemas/KubeApiServer'
        node_pools:
          type: array
          description: Set of nodes in a Kubernetes cluster.
          items:
            $ref: '#/components/schemas/NodePoolsResponse'
        addons:
          $ref: '#/components/schemas/Addons'
      required:
        - name
        - id
        - version
        - region
    CreateNodePoolRequest:
      type: object
      description: Object of the node pool request
      properties:
        name:
          type: string
          description: |
            Name of the node pool. The name is primarily for idempotence and must be unique within a namespace. The name cannot be changed.
            The name must follow the following rules:
              - Must contain a maximum of 63 characters
              - Must contain only lowercase alphanumeric characters or '-'
              - Must start with an alphabetic character
              - Must end with an alphanumeric character
          example: "nodepool-example"
        flavor:
          type: string
          description: |
            Definition of the CPU, RAM, and storage capacity of the nodes.

            | Flavor                     | vCPUs | RAM (GB) | Root Disk (GB) |
            |----------------------------|-------|----------|----------------|
            | cloud-k8s.gp1.small        | 2     | 4        | 20             |
            | cloud-k8s.gp1.medium       | 4     | 8        | 50             |
            | cloud-k8s.gp1.large        | 8     | 16       | 100            |
            | cloud-k8s.gp2.small        | 2     | 4        | 300            |
            | cloud-k8s.gp2.large        | 8     | 32       | 300            |
            | cloud-k8s.hm1.medium       | 4     | 16       | 50             |
            | cloud-k8s.i1-c48-r96-d300  | 48    | 96       | 300            |
            | cloud-k8s.i1-c1-r8-d100    | 1     | 8        | 100            |
            | cloud-k8s.i1-c8-r8-d40     | 8     | 8        | 40             |
            | cloud-k8s.i1-c4-r16-d100   | 4     | 16       | 100            |
            | cloud-k8s.i1-c4-r32-d100   | 4     | 32       | 100            |
            | cloud-k8s.i1-c8-r32-d100   | 8     | 32       | 100            |
            | cloud-k8s.i1-c16-r32-d40   | 16    | 32       | 40             |
            | cloud-k8s.i1-c16-r64-d100  | 16    | 64       | 100            |
            | cloud-k8s.i1-c32-r64-d100  | 32    | 64       | 100            |
            | cloud-k8s.i1-c32-r128-d500 | 32    | 128      | 500            |

          example: "cloud-k8s.gp1.small"
        replicas:
          type: integer
          description: Number of replicas of the nodes in the node pool.
          example: 3
          default: 1
        tags:
          type: array
          description: List of tags applied to the node pool.
          items:
            type: string
            description: Items from the list of tags applied to the node pool.
            example: "tag-value1"
        taints:
          type: array
          description: Property associating a set of nodes.
          items:
            $ref: '#/components/schemas/Taint'
        auto_scale:
          $ref: '#/components/schemas/AutoScale'
      required:
        - name
        - flavor
        - replicas
    PatchNodePoolRequest:
      type: object
      description: Object of the node pool modification request.
      properties:
        replicas:
          type: integer
          description: Number of replicas of the nodes in the node pool.
        auto_scale:
          $ref: '#/components/schemas/AutoScale'
    KubeApiServer:
      type: object
      description: Information about the Kubernetes API Server of the cluster.
      properties:
        disable_api_server_fip:
          type: boolean
          description: Enables or disables the use of Floating IP on the API Server.
          default: false
          example: true
        fixed_ip:
          type: string
          description: Fixed IP configured for the Kubernetes API Server.
          example: "172.100.10.1"
        floating_ip:
          type: string
          description: Floating IP created for the Kubernetes API Server.
          example: "172.100.10.1"
        port:
          type: integer
          description: Port used by the Kubernetes API Server.
          example: 6443
    NodePoolsResponse:
      type: object
      description: Object of the node pool response.
      properties:
        id:
          type: string
          description: Node pool's UUID.
          format: uuid
          example: "2cc6f625-7d67-4ed2-8c5e-24e5b40b951b"
        name:
          type: string
          description: Node pool name
          example: "nodepool-example"
        instance_template:
          $ref: '#/components/schemas/InstanceTemplate'
        replicas:
          type: integer
          description: Number of replicas of the nodes in the node pool.
          example: 3
        zone:
          type: array
          description: Availability zone for creating the Kubernetes cluster.
          nullable: true
          items:
            type: string
            description: Items from the list of availability zones for creating the Kubernetes cluster.
            example: "br-ne-1b"
        tags:
          type: array
          description: List of tags applied to the node pool.
          items:
            type: string
            nullable: true
            description: Items from the list of tags applied to the node pool.
            example: "tag-example"
        labels:
          type: object
          additionalProperties:
            type: string
          description: Key/value pairs attached to the object and used for specification.
          example:
            key1: value1
        taints:
          type: array
          description: Property for associating a set of nodes.
          items:
            $ref: '#/components/schemas/Taint'
        securityGroups:
          type: array
          description: Name of the security group to define rules allowing network traffic in the worker node pool.
          items:
            type: string
            description: Items from the security groups defining rules allowing network traffic in the worker node pool.
            example: "security-group-name"
        created_at:
          type: string
          description: Date of creation of the Kubernetes cluster.
          example: "2023-03-01T09:00:00Z"
          format: date-time
        updated_at:
          type: string
          description: Date of the last change to the Kubernetes cluster.
          example: "2023-03-01T09:10:00Z"
          format: date-time
        auto_scale:
          $ref: '#/components/schemas/AutoScale'
        status:
          $ref: '#/components/schemas/Status'
      required:
        - id
        - name
        - instance_template
        - replicas
        - zone
        - labels
        - auto_scale
        - status
    ClusterNodePoolsResponse:
      type: object
      description: Object of the node pool response in the cluster.
      required:
        - results
      properties:
        results:
          type: array
          description: List of node pools.
          items:
            $ref: '#/components/schemas/NodePoolsResponse'
    NodesResponse:
      type: object
      description: Object of the node response.
      required:
        - results
      properties:
        results:
          type: array
          description: List of nodes.
          items:
            $ref: '#/components/schemas/NodeResponse'
    NodeResponse:
      type: object
      description: Object of the node response request.
      properties:
        id:
          type: string
          description: UUID identifier to uniquely identify the node.
          format: uuid
          example: "77b3a951-dc2c-4802-a246-63a3c7f7ecac"
        name:
          type: string
          description: Name of the node.
          example: "node-example"
        namespace:
          type: string
          description: Namespace of the node.
          example: "namespace-example"
        cluster_name:
          type: string
          description: Name of the cluster to which the node belongs.
          example: "cluster-example"
        nodepool_name:
          type: string
          description: Name of the node pool to which the node belongs.
          example: "nodepool-example"
        created_at:
          type: string
          description: Creation date of the node.
          format: date-time
          example: "2023-03-01T09:00:00Z"
        annotations:
          type: object
          additionalProperties:
            type: string
          description: Key/value pairs attached to the object and used for specification.
          example:
            annotation-key1: value1
        labels:
          type: object
          additionalProperties:
            type: string
          description: Key/value pairs attached to the object and used for specification.
          example:
            label-key1: value1
        taints:
          type: array
          description: Property for associating a set of nodes.
          items:
            $ref: '#/components/schemas/Taint'
        addresses:
          type: array
          description: List of addresses accessible to the node.
          items:
            $ref: '#/components/schemas/NodeAddress'
        flavor:
          type: string
          description: Name of the flavor.
          example: "cloud-k8s.gp1.small"
        node_image:
          type: string
          description: Operating system image run by the node.
          example: "ubuntu-2004-kube-v1.22.9-v1"
        zone:
          type: string
          nullable: true
          description: Identifier of the region where the node is located.
          example: "br-ne-1c"
        infrastructure:
          $ref: '#/components/schemas/NodeInfrastructure'
        status:
          $ref: '#/components/schemas/SingleStatus'
      required:
        - id
        - name
        - namespace
        - cluster_name
        - nodepool_name
        - created_at
        - annotations
        - labels
        - taints
        - addresses
        - flavor
        - node_image
        - zone
        - infrastructure
        - status
    NodeAddress:
      type: object
      description: Information for the node's address.
      properties:
        address:
          type: string
          description: The node's address
          example: "address-example"
        type:
          type: string
          description: |
            Type of the node's address, one of Hostname, ExternalIP, or InternalIP.
            **HostName** - The host name reported by the node's kernel. Can be overridden through the kubelet parameter --hostname-override.
            **ExternalIP** - Typically, the node's IP address that is externally routable (available outside the cluster).
            **InternalIP** - Typically, the node's IP address that is routable only within the cluster.
          example: "Hostname"
      required:
        - type
        - address
    NodeInfrastructure:
      type: object
      description: Information about the node's infrastructure.
      properties:
        architecture:
          type: string
          description: Architecture reported by the node.
          example: "amd64"
        containerRuntimeVersion:
          type: string
          description: Version of Container Runtime reported by the node through the remote runtime API.
          example: "containerd://1.6.2"
        kernelVersion:
          type: string
          description: Kernel version reported by the node from 'uname -r'.
          example: "5.4.0-122-generic"
        kubeProxyVersion:
          type: string
          description: Version of KubeProxy reported by the node.
          example: "v1.22.9"
        kubeletVersion:
          type: string
          description: Version of Kubelet reported by the node.
          example: "v1.22.9"
        operatingSystem:
          type: string
          description: Operating system reported by the node.
          example: "linux"
        osImage:
          type: string
          description: OS image reported by the node from /etc/os-release.
          example: "Ubuntu 20.04.4 LTS"
        allocatable:
          $ref: '#/components/schemas/NodeResources'
        capacity:
          $ref: '#/components/schemas/NodeResources'
      required:
        - architecture
        - containerRuntimeVersion
        - kernelVersion
        - kubeProxyVersion
        - kubeletVersion
        - operatingSystem
        - osImage
        - allocatable
        - capacity
    NodeResources:
      type: object
      description: Information about node resources.
      properties:
        cpu:
          type: string
          description: Number of CPUs.
          example: "2"
        ephemeral_storage:
          type: string
          description: Amount of ephemeral storage.
          example: "18859814062"
        hugepages_1Gi:
          type: string
          description: Allocation and consumption of 1Gi pages.
        hugepages_2Mi:
          type: string
          description: Allocation and consumption of 2Mi pages.
        memory:
          type: string
          description: Amount of memory.
          example: "3923640Ki"
        pods:
          type: string
          description: Number of pods.
          example: "110"
      required:
        - cpu
        - ephemeral_storage
        - hugepages_1Gi
        - hugepages_2Mi
        - memory
        - pods
    Status:
      type: object
      description: |
        Details about the status of the node pool or control plane.
      required:
        - state
        - messages
      properties:
        state:
          type: string
          description: |
            Current state of the node pool or control plane.

            | Component       | Possible States                                           |
            |-----------------|-----------------------------------------------------------|
            | Node pool       | ScalingUp, ScalingDown, Pending, Running, Failed, Unknown |
            | Control Plane   | ScalingUp, ScalingDown, Pending, Running, Failed, Unknown |

          example: "Pending"
        messages:
          type: array
          description: |
            Detailed message about the status of the node pool or control plane.
          items:
            type: string
            description: |
              Messages returned by the control planes or node pools.
            example: "Ready"
    SingleStatus:
      type: object
      description: |
        Details about the status of the Kubernetes cluster or node.
      required:
        - state
        - message
      properties:
        state:
          type: string
          description: |
            Current state of the cluster or node.

            | Component | Possible States                              |
            |-----------|---------------------------------------------|
            | Cluster   | Pending, Provisioning, Running, Provisioned, Terminating, Deleting, Failed |
            | Node      | Pending, Provisioning, Provisioned, Running, Deleting, Failed, Unknown   |

          example: "Pending"
        message:
          type: string
          description: |
            Detailed message about the status of the cluster or node.
          example: "Ready"
    Error:
      type: object
      required:
        - id
        - message
      description: |
        Details about the error in the Kubernetes cluster and/or node pool.
      properties:
        id:
          type: string
          description: |
            Identifier corresponding to the HTTP status code returned.
        message:
          type: string
          description: |
            Detailed message with information about the error.
    NetworkResponse:
      type: object
      description: |
        Response object for the Kubernetes cluster network resource request.
      properties:
        uuid:
          type: string
          description: Nodepool's UUID.
          example: "7c24eb01-9423-4f09-a2d2-99ba5df01411"
        cidr:
          type: string
          description: |
            Available IP addresses used for provisioning nodes in the cluster.
          example: "00.0.0.0/00"
        name:
          type: string
          description: Name of the node pool.
          example: "k8s-clusterapi-cluster-example"
        subnet_id:
          type: string
          description: |
            Identifier of the internal subnet where the cluster will be provisioned.
          example: "c5f750a0-a032-477e-a23a-bcffab8b0707"
      required:
        - uuid
        - cidr
        - name
        - subnet_id
    Addons:
      type: object
      description: |
        Object representing addons that extend the functionality of the Kubernetes cluster.
      properties:
        loadbalance:
          type: string
          description: |
            Flag indicating whether the load balancer service is enabled/disabled in the cluster.
        volume:
          type: string
          description: |
            Flag indicating whether the storage class service is configured by default.
        secrets:
          type: string
          description: |
            Native Kubernetes secret to be included in the cluster during provisioning.
      required:
        - loadbalance
        - volume
        - secrets
    AutoScale:
      type: object
      description: |
        Object specifying properties for updating workload resources in the Kubernetes cluster.
      properties:
        min_replicas:
          type: integer
          description: |
            Minimum number of replicas for autoscaling. If not provided, or if the value is equal to or less than zero, the autoscaler value will be assumed based on the "replicas" field.
          example: 2
          minimum: 1
          default: 1
        max_replicas:
          type: integer
          description: |
            Maximum number of replicas for autoscaling. If not provided, or if the value is equal to or less than zero, the autoscaler value will be assumed based on the "replicas" field.
          example: 5
          minimum: 1
          default: 1
      required:
        - min_replicas
        - max_replicas
    Taint:
      type: object
      properties:
        key:
          type: string
          description: Key of the taint to be applied to the node.
          example: "example-key"
        value:
          type: string
          description: Value corresponding to the taint key.
          example: "value1"
        effect:
          type: string
          description: |
            The effect of the taint on pods that do not tolerate the taint.
            - **NoSchedule**: Prevents new pods from being scheduled on the node, unless they tolerate the taint. Allows all existing pods to continue running.
            - **PreferNoSchedule**: Similar to NoSchedule, but attempts not to schedule new pods on the node, rather than completely prohibiting new pod scheduling on the node.
            - **NoExecute**: Removes all already running pods that do not tolerate the taint.
          example: "NoSchedule"
          enum:
            - "NoSchedule"
            - "PreferNoSchedule"
            - "NoExecute"
      required:
        - key
        - value
        - effect
    InstanceTemplate:
      type: object
      description: |
        Template for the instance object used to create machine instances and managed instance groups.
      properties:
        flavor:
          $ref: '#/components/schemas/Flavor'
        node_image:
          type: string
          description: Operating system image running on each node.
          example: "ubuntu-2004-kube-v1.22.9-v1"
        disk_size:
          type: integer
          description: Size of the disk attached to each node.
        disk_type:
          type: string
          description: Type of disk attached to each node.
      required:
        - flavor
        - node_image
        - disk_size
        - disk_type
    Flavor:
      type: object
      description: Definition of CPU capacity, RAM, and storage for nodes.
      properties:
        name:
          type: string
          description: Name of the Flavor.
          example: "cloud-k8s.gp1.small"
        id:
          type: string
          description: Unique identifier for the Flavor.
          example: "c777eaa7-d67c-46f4-9e4f-232bc9b67b58"
          default: ""
        vcpu:
          type: integer
          description: Number of available vCPUs.
          example: 2
          default: 0
        ram:
          type: integer
          description: Amount of RAM, measured in MB.
          example: 4096
          default: 0
        size:
          type: integer
          description: Amount of disk space, measured in GB.
          example: 20
          default: 0
      required:
        - name
        - id
        - vcpu
        - ram
        - size
    FlavorWithSku:
      type: object
      description: Definition of CPU capacity, RAM, and storage for nodes.
      properties:
        name:
          type: string
          description: Name of the Flavor.
          example: "cloud-k8s.gp1.small"
        id:
          type: string
          description: Unique identifier for the Flavor.
          example: "c777eaa7-d67c-46f4-9e4f-232bc9b67b58"
          default: ""
        vcpu:
          type: integer
          description: Number of available vCPUs.
          example: 2
          default: 0
        ram:
          type: integer
          description: Amount of RAM, measured in MB.
          example: 4096
          default: 0
        size:
          type: integer
          description: Amount of disk space, measured in GB.
          example: 20
          default: 0
        sku:
          type: string
          description: SKU associated with the Flavor.
          example: "sku-1234"
      required:
        - name
        - id
        - vcpu
        - ram
        - size
        - sku
    FlavorsResponse:
      type: object
      description: Response object for the Flavor request.
      required:
        - results
      properties:
        results:
          type: array
          items:
            $ref: '#/components/schemas/FlavorsAvailable'
    FlavorsAvailable:
      type: object
      description: Lists of available flavors provided by the application.
      properties:
        bastion:
          type: array
          description: Lists of available flavors for the Bastion.
          items:
            $ref: '#/components/schemas/FlavorWithSku'
        nodepool:
          type: array
          description: Lists of available flavors for the Node Pools.
          items:
            $ref: '#/components/schemas/FlavorWithSku'
        controlplane:
          type: array
          description: Lists of available flavors for the Control Plane.
          items:
            $ref: '#/components/schemas/FlavorWithSku'
      required:
        - bastion
        - nodepool
        - controlplane
    VersionsResponse:
      type: object
      description: Response object for the Version request.
      required:
        - results
      properties:
        results:
          type: array
          description: Lists of Kubernetes cluster versions.
          items:
            $ref: '#/components/schemas/Version'
    Version:
      type: object
      description: Object representing a Kubernetes version.
      properties:
        version:
          type: string
          description: Kubernetes version.
          example: "v1.22.9"
        deprecated:
          type: boolean
          description: Indicates whether the version is deprecated.
          example: false
      required:
        - version
        - deprecated
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    OAuth2:
        flows:
            authorizationCode:
                authorizationUrl: 'https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/auth'
                tokenUrl: 'https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/token'
                scopes:
                    mke.read: Read information about IaaS resources
                    mke.write: Write information about IaaS resources
        type: oauth2
        description: |
            OAuth2 by IDPA (Identity Provider Authentication)
tags:
  - name: cluster
    description: Endpoints related to the creation, listing, deletion, and retrieval of the kubeconfig for a Kubernetes cluster.
  - name: nodepool
    description: Endpoints related to the creation, listing of nodepools and nodes, updating, and deletion of nodepools for a Kubernetes cluster.
  - name: info
    description: Endpoints related to listing available flavors (resource configurations) and Kubernetes versions for a Kubernetes cluster.
  - name: flavor
    description: Endpoints related to listing available flavors for a Kubernetes cluster.
  - name: version
    description: Endpoints related to listing available Kubernetes versions for a Kubernetes cluster.
