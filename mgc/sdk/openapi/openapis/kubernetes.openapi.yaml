{
  "components": {
    "schemas": {
      "Addons": {
        "description": "Object representing addons that extend the functionality of the Kubernetes cluster.\n",
        "properties": {
          "loadbalance": {
            "description": "Flag indicating whether the load balancer service is enabled/disabled in the cluster.\n",
            "type": "string"
          },
          "secrets": {
            "description": "Native Kubernetes secret to be included in the cluster during provisioning.\n",
            "type": "string"
          },
          "volume": {
            "description": "Flag indicating whether the storage class service is configured by default.\n",
            "type": "string"
          }
        },
        "required": [
          "loadbalance",
          "volume",
          "secrets"
        ],
        "type": "object"
      },
      "AutoScale": {
        "description": "Object specifying properties for updating workload resources in the Kubernetes cluster.\n",
        "properties": {
          "max_replicas": {
            "description": "Maximum number of replicas for autoscaling. If not provided, the autoscale value will be assumed based on the \"replicas\" field.\n",
            "example": 5,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          },
          "min_replicas": {
            "description": "Minimum number of replicas for autoscaling. If not provided, the autoscale value will be assumed based on the \"replicas\" field.\n",
            "example": 2,
            "minimum": 0,
            "nullable": true,
            "type": "integer"
          }
        },
        "required": [
          "min_replicas",
          "max_replicas"
        ],
        "type": "object"
      },
      "AutoScaleResponse": {
        "description": "Object specifying properties for updating workload resources in the Kubernetes cluster.\n",
        "properties": {
          "max_replicas": {
            "default": 1,
            "description": "Maximum number of replicas for autoscaling. If not provided, the autoscale value will be assumed based on the \"replicas\" field.\n",
            "example": 5,
            "minimum": 0,
            "type": "integer"
          },
          "min_replicas": {
            "default": 1,
            "description": "Minimum number of replicas for autoscaling. If not provided, the autoscale value will be assumed based on the \"replicas\" field.\n",
            "example": 2,
            "minimum": 0,
            "type": "integer"
          }
        },
        "required": [
          "min_replicas",
          "max_replicas"
        ],
        "type": "object"
      },
      "ClusterByIdResponse": {
        "description": "Object of the cluster response request by uuid.",
        "properties": {
          "addons": {
            "$ref": "#/components/schemas/Addons"
          },
          "allowed_cidrs": {
            "description": "List of allowed CIDR blocks for API server access.\n",
            "example": [
              "192.168.1.0/24",
              "10.0.0.0/16"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "controlplane": {
            "$ref": "#/components/schemas/NodePoolResponse"
          },
          "created_at": {
            "description": "Creation date of the Kubernetes cluster.",
            "example": "2023-03-01T09:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "description": "Description of the Kubernetes cluster.",
            "example": "This is an example cluster",
            "type": "string"
          },
          "id": {
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411",
            "type": "string"
          },
          "kube_api_server": {
            "$ref": "#/components/schemas/KubeApiServer"
          },
          "name": {
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example",
            "type": "string"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkResponse"
          },
          "node_pools": {
            "description": "Set of nodes in a Kubernetes cluster.",
            "items": {
              "$ref": "#/components/schemas/NodePoolResponse"
            },
            "type": "array"
          },
          "project_id": {
            "description": "(Deprecated) Unique identifier of the project where the cluster was provisioned.",
            "example": "0000806e53ec429792a7885e63264411",
            "type": "string"
          },
          "region": {
            "description": "Identifier of the region where the Kubernetes cluster is located.",
            "example": "br-ne-1a",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          },
          "updated_at": {
            "description": "Date of the last modification of the Kubernetes cluster.",
            "example": "2023-03-01T09:10:00Z",
            "format": "date-time",
            "type": "string"
          },
          "version": {
            "description": "Native Kubernetes version of the cluster.",
            "example": "v1.22.9",
            "type": "string"
          }
        },
        "required": [
          "name",
          "id",
          "version",
          "region"
        ],
        "type": "object"
      },
      "ClusterKubeConfigResponse": {
        "description": "Object of the kubeconfig response request for the cluster.",
        "properties": {
          "fileName": {
            "description": "Object of the kubeconfig file for the Kubernetes cluster.",
            "example": "apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: \u003cca-data\u003e\n    server: https://179.190.33.102:6443\n  name: mke-cluster3\ncontexts:\n- context:\n    cluster: mke-cluster3\n    user: mke-cluster3-admin\n  name: mke-cluster3-admin@mke-cluster3\ncurrent-context: mke-cluster3-admin@mke-cluster3\nkind: Config\npreferences: {}\nusers:\n- name: mke-cluster3-admin\n  user:\n    client-certificate-data: \u003ccertified_data\u003e\n    client-key-data: \u003ckey_data\u003e\n",
            "format": "binary",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ClusterRequest": {
        "description": "Request object for the creation of a Kubernetes cluster.",
        "properties": {
          "allowed_cidrs": {
            "description": "List of allowed CIDR blocks for API server access.\n",
            "example": [
              "192.168.1.0/24",
              "10.0.0.0/16"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": {
            "default": "",
            "description": "A brief description of the Kubernetes cluster.\n",
            "example": "This is an example cluster.",
            "type": "string"
          },
          "enabled_bastion": {
            "default": false,
            "deprecated": true,
            "description": "[Deprecated] This parameter is deprecated and its use won't create a bastion server\nEnables the use of a bastion host for secure access to the cluster.\n",
            "example": false,
            "type": "boolean"
          },
          "enabled_server_group": {
            "default": true,
            "description": "Enables the use of a server group with anti-affinity policy during the creation of the cluster and its node pools.\n",
            "example": false,
            "type": "boolean"
          },
          "name": {
            "description": "Kubernetes cluster name. The name is primarily intended for idempotence, and must be unique within a namespace. The name cannot be changed.\nThe name must follow the following rules:\n  - must contain a maximum of 63 characters\n  - must contain only lowercase alphanumeric characters or '-'\n  - must start with an alphabetic character\n  - must end with an alphanumeric character\n",
            "example": "cluster-example",
            "type": "string"
          },
          "node_pools": {
            "description": "An array representing a set of nodes within a Kubernetes cluster.\n",
            "example": [
              {
                "auto_scale": {
                  "max_replicas": 5,
                  "min_replicas": 2
                },
                "flavor": "cloud-k8s.gp1.small",
                "name": "nodepool-example",
                "replicas": 3,
                "tags": [
                  "tag-value1"
                ],
                "taints": [
                  {
                    "effect": "NoSchedule",
                    "key": "example-key",
                    "value": "valor1"
                  }
                ]
              }
            ],
            "items": {
              "$ref": "#/components/schemas/CreateNodePoolRequest"
            },
            "type": "array",
            "x-oapi-codegen-extra-tags": {
              "binding": "dive"
            }
          },
          "version": {
            "default": "v1.30.2",
            "description": "The native Kubernetes version of the cluster.\nPlease specify the Kubernetes version using the standard \"vX.Y.Z\" format.\n",
            "example": "v1.30.2",
            "type": "string"
          },
          "zone": {
            "deprecated": true,
            "description": "[Deprecated] This parameter is deprecated and its use won't create a cluster at requested zone.\nIdentifier of the zone where the Kubernetes cluster will be located.\n",
            "example": "br-region-zone",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "ClusterResponse": {
        "description": "Object of the cluster response request.",
        "properties": {
          "description": {
            "description": "Description of the Kubernetes cluster.",
            "example": "This is an example cluster",
            "type": "string"
          },
          "id": {
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411",
            "type": "string"
          },
          "kube_api_server": {
            "$ref": "#/components/schemas/KubeApiServer"
          },
          "name": {
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example",
            "type": "string"
          },
          "project_id": {
            "description": "(Deprecated) Unique identifier of the project where the cluster was provisioned.",
            "example": "0000806e53ec429792a7885e63264411",
            "type": "string"
          },
          "region": {
            "description": "Identifier of the region where the Kubernetes cluster is located.",
            "example": "br-ne-1a",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          },
          "version": {
            "description": "Native Kubernetes version of the cluster.",
            "example": "v1.22.9",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "ClustersResponse": {
        "description": "Object of the clusters response request.",
        "properties": {
          "results": {
            "description": "List of Kubernetes clusters.",
            "items": {
              "$ref": "#/components/schemas/ClusterResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "CreateClusterResponse": {
        "description": "Object of the cluster response request.",
        "properties": {
          "allowed_cidrs": {
            "description": "List of allowed CIDR blocks for API server access.\n",
            "example": [
              "192.168.1.0/24",
              "10.0.0.0/16"
            ],
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "id": {
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411",
            "format": "uuid",
            "type": "string"
          },
          "name": {
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          }
        },
        "required": [
          "name",
          "id",
          "status"
        ],
        "type": "object"
      },
      "CreateNodePoolRequest": {
        "description": "Object of the node pool request",
        "properties": {
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScale"
          },
          "flavor": {
            "description": "Definition of the CPU, RAM, and storage capacity of the nodes.\n\n| Flavor                     | vCPUs | RAM (GB) | Root Disk (GB) |\n|----------------------------|-------|----------|----------------|\n| cloud-k8s.gp1.small        | 2     | 4        | 20             |\n| cloud-k8s.gp1.medium       | 4     | 8        | 50             |\n| cloud-k8s.gp1.large        | 8     | 16       | 100            |\n| cloud-k8s.gp2.small        | 2     | 4        | 300            |\n| cloud-k8s.gp2.large        | 8     | 32       | 300            |\n| cloud-k8s.hm1.medium       | 4     | 16       | 50             |\n| cloud-k8s.i1-c48-r96-d300  | 48    | 96       | 300            |\n| cloud-k8s.i1-c1-r8-d100    | 1     | 8        | 100            |\n| cloud-k8s.i1-c8-r8-d40     | 8     | 8        | 40             |\n| cloud-k8s.i1-c4-r16-d100   | 4     | 16       | 100            |\n| cloud-k8s.i1-c4-r32-d100   | 4     | 32       | 100            |\n| cloud-k8s.i1-c8-r32-d100   | 8     | 32       | 100            |\n| cloud-k8s.i1-c16-r32-d40   | 16    | 32       | 40             |\n| cloud-k8s.i1-c16-r64-d100  | 16    | 64       | 100            |\n| cloud-k8s.i1-c32-r64-d100  | 32    | 64       | 100            |\n| cloud-k8s.i1-c32-r128-d500 | 32    | 128      | 500            |\n",
            "example": "cloud-k8s.gp1.small",
            "type": "string"
          },
          "name": {
            "description": "Name of the node pool. The name is primarily for idempotence and must be unique within a namespace. The name cannot be changed.\nThe name must follow the following rules:\n  - Must contain a maximum of 63 characters\n  - Must contain only lowercase alphanumeric characters or '-'\n  - Must start with an alphabetic character\n  - Must end with an alphanumeric character\n",
            "example": "nodepool-example",
            "type": "string"
          },
          "replicas": {
            "default": 1,
            "description": "Number of replicas of the nodes in the node pool.",
            "example": 3,
            "nullable": true,
            "type": "integer",
            "x-oapi-codegen-extra-tags": {
              "binding": "required"
            }
          },
          "tags": {
            "description": "List of tags applied to the node pool.",
            "items": {
              "description": "Items from the list of tags applied to the node pool.",
              "example": "tag-value1",
              "type": "string"
            },
            "type": "array"
          },
          "taints": {
            "description": "Property associating a set of nodes.",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "flavor",
          "replicas"
        ],
        "type": "object"
      },
      "Error": {
        "description": "Details about the error in the Kubernetes cluster and/or node pool.\n",
        "properties": {
          "id": {
            "description": "Identifier corresponding to the HTTP status code returned.\n",
            "type": "string"
          },
          "message": {
            "description": "Detailed message with information about the error.\n",
            "type": "string"
          }
        },
        "required": [
          "id",
          "message"
        ],
        "type": "object"
      },
      "Flavor": {
        "deprecated": true,
        "description": "[Deprecated] Definition of CPU capacity, RAM, and storage for nodes. This will be removed in favor of using VM Machine Type.",
        "properties": {
          "equivalent_machine_type": {
            "description": "Magalu Cloud VM machine type that is equivalent to this flavor",
            "type": "string"
          },
          "id": {
            "default": "",
            "description": "Unique identifier for the Flavor.",
            "example": "c777eaa7-d67c-46f4-9e4f-232bc9b67b58",
            "type": "string"
          },
          "name": {
            "description": "Name of the Flavor.",
            "example": "cloud-k8s.gp1.small",
            "type": "string"
          },
          "ram": {
            "default": 0,
            "description": "Amount of RAM, measured in MB.",
            "example": 4096,
            "type": "integer"
          },
          "size": {
            "default": 0,
            "description": "Amount of disk space, measured in GB.",
            "example": 20,
            "type": "integer"
          },
          "vcpu": {
            "default": 0,
            "description": "Number of available vCPUs.",
            "example": 2,
            "type": "integer"
          }
        },
        "required": [
          "name",
          "id",
          "vcpu",
          "ram",
          "size"
        ],
        "type": "object"
      },
      "FlavorWithSku": {
        "description": "Definition of CPU capacity, RAM, and storage for nodes.",
        "properties": {
          "id": {
            "default": "",
            "description": "Unique identifier for the Flavor.",
            "example": "c777eaa7-d67c-46f4-9e4f-232bc9b67b58",
            "type": "string"
          },
          "name": {
            "description": "Name of the Flavor.",
            "example": "cloud-k8s.gp1.small",
            "type": "string"
          },
          "ram": {
            "default": 0,
            "description": "Amount of RAM, measured in MB.",
            "example": 4096,
            "type": "integer"
          },
          "size": {
            "default": 0,
            "description": "Amount of disk space, measured in GB.",
            "example": 20,
            "type": "integer"
          },
          "sku": {
            "description": "SKU associated with the Flavor.",
            "example": "sku-1234",
            "type": "string"
          },
          "vcpu": {
            "default": 0,
            "description": "Number of available vCPUs.",
            "example": 2,
            "type": "integer"
          }
        },
        "required": [
          "name",
          "id",
          "vcpu",
          "ram",
          "size",
          "sku"
        ],
        "type": "object"
      },
      "FlavorsAvailable": {
        "description": "Lists of available flavors provided by the application.",
        "properties": {
          "controlplane": {
            "description": "Lists of available flavors for the Control Plane.",
            "items": {
              "$ref": "#/components/schemas/FlavorWithSku"
            },
            "type": "array"
          },
          "nodepool": {
            "description": "Lists of available flavors for the Node Pools.",
            "items": {
              "$ref": "#/components/schemas/FlavorWithSku"
            },
            "type": "array"
          }
        },
        "required": [
          "nodepool",
          "controlplane"
        ],
        "type": "object"
      },
      "FlavorsResponse": {
        "description": "Response object for the Flavor request.",
        "properties": {
          "results": {
            "items": {
              "$ref": "#/components/schemas/FlavorsAvailable"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "InstanceTemplate": {
        "description": "Template for the instance object used to create machine instances and managed instance groups.\n",
        "properties": {
          "disk_size": {
            "description": "Size of the disk attached to each node.",
            "type": "integer"
          },
          "disk_type": {
            "description": "Type of disk attached to each node.",
            "type": "string"
          },
          "flavor": {
            "$ref": "#/components/schemas/Flavor"
          },
          "node_image": {
            "description": "Operating system image running on each node.",
            "example": "ubuntu-2004-kube-v1.22.9-v1",
            "type": "string"
          }
        },
        "required": [
          "flavor",
          "node_image",
          "disk_size",
          "disk_type"
        ],
        "type": "object"
      },
      "KubeApiServer": {
        "description": "Information about the Kubernetes API Server of the cluster.",
        "properties": {
          "disable_api_server_fip": {
            "default": false,
            "description": "Enables or disables the use of Floating IP on the API Server.",
            "example": true,
            "type": "boolean"
          },
          "fixed_ip": {
            "description": "Fixed IP configured for the Kubernetes API Server.",
            "example": "172.100.10.1",
            "type": "string"
          },
          "floating_ip": {
            "description": "Floating IP created for the Kubernetes API Server.",
            "example": "172.100.10.1",
            "type": "string"
          },
          "port": {
            "description": "Port used by the Kubernetes API Server.",
            "example": 6443,
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ListNodePoolResponseV1alpha0": {
        "description": "Object of the node pool response.",
        "properties": {
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScaleResponse"
          },
          "flavor": {
            "description": "Node pool flavor name",
            "example": "cloud-k8s.gp1.small",
            "type": "string"
          },
          "id": {
            "description": "Node pool's UUID.",
            "example": "2cc6f625-7d67-4ed2-8c5e-24e5b40b951b",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "name": {
            "description": "Node pool name",
            "example": "nodepool-example",
            "type": "string"
          },
          "replicas": {
            "description": "Number of replicas of the nodes in the node pool.",
            "example": 3,
            "type": "integer"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        },
        "required": [
          "id",
          "name",
          "flavor",
          "replicas",
          "auto_scale",
          "status"
        ],
        "type": "object"
      },
      "ListNodePoolsResponseV0": {
        "description": "Object of the node pool response in the cluster.",
        "properties": {
          "results": {
            "description": "List of node pools.",
            "items": {
              "$ref": "#/components/schemas/NodePoolResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "ListNodePoolsResponseV1alpha0": {
        "description": "Object of the node pool response in the cluster.",
        "properties": {
          "results": {
            "description": "List of node pools.",
            "items": {
              "$ref": "#/components/schemas/ListNodePoolResponseV1alpha0"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "NetworkResponse": {
        "description": "Response object for the Kubernetes cluster network resource request.\n",
        "properties": {
          "cidr": {
            "description": "Available IP addresses used for provisioning nodes in the cluster.\n",
            "example": "00.0.0.0/00",
            "type": "string"
          },
          "name": {
            "description": "Name of the node pool.",
            "example": "k8s-clusterapi-cluster-example",
            "type": "string"
          },
          "subnet_id": {
            "description": "Identifier of the internal subnet where the cluster will be provisioned.\n",
            "example": "c5f750a0-a032-477e-a23a-bcffab8b0707",
            "type": "string"
          },
          "uuid": {
            "description": "Nodepool's UUID.",
            "example": "7c24eb01-9423-4f09-a2d2-99ba5df01411",
            "type": "string"
          }
        },
        "required": [
          "uuid",
          "cidr",
          "name",
          "subnet_id"
        ],
        "type": "object"
      },
      "NodeAddress": {
        "description": "Information for the node's address.",
        "properties": {
          "address": {
            "description": "The node's address",
            "example": "address-example",
            "type": "string"
          },
          "type": {
            "description": "Type of the node's address, one of Hostname, ExternalIP, or InternalIP.\n**HostName** - The host name reported by the node's kernel. Can be overridden through the kubelet parameter --hostname-override.\n**ExternalIP** - Typically, the node's IP address that is externally routable (available outside the cluster).\n**InternalIP** - Typically, the node's IP address that is routable only within the cluster.\n",
            "example": "Hostname",
            "type": "string"
          }
        },
        "required": [
          "type",
          "address"
        ],
        "type": "object"
      },
      "NodeInfrastructure": {
        "description": "Information about the node's infrastructure.",
        "properties": {
          "allocatable": {
            "$ref": "#/components/schemas/NodeResources"
          },
          "architecture": {
            "description": "Architecture reported by the node.",
            "example": "amd64",
            "type": "string"
          },
          "capacity": {
            "$ref": "#/components/schemas/NodeResources"
          },
          "containerRuntimeVersion": {
            "description": "Version of Container Runtime reported by the node through the remote runtime API.",
            "example": "containerd://1.6.2",
            "type": "string"
          },
          "kernelVersion": {
            "description": "Kernel version reported by the node from 'uname -r'.",
            "example": "5.4.0-122-generic",
            "type": "string"
          },
          "kubeProxyVersion": {
            "description": "Version of KubeProxy reported by the node.",
            "example": "v1.22.9",
            "type": "string"
          },
          "kubeletVersion": {
            "description": "Version of Kubelet reported by the node.",
            "example": "v1.22.9",
            "type": "string"
          },
          "operatingSystem": {
            "description": "Operating system reported by the node.",
            "example": "linux",
            "type": "string"
          },
          "osImage": {
            "description": "OS image reported by the node from /etc/os-release.",
            "example": "Ubuntu 20.04.4 LTS",
            "type": "string"
          }
        },
        "required": [
          "architecture",
          "containerRuntimeVersion",
          "kernelVersion",
          "kubeProxyVersion",
          "kubeletVersion",
          "operatingSystem",
          "osImage",
          "allocatable",
          "capacity"
        ],
        "type": "object"
      },
      "NodePoolResponse": {
        "description": "Object of the node pool response.",
        "properties": {
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScaleResponse"
          },
          "created_at": {
            "description": "Date of creation of the Kubernetes cluster.",
            "example": "2023-03-01T09:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "description": "Node pool's UUID.",
            "example": "2cc6f625-7d67-4ed2-8c5e-24e5b40b951b",
            "format": "uuid",
            "type": "string",
            "x-go-type": "string"
          },
          "instance_template": {
            "$ref": "#/components/schemas/InstanceTemplate"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "key1": "value1"
            },
            "type": "object"
          },
          "name": {
            "description": "Node pool name",
            "example": "nodepool-example",
            "type": "string"
          },
          "replicas": {
            "description": "Number of replicas of the nodes in the node pool.",
            "example": 3,
            "type": "integer"
          },
          "securityGroups": {
            "description": "Name of the security group to define rules allowing network traffic in the worker node pool.",
            "items": {
              "description": "Items from the security groups defining rules allowing network traffic in the worker node pool.",
              "example": "security-group-name",
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "tags": {
            "description": "List of tags applied to the node pool.",
            "items": {
              "description": "Items from the list of tags applied to the node pool.",
              "example": "tag-example",
              "nullable": true,
              "type": "string"
            },
            "type": "array"
          },
          "taints": {
            "description": "Property for associating a set of nodes.",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "type": "array"
          },
          "updated_at": {
            "description": "Date of the last change to the Kubernetes cluster.",
            "example": "2023-03-01T09:10:00Z",
            "format": "date-time",
            "type": "string"
          },
          "zone": {
            "description": "Availability zone for creating the Kubernetes cluster.",
            "items": {
              "description": "Items from the list of availability zones for creating the Kubernetes cluster.",
              "example": "br-ne-1b",
              "type": "string"
            },
            "nullable": true,
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "instance_template",
          "replicas",
          "zone",
          "labels",
          "auto_scale",
          "status"
        ],
        "type": "object"
      },
      "NodeResources": {
        "description": "Information about node resources.",
        "properties": {
          "cpu": {
            "description": "Number of CPUs.",
            "example": "2",
            "type": "string"
          },
          "ephemeral_storage": {
            "description": "Amount of ephemeral storage.",
            "example": "18859814062",
            "type": "string"
          },
          "hugepages_1Gi": {
            "description": "Allocation and consumption of 1Gi pages.",
            "type": "string"
          },
          "hugepages_2Mi": {
            "description": "Allocation and consumption of 2Mi pages.",
            "type": "string"
          },
          "memory": {
            "description": "Amount of memory.",
            "example": "3923640Ki",
            "type": "string"
          },
          "pods": {
            "description": "Number of pods.",
            "example": "110",
            "type": "string"
          }
        },
        "required": [
          "cpu",
          "ephemeral_storage",
          "hugepages_1Gi",
          "hugepages_2Mi",
          "memory",
          "pods"
        ],
        "type": "object"
      },
      "NodeResponse": {
        "description": "Object of the node response request.",
        "properties": {
          "addresses": {
            "description": "List of addresses accessible to the node.",
            "items": {
              "$ref": "#/components/schemas/NodeAddress"
            },
            "type": "array"
          },
          "annotations": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "annotation-key1": "value1"
            },
            "type": "object"
          },
          "cluster_name": {
            "description": "Name of the cluster to which the node belongs.",
            "example": "cluster-example",
            "type": "string"
          },
          "created_at": {
            "description": "Creation date of the node.",
            "example": "2023-03-01T09:00:00Z",
            "format": "date-time",
            "type": "string"
          },
          "flavor": {
            "deprecated": true,
            "description": "[Deprecated] Name of the flavor. Use machine_type instead if filled. In future version only machine_type will be available",
            "example": "cloud-k8s.gp1.small",
            "type": "string"
          },
          "id": {
            "description": "UUID identifier to uniquely identify the node.",
            "example": "77b3a951-dc2c-4802-a246-63a3c7f7ecac",
            "format": "uuid",
            "type": "string"
          },
          "infrastructure": {
            "$ref": "#/components/schemas/NodeInfrastructure"
          },
          "labels": {
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "label-key1": "value1"
            },
            "type": "object"
          },
          "machine_type": {
            "description": "Magalu Cloud VM Machine Type.",
            "example": "cloud-k8s.gp1.small",
            "type": "string"
          },
          "name": {
            "description": "Name of the node.",
            "example": "node-example",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace of the node.",
            "example": "namespace-example",
            "type": "string"
          },
          "nodepool_name": {
            "description": "Name of the node pool to which the node belongs.",
            "example": "nodepool-example",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          },
          "taints": {
            "description": "Property for associating a set of nodes.",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "type": "array"
          }
        },
        "required": [
          "id",
          "name",
          "namespace",
          "cluster_name",
          "nodepool_name",
          "created_at",
          "annotations",
          "labels",
          "taints",
          "addresses",
          "flavor",
          "infrastructure",
          "status"
        ],
        "type": "object"
      },
      "NodesResponse": {
        "description": "Object of the node response.",
        "properties": {
          "results": {
            "description": "List of nodes.",
            "items": {
              "$ref": "#/components/schemas/NodeResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "PatchClusterRequest": {
        "description": "Cluster fields to be patched",
        "properties": {
          "allowed_cidrs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PatchClusterResponse": {
        "description": "Object for cluster patch response",
        "properties": {
          "allowed_cidrs": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PatchNodePoolRequest": {
        "description": "Object of the node pool modification request.",
        "properties": {
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScale"
          },
          "replicas": {
            "description": "Number of replicas of the nodes in the node pool.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "SingleStatus": {
        "description": "Details about the status of the Kubernetes cluster or node.\n",
        "properties": {
          "message": {
            "description": "Detailed message about the status of the cluster or node.\n",
            "example": "Ready",
            "type": "string"
          },
          "state": {
            "description": "Current state of the cluster or node.\n\n| Component | Possible States                              |\n|-----------|---------------------------------------------|\n| Cluster   | Pending, Provisioning, Running, Provisioned, Terminating, Deleting, Failed |\n| Node      | Pending, Provisioning, Provisioned, Running, Deleting, Failed, Unknown   |\n",
            "example": "Pending",
            "type": "string"
          }
        },
        "required": [
          "state",
          "message"
        ],
        "type": "object"
      },
      "Status": {
        "description": "Details about the status of the node pool or control plane.\n",
        "properties": {
          "messages": {
            "description": "Detailed message about the status of the node pool or control plane.\n",
            "items": {
              "description": "Messages returned by the control planes or node pools.\n",
              "example": "Ready",
              "type": "string"
            },
            "type": "array"
          },
          "state": {
            "description": "Current state of the node pool or control plane.\n\n| Component       | Possible States                                           |\n|-----------------|-----------------------------------------------------------|\n| Node pool       | ScalingUp, ScalingDown, Pending, Running, Failed, Unknown |\n| Control Plane   | ScalingUp, ScalingDown, Pending, Running, Failed, Unknown |\n",
            "example": "Pending",
            "type": "string"
          }
        },
        "required": [
          "state",
          "messages"
        ],
        "type": "object"
      },
      "Taint": {
        "properties": {
          "effect": {
            "description": "The effect of the taint on pods that do not tolerate the taint.\n- **NoSchedule**: Prevents new pods from being scheduled on the node, unless they tolerate the taint. Allows all existing pods to continue running.\n- **PreferNoSchedule**: Similar to NoSchedule, but attempts not to schedule new pods on the node, rather than completely prohibiting new pod scheduling on the node.\n- **NoExecute**: Removes all already running pods that do not tolerate the taint.\n",
            "enum": [
              "NoSchedule",
              "PreferNoSchedule",
              "NoExecute"
            ],
            "example": "NoSchedule",
            "type": "string"
          },
          "key": {
            "description": "Key of the taint to be applied to the node.",
            "example": "example-key",
            "type": "string"
          },
          "value": {
            "description": "Value corresponding to the taint key.",
            "example": "value1",
            "type": "string"
          }
        },
        "required": [
          "key",
          "value",
          "effect"
        ],
        "type": "object"
      },
      "Version": {
        "description": "Object representing a Kubernetes version.",
        "properties": {
          "deprecated": {
            "description": "Indicates whether the version is deprecated.",
            "example": false,
            "type": "boolean"
          },
          "version": {
            "description": "Kubernetes version.",
            "example": "v1.22.9",
            "type": "string"
          }
        },
        "required": [
          "version",
          "deprecated"
        ],
        "type": "object"
      },
      "VersionsResponse": {
        "description": "Response object for the Version request.",
        "properties": {
          "results": {
            "description": "Lists of Kubernetes cluster versions.",
            "items": {
              "$ref": "#/components/schemas/Version"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      },
      "OAuth2": {
        "description": "OAuth2 by IDPA (Identity Provider Authentication)\n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/auth",
            "scopes": {
              "mke.read": "Read information about IaaS resources",
              "mke.write": "Write information about IaaS resources"
            },
            "tokenUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "email": "suporte@jaxyendy.com",
      "name": "IAAS Cloud Tribe",
      "url": "https://github.com/luizalabs"
    },
    "description": "APIs related to the Kubernetes product.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "k8s-api-product",
    "version": "0.1.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v0/clusters": {
      "get": {
        "description": "Lists all clusters for a user.",
        "operationId": "getClusters",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClustersResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "List all clusters",
        "tags": [
          "cluster"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_list",
          "product-name": "kubernetes"
        }
      },
      "post": {
        "description": "Creates a Kubernetes cluster in Magalu Cloud.",
        "operationId": "createCluster",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClusterResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "summary": "Create a cluster",
        "tags": [
          "cluster"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"cluster-example\",\"version\":\"v1.30.2\",\"description\":\"This is an example cluster.\",\"zone\":\"br-region-zone\",\"enabled_bastion\":false,\"enabled_server_group\":false,\"node_pools\":[{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"valor1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}],\"allowed_cidrs\":[\"192.168.1.0/24\",\"10.0.0.0/16\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"name\":\"cluster-example\",\"version\":\"v1.30.2\",\"description\":\"This is an example cluster.\",\"zone\":\"br-region-zone\",\"enabled_bastion\":false,\"enabled_server_group\":false,\"node_pools\":[{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"valor1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}],\"allowed_cidrs\":[\"192.168.1.0/24\",\"10.0.0.0/16\"]}' |  \\\n  http POST https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.30.2\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}],\\\"allowed_cidrs\\\":[\\\"192.168.1.0/24\\\",\\\"10.0.0.0/16\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.30.2\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}],\\\"allowed_cidrs\\\":[\\\"192.168.1.0/24\\\",\\\"10.0.0.0/16\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v0/clusters\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'cluster-example',\n  version: 'v1.30.2',\n  description: 'This is an example cluster.',\n  zone: 'br-region-zone',\n  enabled_bastion: false,\n  enabled_server_group: false,\n  node_pools: [\n    {\n      name: 'nodepool-example',\n      flavor: 'cloud-k8s.gp1.small',\n      replicas: 3,\n      tags: ['tag-value1'],\n      taints: [{key: 'example-key', value: 'valor1', effect: 'NoSchedule'}],\n      auto_scale: {min_replicas: 2, max_replicas: 5}\n    }\n  ],\n  allowed_cidrs: ['192.168.1.0/24', '10.0.0.0/16']\n}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.30.2\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}],\\\"allowed_cidrs\\\":[\\\"192.168.1.0/24\\\",\\\"10.0.0.0/16\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_create",
          "product-name": "kubernetes"
        }
      }
    },
    "/v0/clusters/{cluster_id}": {
      "delete": {
        "description": "Deletes a cluster by cluster_uuid.",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Conflict"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "summary": "Delete a cluster",
        "tags": [
          "cluster"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"DELETE\", \"/v0/clusters/%7Bcluster_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_delete",
          "product-name": "kubernetes"
        }
      },
      "get": {
        "description": "Lists detailed cluster information by cluster_uuid.",
        "operationId": "getClusterById",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterByIdResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "List a cluster by uuid",
        "tags": [
          "cluster"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_get",
          "product-name": "kubernetes"
        }
      },
      "patch": {
        "description": "Patches the mutable fields of a cluster",
        "operationId": "patchCluster",
        "parameters": [
          {
            "description": "Cluster's UUID",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchClusterResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "Patches a cluster",
        "tags": [
          "cluster"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"allowed_cidrs\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"allowed_cidrs\":[\"string\"]}' |  \\\n  http PATCH https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"allowed_cidrs\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"allowed_cidrs\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v0/clusters/%7Bcluster_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({allowed_cidrs: ['string']}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"allowed_cidrs\\\":[\\\"string\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_update",
          "product-name": "kubernetes"
        }
      }
    },
    "/v0/clusters/{cluster_id}/kubeconfig": {
      "get": {
        "description": "Retrieves the kubeconfig of a Kubernetes cluster by cluster_uuid.",
        "operationId": "getKubeConfigCluster",
        "parameters": [
          {
            "description": "Schema to get the cluster's kubeconfig file.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterKubeConfigResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "Get kubeconfig cluster",
        "tags": [
          "cluster"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/kubeconfig\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/kubeconfig\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_access",
          "product-name": "kubernetes"
        }
      }
    },
    "/v0/clusters/{cluster_id}/node_pools": {
      "get": {
        "description": "Gets a node pool from a Kubernetes cluster by cluster_uuid.",
        "operationId": "ListNodePoolsV0",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNodePoolsResponseV0"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "List node pools by cluster_id",
        "tags": [
          "nodepool"
        ],
        "x-mgc-hidden": true
      },
      "post": {
        "description": "Creates a node pool in a Kubernetes cluster.",
        "operationId": "createNodePool",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodePoolRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "summary": "Create a node pool",
        "tags": [
          "nodepool"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"value1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"value1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}' |  \\\n  http POST https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v0/clusters/%7Bcluster_id%7D/node_pools\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'nodepool-example',\n  flavor: 'cloud-k8s.gp1.small',\n  replicas: 3,\n  tags: ['tag-value1'],\n  taints: [{key: 'example-key', value: 'value1', effect: 'NoSchedule'}],\n  auto_scale: {min_replicas: 2, max_replicas: 5}\n}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_nodepool_create",
          "product-name": "kubernetes"
        }
      }
    },
    "/v0/clusters/{cluster_id}/node_pools/{node_pool_id}": {
      "delete": {
        "description": "Deletes a node pool in a Kubernetes cluster by nodepool_uuid.",
        "operationId": "deleteNodePool",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Nodepool's UUID.",
            "in": "path",
            "name": "node_pool_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "summary": "Delete node pool by node_pool_id",
        "tags": [
          "nodepool"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"DELETE\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_nodepool_delete",
          "product-name": "kubernetes"
        }
      },
      "get": {
        "description": "Gets nodes in a node pool by nodepool_uuid.",
        "operationId": "getNodePool",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Nodepool's UUID.",
            "in": "path",
            "name": "node_pool_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "Get node pool by node_pool_id",
        "tags": [
          "nodepool"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_nodepool_get",
          "product-name": "kubernetes"
        }
      },
      "patch": {
        "description": "Updates nodes from a node pool by nodepool_uuid.",
        "operationId": "patchNodePool",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Nodepool's UUID.",
            "in": "path",
            "name": "node_pool_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchNodePoolRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "summary": "Patch node pool replicas by node_pool_id",
        "tags": [
          "nodepool"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"replicas\":0,\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"replicas\":0,\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}' |  \\\n  http PATCH https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({replicas: 0, auto_scale: {min_replicas: 2, max_replicas: 5}}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_nodepool_update",
          "product-name": "kubernetes"
        }
      }
    },
    "/v0/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes": {
      "get": {
        "description": "Lists nodes in a node pool by nodepool_uuid.",
        "operationId": "getNodes",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Nodepool's UUID.",
            "in": "path",
            "name": "node_pool_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "List nodes from a node pool by node_pool_id",
        "tags": [
          "nodepool"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_nodepool_get",
          "product-name": "kubernetes"
        }
      }
    },
    "/v0/info/flavors": {
      "get": {
        "description": "Lists all available flavors.",
        "operationId": "getFlavors",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorsResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "Lists all available flavors",
        "tags": [
          "info"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v0/info/flavors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/info/flavors\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_info",
          "product-name": "kubernetes"
        }
      }
    },
    "/v0/info/versions": {
      "get": {
        "description": "Lists all available Kubernetes versions.",
        "operationId": "getVersions",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "Lists all available versions",
        "tags": [
          "info"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v0/info/versions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/info/versions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_info",
          "product-name": "kubernetes"
        }
      }
    },
    "/v1alpha0/clusters/{cluster_id}/node-pools": {
      "get": {
        "description": "Gets a node pool from a Kubernetes cluster by cluster_uuid.",
        "operationId": "ListNodePoolsV1alpha0",
        "parameters": [
          {
            "description": "Cluster's UUID.",
            "in": "path",
            "name": "cluster_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListNodePoolsResponseV1alpha0"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Not Found"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "List node pools by cluster_id",
        "tags": [
          "nodepool"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1alpha0/clusters/%7Bcluster_id%7D/node-pools \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1alpha0/clusters/%7Bcluster_id%7D/node-pools \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1alpha0/clusters/%7Bcluster_id%7D/node-pools\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v1alpha0/clusters/%7Bcluster_id%7D/node-pools\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v1alpha0/clusters/%7Bcluster_id%7D/node-pools\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1alpha0/clusters/%7Bcluster_id%7D/node-pools\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_nodepool_list",
          "product-name": "kubernetes"
        }
      }
    },
    "/v1/flavors": {
      "get": {
        "description": "Lists all available flavors.",
        "operationId": "getFlavorsV1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorsResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "Lists all available flavors",
        "tags": [
          "flavor"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/flavors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v1/flavors\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_info",
          "product-name": "kubernetes"
        }
      }
    },
    "/v1/versions": {
      "get": {
        "description": "Lists all available Kubernetes versions.",
        "operationId": "getVersionsV1",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Bad Request"
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Unauthorized"
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Forbidden"
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Too Many Requests"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            },
            "description": "Internal Server Error"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "summary": "Lists all available versions",
        "tags": [
          "version"
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/versions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v1/versions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ],
        "x-permission": {
          "permission-name": "kubernetes_cluster_info",
          "product-name": "kubernetes"
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://{env}/{region}/kubernetes",
      "variables": {
        "region": {
          "enum": [
            "br-ne1",
            "br-se1",
            "br-mgl1"
          ],
          "default": "br-se1",
          "description": "Region to reach the service",
          "x-mgc-transforms": [
            {
              "allowMissing": true,
              "translations": [
                {
                  "from": "br-mgl1",
                  "to": "br-se-1"
                }
              ],
              "type": "translate"
            }
          ]
        },
        "env": {
          "enum": [
            "api.magalu.cloud",
            "api.pre-prod.jaxyendy.com"
          ],
          "default": "api.magalu.cloud",
          "description": "Environment to use",
          "x-mgc-transforms": [
            {
              "translations": [
                {
                  "from": "prod",
                  "to": "api.magalu.cloud"
                },
                {
                  "from": "pre-prod",
                  "to": "api.pre-prod.jaxyendy.com"
                }
              ],
              "type": "translate"
            }
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Endpoints related to the creation, listing, deletion, and retrieval of the kubeconfig for a Kubernetes cluster.",
      "name": "cluster"
    },
    {
      "description": "Endpoints related to the creation, listing of nodepools and nodes, updating, and deletion of nodepools for a Kubernetes cluster.",
      "name": "nodepool"
    },
    {
      "description": "Endpoints related to listing available flavors (resource configurations) and Kubernetes versions for a Kubernetes cluster.",
      "name": "info"
    },
    {
      "description": "Endpoints related to listing available flavors for a Kubernetes cluster.",
      "name": "flavor"
    },
    {
      "description": "Endpoints related to listing available Kubernetes versions for a Kubernetes cluster.",
      "name": "version"
    }
  ]
}