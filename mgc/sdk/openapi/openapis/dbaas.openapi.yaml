{
  "components": {
    "parameters": {
      "backup_id": {
        "description": "Value referring to backup Id.",
        "example": "1b65c0e4-94a1-4385-aedb-c1b34f6e8935",
        "in": "path",
        "name": "backup_id",
        "required": true,
        "schema": {
          "format": "uuid",
          "title": "Backup Id",
          "type": "string"
        }
      },
      "engine_id": {
        "description": "Value referring to datastore Id.",
        "example": "7a11cfc5-f9f8-4fa2-a418-94a423f6a51f",
        "in": "path",
        "name": "engine_id",
        "required": true,
        "schema": {
          "description": "**Deprecated**: This property is being deprecated in favor of `engine_id`. Please update your requests to use `engine_id` for improved functionality and future compatibility.\n",
          "format": "uuid",
          "title": "Datastore Id (Deprecated)",
          "type": "string"
        }
      },
      "engine_id_query": {
        "description": "Value referring to engine Id.",
        "in": "query",
        "name": "engine_id",
        "required": false,
        "schema": {
          "format": "uuid",
          "title": "Engine Id",
          "type": "string"
        }
      },
      "engine_status": {
        "description": "Value referring to engine status.",
        "in": "query",
        "name": "status",
        "schema": {
          "$ref": "#/components/schemas/EngineStatus"
        }
      },
      "instance_expand": {
        "description": "Instance extra attributes or relations to show with the main query. When available, more than one value can be informed using commas. e.g: `_expand=value1,value2`",
        "in": "query",
        "name": "_expand",
        "required": false,
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/InstanceExpand"
            }
          ]
        }
      },
      "instance_id": {
        "description": "Value referring to instance Id.",
        "example": "f21999cb-302f-48f7-b584-6a84748e112c",
        "in": "path",
        "name": "instance_id",
        "required": true,
        "schema": {
          "format": "uuid",
          "title": "Instance Id",
          "type": "string"
        }
      },
      "instance_id_query": {
        "description": "Value referring to instance Id.",
        "example": "f21999cb-302f-48f7-b584-6a84748e112c",
        "in": "query",
        "name": "instance_id",
        "required": false,
        "schema": {
          "format": "uuid",
          "title": "Instance Id",
          "type": "string"
        }
      },
      "instance_status": {
        "description": "Value referring to instance status.",
        "in": "query",
        "name": "status",
        "schema": {
          "$ref": "#/components/schemas/InstanceStatus"
        }
      },
      "instance_type_id": {
        "description": "Value referring to instance type Id.",
        "example": "7a11cfc5-f9f8-4fa2-a418-94a423f6a51f",
        "in": "path",
        "name": "instance_type_id",
        "required": true,
        "schema": {
          "description": "**Deprecated**: This property is being deprecated in favor of `instance_type_id`. Please update your requests to use `instance_type_id` for improved functionality and future compatibility.\n",
          "format": "uuid",
          "title": "Flavor Id (Deprecated)",
          "type": "string"
        }
      },
      "instance_type_status": {
        "description": "An enumeration.",
        "in": "query",
        "name": "status",
        "schema": {
          "allOf": [
            {
              "$ref": "#/components/schemas/InstanceTypeStatus"
            }
          ],
          "default": "ACTIVE"
        }
      },
      "limit_medium": {
        "description": "The maximum number of items per page.",
        "in": "query",
        "name": "_limit",
        "required": false,
        "schema": {
          "default": 10,
          "maximum": 50,
          "minimum": 1,
          "type": "integer"
        }
      },
      "limit_small": {
        "description": "The maximum number of items per page.",
        "in": "query",
        "name": "_limit",
        "required": false,
        "schema": {
          "default": 10,
          "maximum": 25,
          "minimum": 1,
          "type": "integer"
        }
      },
      "offset": {
        "description": "The number of items to skip before starting to collect the result set.",
        "in": "query",
        "name": "_offset",
        "required": false,
        "schema": {
          "default": 0,
          "minimum": 0,
          "type": "integer"
        }
      },
      "replica_id": {
        "description": "Value referring to replica Id.",
        "example": "2218ad95-6ba2-4fef-8302-a31cb1062412",
        "in": "path",
        "name": "replica_id",
        "required": true,
        "schema": {
          "format": "uuid",
          "title": "Replica Id",
          "type": "string"
        }
      },
      "snapshot_id": {
        "description": "Value referring to snapshot Id.",
        "example": "c1b34f6e-94a1-4385-aedb-1b65c0e48935",
        "in": "path",
        "name": "snapshot_id",
        "required": true,
        "schema": {
          "format": "uuid",
          "title": "Snapshot Id",
          "type": "string"
        }
      },
      "snapshot_status": {
        "description": "Value referring to snapshot status.",
        "in": "query",
        "name": "status",
        "schema": {
          "$ref": "#/components/schemas/SnapshotStatus"
        }
      },
      "snapshot_type": {
        "description": "Value referring to snapshot type.",
        "in": "query",
        "name": "type",
        "schema": {
          "$ref": "#/components/schemas/SnapshotType"
        }
      },
      "source_id": {
        "description": "Value referring to source Id.",
        "example": "9959ee7a-0710-4faa-9f10-6845819e8ac0",
        "in": "query",
        "name": "source_id",
        "required": false,
        "schema": {
          "format": "uuid",
          "title": "Source Id",
          "type": "string"
        }
      },
      "volume_size_gt": {
        "description": "Value referring to volume size greater than.",
        "in": "query",
        "name": "volume.size__gt",
        "required": false,
        "schema": {
          "title": "Volume.Size Gt",
          "type": "integer"
        }
      },
      "volume_size_gte": {
        "description": "Value referring to volume size greater than or equal to.",
        "in": "query",
        "name": "volume.size__gte",
        "required": false,
        "schema": {
          "title": "Volume.Size Gte",
          "type": "integer"
        }
      },
      "volume_size_lt": {
        "description": "Value referring to volume size less than.",
        "in": "query",
        "name": "volume.size__lt",
        "required": false,
        "schema": {
          "title": "Volume.Size Lt",
          "type": "integer"
        }
      },
      "volume_size_lte": {
        "description": "Value referring to volume size less than or equal to.",
        "in": "query",
        "name": "volume.size__lte",
        "required": false,
        "schema": {
          "title": "Volume.Size Lte",
          "type": "integer"
        }
      },
      "volume_size_query": {
        "description": "Value referring to volume size.",
        "in": "query",
        "name": "volume.size",
        "required": false,
        "schema": {
          "title": "Volume.Size",
          "type": "integer"
        }
      }
    },
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "example": {
              "message": "Bad request",
              "slug": "bad_request"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Bad Request."
      },
      "Forbidden": {
        "content": {
          "application/json": {
            "example": {
              "message": "Access Forbidden",
              "slug": "forbidden"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Access Forbidden."
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "example": {
              "message": "Internal server error",
              "slug": "internal_server_error"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Internal Server Error."
      },
      "NotFound": {
        "content": {
          "application/json": {
            "example": {
              "message": "Not Found",
              "slug": "not_found"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Not Found."
      },
      "RequiredField": {
        "content": {
          "application/json": {
            "example": {
              "message": "Bad request",
              "slug": "bad_request"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Required Field."
      },
      "TooManyRequests": {
        "content": {
          "application/json": {
            "example": {
              "message": "Too Many Requests",
              "slug": "too_many_requests"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Too Many Requests."
      },
      "Unauthorized": {
        "content": {
          "application/json": {
            "example": {
              "message": "Access unauthorized",
              "slug": "unauthorized"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Access Unauthorized."
      },
      "UnprocessableEntity": {
        "content": {
          "application/json": {
            "example": {
              "message": "Unprocessable entity",
              "slug": "unprocessable_entity"
            },
            "schema": {
              "$ref": "#/components/schemas/ErrorResponse"
            }
          }
        },
        "description": "Unprocessable Entity."
      }
    },
    "schemas": {
      "Address": {
        "properties": {
          "access": {
            "description": "Determine if the IP can be accessed from the internet.",
            "enum": [
              "PRIVATE",
              "PUBLIC"
            ],
            "title": "Access",
            "type": "string"
          },
          "address": {
            "example": "172.53.10.82",
            "title": "Address",
            "type": "string"
          },
          "type": {
            "enum": [
              "IPv4",
              "IPv6"
            ],
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "access"
        ],
        "type": "object"
      },
      "AddressAccess": {
        "enum": [
          "PRIVATE",
          "PUBLIC"
        ],
        "example": "PRIVATE",
        "title": "Address Access",
        "type": "string"
      },
      "AddressType": {
        "enum": [
          "IPv4",
          "IPv6"
        ],
        "example": "IPv4",
        "title": "Address Type",
        "type": "string"
      },
      "AvailabilityZone": {
        "enum": [
          "br-se1-a",
          "br-se1-b",
          "br-se1-c",
          "br-ne1-a",
          "br-ne1-b"
        ],
        "example": "br-ne1-a",
        "title": "Availability Zone",
        "type": "string"
      },
      "DatabaseInstanceUpdateRequest": {
        "properties": {
          "backup_retention_days": {
            "description": "The number of days that a particular backup is kept until its deletion.",
            "example": 7,
            "title": "Backup Retention Days",
            "type": "integer"
          },
          "backup_start_at": {
            "description": "Start time (UTC timezone) which is allowed to start the automated backup process.",
            "example": "04:00:00",
            "format": "time",
            "title": "Backup Start At",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/InstanceStatusUpdate"
          }
        },
        "title": "Database Instance Update Request",
        "type": "object"
      },
      "EngineResponse": {
        "properties": {
          "engine": {
            "deprecated": true,
            "description": "Database engine (Deprecated).\n**Deprecated**: This property is being deprecated in favor of `name`. Please update your requests to use `name` for improved functionality and future compatibility.\n",
            "example": "mysql",
            "title": "Engine",
            "type": "string"
          },
          "id": {
            "description": "Engine unique identifier.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "Database name.",
            "example": "mysql",
            "title": "Name",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/EngineStatus"
          },
          "version": {
            "description": "Database engine version.",
            "example": "5.7",
            "title": "Version",
            "type": "string"
          }
        },
        "required": [
          "engine",
          "name",
          "id",
          "version",
          "status"
        ],
        "title": "Engine Response",
        "type": "object"
      },
      "EngineStatus": {
        "description": "An enumeration.",
        "enum": [
          "ACTIVE",
          "DEPRECATED"
        ],
        "title": "EngineStatus",
        "type": "string"
      },
      "EnginesResponse": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/EngineResponse"
            },
            "title": "Results",
            "type": "array"
          }
        },
        "required": [
          "meta",
          "results"
        ],
        "title": "Engines Response",
        "type": "object"
      },
      "ErrorResponse": {
        "properties": {
          "details": {
            "type": "object"
          },
          "message": {
            "example": "Bad Request",
            "type": "string"
          },
          "slug": {
            "example": "bad_request",
            "type": "string"
          }
        },
        "required": [
          "slug",
          "message"
        ],
        "title": "Error Response",
        "type": "object"
      },
      "FieldValueResponse": {
        "properties": {
          "field": {
            "description": "The field name used to filter the response.",
            "title": "Field",
            "type": "string"
          },
          "value": {
            "description": "The field value used to filter the response.",
            "title": "Value",
            "type": "string"
          }
        },
        "required": [
          "field",
          "value"
        ],
        "title": "FieldValueResponse",
        "type": "object"
      },
      "InstanceCreateRequest": {
        "properties": {
          "availability_zone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "backup_retention_days": {
            "default": 7,
            "description": "The number of days that a particular backup is kept until its deletion.",
            "title": "Backup Retention Days",
            "type": "integer"
          },
          "backup_start_at": {
            "default": "04:00:00",
            "description": "Start time (UTC timezone) which is allowed to start the automated backup process.",
            "format": "time",
            "title": "Backup Start At",
            "type": "string"
          },
          "datastore_id": {
            "deprecated": true,
            "description": "**Deprecated**: This property is being deprecated in favor of `engine_id`. Please update your requests to use `engine_id` for improved functionality and future compatibility.\n",
            "format": "uuid",
            "title": "Datastore Id (Deprecated)",
            "type": "string"
          },
          "engine_id": {
            "format": "uuid",
            "title": "Engine Id",
            "type": "string"
          },
          "flavor_id": {
            "deprecated": true,
            "description": "**Deprecated**: This property is being deprecated in favor of `instance_type_id`. Please update your requests to use `instance_type_id` for improved functionality and future compatibility.\n",
            "format": "uuid",
            "title": "Flavor Id (Deprecated)",
            "type": "string"
          },
          "instance_type_id": {
            "format": "uuid",
            "title": "Instance Type Id",
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "title": "Name",
            "type": "string"
          },
          "parameters": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/InstanceParametersRequest"
            },
            "type": "array"
          },
          "password": {
            "maxLength": 50,
            "title": "Password",
            "type": "string"
          },
          "user": {
            "maxLength": 25,
            "title": "User",
            "type": "string"
          },
          "volume": {
            "$ref": "#/components/schemas/InstanceVolumeRequest"
          }
        },
        "required": [
          "name",
          "password",
          "user",
          "volume"
        ],
        "title": "Instance Create Request",
        "type": "object"
      },
      "InstanceDetailResponse": {
        "properties": {
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/Address"
            },
            "title": "Addresses",
            "type": "array"
          },
          "availability_zone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "backup_retention_days": {
            "description": "The number of days that a particular backup is kept until its deletion.",
            "example": 7,
            "title": "Backup Retention Days",
            "type": "integer"
          },
          "backup_start_at": {
            "description": "Start time (UTC timezone) which is allowed to start the automated backup process.",
            "example": "04:00:00",
            "format": "time",
            "title": "Backup Start At",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Creation date",
            "type": "string"
          },
          "datastore_id": {
            "deprecated": true,
            "description": "Datastore unique identifier (Deprecated).\n**Deprecated**: This property is being deprecated in favor of `engine_id`. Please update your requests to use `engine_id` for improved functionality and future compatibility.\n",
            "format": "uuid",
            "type": "string"
          },
          "engine_id": {
            "description": "Engine unique identifier.",
            "format": "uuid",
            "type": "string"
          },
          "finished_at": {
            "format": "date-time",
            "title": "Initial setup finish date",
            "type": "string"
          },
          "flavor_id": {
            "deprecated": true,
            "description": "Flavor unique identifier. Instance size  (Deprecated).\n**Deprecated**: This property is being deprecated in favor of `instance_type_id`. Please update your requests to use `instance_type_id` for improved functionality and future compatibility.\n",
            "format": "uuid",
            "type": "string"
          },
          "generation": {
            "$ref": "#/components/schemas/InstanceGeneration"
          },
          "id": {
            "description": "Database instance unique identifier.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "instance_type_id": {
            "description": "Instance Type unique identifier. Instance size.",
            "format": "uuid",
            "type": "string"
          },
          "maintenance_scheduled_at": {
            "format": "date-time",
            "title": "Maintenance schedule date",
            "type": "string"
          },
          "name": {
            "description": "Database instance unique name.",
            "example": "my-db-instance",
            "maxLength": 100,
            "title": "Name",
            "type": "string"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/InstanceParametersResponse"
            },
            "type": "array"
          },
          "replicas": {
            "items": {
              "$ref": "#/components/schemas/ReplicaDetailResponse"
            },
            "title": "Replicas",
            "type": "array"
          },
          "started_at": {
            "format": "date-time",
            "title": "Initial setup start date",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/InstanceStatus"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Last updated date",
            "type": "string"
          },
          "volume": {
            "$ref": "#/components/schemas/Volume"
          }
        },
        "required": [
          "id",
          "name",
          "engine_id",
          "datastore_id",
          "flavor_id",
          "instance_type_id",
          "volume",
          "addresses",
          "status",
          "availability_zone",
          "generation",
          "parameters",
          "created_at",
          "backup_start_at",
          "backup_retention_days"
        ],
        "title": "Instance Detail Response",
        "type": "object"
      },
      "InstanceExpand": {
        "description": "An enumeration.",
        "enum": [
          "replicas"
        ],
        "title": "Instance Expand",
        "type": "string"
      },
      "InstanceGeneration": {
        "description": "Current database instance generation",
        "enum": [
          "G0B",
          "G1B",
          "G2B",
          "G3B",
          "G4B",
          "G5B",
          "G6B",
          "G7B",
          "G8B",
          "G9B",
          "G10B",
          "G1",
          "G2"
        ],
        "example": "G2",
        "title": "Instance Generation",
        "type": "string"
      },
      "InstanceParametersNames": {
        "description": "Database parameter name.",
        "enum": [
          "LOWER_CASE_TABLE_NAMES"
        ],
        "title": "Instance Parameters Name",
        "type": "string"
      },
      "InstanceParametersRequest": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/InstanceParametersNames"
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ],
            "description": "Database parameter value.",
            "title": "Instance Parameters Value"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "title": "InstanceParametersRequest",
        "type": "object"
      },
      "InstanceParametersResponse": {
        "properties": {
          "name": {
            "$ref": "#/components/schemas/InstanceParametersNames"
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ],
            "description": "Database parameter value.",
            "title": "Instance Parameters Value"
          }
        },
        "required": [
          "name",
          "value"
        ],
        "title": "InstanceParametersResponse",
        "type": "object"
      },
      "InstanceResizeRequest": {
        "properties": {
          "flavor_id": {
            "deprecated": true,
            "description": "**Deprecated**: This property is being deprecated in favor of `instance_type_id`. Please update your requests to use `instance_type_id` for improved functionality and future compatibility.\n",
            "format": "uuid",
            "title": "Flavor Id (Deprecated)",
            "type": "string"
          },
          "instance_type_id": {
            "format": "uuid",
            "title": "Instance Type Id",
            "type": "string"
          },
          "volume": {
            "$ref": "#/components/schemas/InstanceVolumeResizeRequest"
          }
        },
        "title": "Instance Resize Request",
        "type": "object"
      },
      "InstanceResponse": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "Instance Response",
        "type": "object"
      },
      "InstanceStatus": {
        "enum": [
          "CREATING",
          "ERROR",
          "STOPPED",
          "REBOOT",
          "PENDING",
          "RESIZING",
          "DELETED",
          "ACTIVE",
          "STARTING",
          "STOPPING",
          "BACKING_UP",
          "DELETING",
          "RESTORING",
          "ERROR_DELETING",
          "MAINTENANCE",
          "MAINTENANCE_ERROR"
        ],
        "example": "ACTIVE",
        "title": "Instance Status",
        "type": "string"
      },
      "InstanceStatusUpdate": {
        "enum": [
          "ACTIVE",
          "STOPPED"
        ],
        "example": "ACTIVE",
        "title": "Instance Status Update",
        "type": "string"
      },
      "InstanceType": {
        "properties": {
          "family_description": {
            "description": "Instance Type Family Description.",
            "example": "Basic",
            "type": "string"
          },
          "family_slug": {
            "description": "Instance Type Family SLUG.",
            "example": "bs1",
            "type": "string"
          },
          "id": {
            "description": "Instance Type unique identifier.",
            "format": "uuid",
            "type": "string"
          },
          "label": {
            "description": "Instance Type label.",
            "example": "cloud-dbaas-bs1.small",
            "type": "string"
          },
          "name": {
            "description": "Instance Type name.",
            "example": "i0-c1-r4-d10",
            "type": "string"
          },
          "ram": {
            "description": "RAM Amount.",
            "example": "4 GB",
            "type": "string"
          },
          "size": {
            "description": "Instance Type Size Description.",
            "example": "Small",
            "type": "string"
          },
          "sku_replica": {
            "description": "SKU Database Instance Replica.",
            "example": "BRNE10610101sm",
            "type": "string"
          },
          "sku_source": {
            "description": "SKU Database Instance Source.",
            "example": "BRNE10600101sm",
            "type": "string"
          },
          "vcpu": {
            "description": "Number of vCPUs.",
            "example": "1",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "label",
          "vcpu",
          "ram",
          "family_description",
          "family_slug",
          "size",
          "sku_source",
          "sku_replica"
        ],
        "type": "object"
      },
      "InstanceTypeStatus": {
        "description": "An enumeration.",
        "enum": [
          "ACTIVE",
          "DEPRECATED"
        ],
        "title": "Instance Type Status",
        "type": "string"
      },
      "InstanceTypesResponse": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/InstanceType"
            },
            "title": "Results",
            "type": "array"
          }
        },
        "required": [
          "meta",
          "results"
        ],
        "title": "InstanceTypes Response",
        "type": "object"
      },
      "InstanceVolumeRequest": {
        "properties": {
          "size": {
            "description": "The size of the volume (in GiB).",
            "example": 30,
            "maximum": 50000,
            "minimum": 10,
            "type": "integer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeType"
              }
            ],
            "default": "CLOUD_NVME15K",
            "description": "The type of the volume."
          }
        },
        "required": [
          "size"
        ],
        "title": "Instance Volume Request",
        "type": "object"
      },
      "InstanceVolumeResizeRequest": {
        "properties": {
          "size": {
            "description": "The size of the volume (in GiB).",
            "example": 30,
            "maximum": 50000,
            "minimum": 10,
            "type": "integer"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeType"
              }
            ],
            "default": "CLOUD_NVME15K",
            "description": "The type of the volume."
          }
        },
        "required": [
          "size"
        ],
        "title": "Instance Volume Request",
        "type": "object"
      },
      "InstancesResponse": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/InstanceDetailResponse"
            },
            "title": "Results",
            "type": "array"
          }
        },
        "required": [
          "meta",
          "results"
        ],
        "title": "Instances Response",
        "type": "object"
      },
      "MetaResponse": {
        "description": "Page details about the current request pagination.",
        "properties": {
          "filters": {
            "description": "Data filters use in the current request pagination.",
            "items": {
              "$ref": "#/components/schemas/FieldValueResponse"
            },
            "title": "Filters",
            "type": "array"
          },
          "page": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "required": [
          "page",
          "filters"
        ],
        "title": "Meta Response",
        "type": "object"
      },
      "PageResponse": {
        "properties": {
          "count": {
            "description": "The number of items on the current page.",
            "title": "Count",
            "type": "integer"
          },
          "limit": {
            "description": "The maximum number of items per page.",
            "title": "Limit",
            "type": "integer"
          },
          "max_limit": {
            "description": "The maximum allowable limit for the number of items per page.",
            "title": "Max Limit",
            "type": "integer"
          },
          "offset": {
            "description": "The number of items to skip before starting to collect the result set.",
            "title": "Offset",
            "type": "integer"
          },
          "total": {
            "description": "The total number of items available across all pages.",
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "offset",
          "count",
          "total",
          "max_limit"
        ],
        "title": "PageResponse",
        "type": "object"
      },
      "ReplicaAddressResponse": {
        "properties": {
          "access": {
            "$ref": "#/components/schemas/AddressAccess"
          },
          "address": {
            "title": "Address",
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AddressType"
          }
        },
        "required": [
          "access"
        ],
        "title": "Replica Address Response",
        "type": "object"
      },
      "ReplicaCreateRequest": {
        "properties": {
          "flavor_id": {
            "deprecated": true,
            "description": "Flavor Id (Deprecated).\n**Deprecated**: This property is being deprecated in favor of `instance_type_id`. Please update your requests to use `instance_type_id` for improved functionality and future compatibility.\n",
            "format": "uuid",
            "type": "string"
          },
          "instance_type_id": {
            "format": "uuid",
            "title": "Instance Type Id",
            "type": "string"
          },
          "name": {
            "maxLength": 255,
            "title": "Name",
            "type": "string"
          },
          "source_id": {
            "format": "uuid",
            "title": "Source Id",
            "type": "string"
          }
        },
        "required": [
          "name",
          "source_id"
        ],
        "title": "Replica Create Request",
        "type": "object"
      },
      "ReplicaDetailResponse": {
        "properties": {
          "addresses": {
            "items": {
              "$ref": "#/components/schemas/ReplicaAddressResponse"
            },
            "title": "Addresses",
            "type": "array"
          },
          "availability_zone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "datastore_id": {
            "deprecated": true,
            "description": "Datastore unique identifier (Deprecated).\n**Deprecated**: This property is being deprecated in favor of `engine_id`. Please update your requests to use `engine_id` for improved functionality and future compatibility.\n",
            "format": "uuid",
            "type": "string"
          },
          "engine_id": {
            "description": "Engine unique identifier.",
            "format": "uuid",
            "type": "string"
          },
          "finished_at": {
            "format": "date-time",
            "title": "Initial setup finish date",
            "type": "string"
          },
          "flavor_id": {
            "deprecated": true,
            "description": "Instance Type Id (Deprecated).\n**Deprecated**: This property is being deprecated in favor of `instance_type_id`. Please update your requests to use `engine_id` for improved functionality and future compatibility.\n",
            "format": "uuid",
            "type": "string"
          },
          "generation": {
            "$ref": "#/components/schemas/InstanceGeneration"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "instance_type_id": {
            "format": "uuid",
            "title": "Instance Type Id",
            "type": "string"
          },
          "maintenance_scheduled_at": {
            "format": "date-time",
            "title": "Maintenance schedule date",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "parameters": {
            "items": {
              "$ref": "#/components/schemas/InstanceParametersResponse"
            },
            "type": "array"
          },
          "source_id": {
            "format": "uuid",
            "title": "Source Id",
            "type": "string"
          },
          "started_at": {
            "format": "date-time",
            "title": "Initial setup start date",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/InstanceStatus"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          },
          "volume": {
            "$ref": "#/components/schemas/Volume"
          }
        },
        "required": [
          "addresses",
          "created_at",
          "engine_id",
          "datastore_id",
          "flavor_id",
          "instance_type_id",
          "volume",
          "id",
          "name",
          "source_id",
          "status",
          "availability_zone",
          "generation",
          "parameters"
        ],
        "title": "Replica Detail Response",
        "type": "object"
      },
      "ReplicaResizeRequest": {
        "properties": {
          "flavor_id": {
            "deprecated": true,
            "format": "uuid",
            "title": "Flavor Id",
            "type": "string"
          },
          "instance_type_id": {
            "format": "uuid",
            "title": "Instance Type Id",
            "type": "string"
          }
        },
        "title": "Replica Resize Request",
        "type": "object"
      },
      "ReplicaResponse": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "Replica Response",
        "type": "object"
      },
      "ReplicasResponse": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/ReplicaDetailResponse"
            },
            "title": "Results",
            "type": "array"
          }
        },
        "required": [
          "meta",
          "results"
        ],
        "title": "Replicas Response",
        "type": "object"
      },
      "RestoreSnapshotRequest": {
        "properties": {
          "backup_retention_days": {
            "default": 7,
            "description": "The number of days that a particular backup is kept until its deletion.",
            "title": "Backup Retention Days",
            "type": "integer"
          },
          "backup_start_at": {
            "default": "04:00:00",
            "description": "Start time (UTC timezone) which is allowed to start the automated backup process.",
            "format": "time",
            "title": "Backup Start At",
            "type": "string"
          },
          "instance_type_id": {
            "format": "uuid",
            "title": "Instance Type Id",
            "type": "string"
          },
          "name": {
            "maxLength": 100,
            "title": "Name",
            "type": "string"
          },
          "volume": {
            "$ref": "#/components/schemas/InstanceVolumeRequest"
          }
        },
        "required": [
          "name",
          "instance_type_id"
        ],
        "title": "Restore Snapshot Instance Request",
        "type": "object"
      },
      "SnapshotCreateRequest": {
        "properties": {
          "description": {
            "description": "Snapshot description.",
            "example": "my-description",
            "maxLength": 255,
            "title": "Description",
            "type": "string"
          },
          "name": {
            "description": "Snapshot unique name.",
            "example": "my-snapshot",
            "maxLength": 100,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "SnapshotDetailResponse": {
        "properties": {
          "allocated_size": {
            "description": "Allocated size in gibibytes.",
            "title": "Allocated Size",
            "type": "integer"
          },
          "availability_zone": {
            "$ref": "#/components/schemas/AvailabilityZone"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "finished_at": {
            "format": "date-time",
            "title": "Finished At",
            "type": "string"
          },
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "instance": {
            "$ref": "#/components/schemas/SnapshotInstanceDetailResponse"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "started_at": {
            "format": "date-time",
            "title": "Started At",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/SnapshotStatus"
          },
          "type": {
            "$ref": "#/components/schemas/SnapshotType"
          },
          "updated_at": {
            "format": "date-time",
            "title": "Updated At",
            "type": "string"
          }
        },
        "required": [
          "id",
          "instance",
          "allocated_size",
          "name",
          "description",
          "type",
          "status",
          "availability_zone",
          "created_at"
        ],
        "title": "Snapshot Detail Response",
        "type": "object"
      },
      "SnapshotInstanceDetailResponse": {
        "description": "This response object provides details about a database instance associated with a snapshot.\n",
        "properties": {
          "id": {
            "description": "Database instance unique identifier.",
            "format": "uuid",
            "title": "Id",
            "type": "string"
          },
          "name": {
            "description": "Database instance unique name.",
            "example": "my-db-instance",
            "maxLength": 100,
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "title": "Instance Detail Response",
        "type": "object"
      },
      "SnapshotResponse": {
        "properties": {
          "id": {
            "format": "uuid",
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "Snapshot Response",
        "type": "object"
      },
      "SnapshotStatus": {
        "description": "An enumeration.",
        "enum": [
          "PENDING",
          "CREATING",
          "AVAILABLE",
          "RESTORING",
          "ERROR",
          "DELETING",
          "DELETED"
        ],
        "title": "Snapshot Status",
        "type": "string"
      },
      "SnapshotType": {
        "description": "An enumeration.",
        "enum": [
          "ON_DEMAND",
          "AUTOMATED"
        ],
        "title": "Backup Type",
        "type": "string"
      },
      "SnapshotUpdateRequest": {
        "properties": {
          "description": {
            "description": "Snapshot description.",
            "example": "my-description-updated",
            "maxLength": 255,
            "title": "Description",
            "type": "string"
          },
          "name": {
            "description": "Snapshot unique name.",
            "example": "my-snapshot-updated",
            "maxLength": 100,
            "title": "Name",
            "type": "string"
          }
        },
        "type": "object"
      },
      "SnapshotsResponse": {
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "items": {
              "$ref": "#/components/schemas/SnapshotDetailResponse"
            },
            "title": "Results",
            "type": "array"
          }
        },
        "required": [
          "meta",
          "results"
        ],
        "title": "Snapshots Response",
        "type": "object"
      },
      "Volume": {
        "properties": {
          "size": {
            "description": "The size of the volume (in GiB).",
            "example": 30,
            "maximum": 50000,
            "minimum": 10,
            "type": "integer"
          },
          "type": {
            "description": "The type of the volume.",
            "enum": [
              "CLOUD_NVME",
              "CLOUD_HDD",
              "CLOUD_NVME_15K",
              "CLOUD_NVME15K",
              "CLOUD_NVME20K"
            ],
            "type": "string"
          }
        },
        "required": [
          "size",
          "type"
        ],
        "type": "object"
      },
      "VolumeType": {
        "description": "The type of the volume. CLOUD_NVME_15K will soon be deprecated, use CLOUD_NVME15K instead.",
        "enum": [
          "CLOUD_NVME_15K",
          "CLOUD_NVME",
          "CLOUD_HDD",
          "CLOUD_NVME15K",
          "CLOUD_NVME20K"
        ],
        "title": "Volume Type",
        "type": "string"
      }
    },
    "securitySchemes": {
      "OAuth2PreProd": {
        "description": "OAuth2 via IDPA",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://idpa-api-preprod.luizalabs.com/oauth/authorize",
            "scopes": {
              "dbaas.read": "Read DBaaS resources",
              "dbaas.write": "Write DBaaS resources"
            },
            "tokenUrl": "https://idpa-api-preprod.luizalabs.com/oauth/token"
          }
        },
        "type": "oauth2"
      },
      "OAuth2Prod": {
        "description": "OAuth2 via IDPA.",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://autoseg-idp.luizalabs.com/oauth/authorize",
            "scopes": {
              "dbaas.read": "Read DBaaS resources",
              "dbaas.write": "Write DBaaS resources"
            },
            "tokenUrl": "https://autoseg-idp.luizalabs.com/oauth/token"
          }
        },
        "type": "oauth2"
      },
      "bearerAuth": {
        "bearerFormat": "JWT",
        "description": "Enter the access token",
        "scheme": "bearer",
        "type": "http"
      }
    }
  },
  "info": {
    "contact": {
      "email": "cloud-iaas-dbaas@luizalabs.com",
      "name": "Tribo IAAS Cloud",
      "url": "https://gitlab.luizalabs.com/cloud/dbaas/docs"
    },
    "description": "DBaaS API Product.",
    "title": "DBaaS API Product",
    "version": "1.51.2"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v1/engines": {
      "get": {
        "description": "Returns a list of available engines.",
        "operationId": "engines_v1_get_all",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit_medium"
          },
          {
            "$ref": "#/components/parameters/engine_status"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnginesResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "List available engines.",
        "tags": [
          "engines"
        ]
      }
    },
    "/v1/engines/{engine_id}": {
      "get": {
        "description": "Returns a engine detail.",
        "operationId": "engines_v1_get_by_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/engine_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "Engine detail.",
        "tags": [
          "engines"
        ]
      }
    },
    "/v1/instance-types": {
      "get": {
        "description": "Returns a list of available instance types. An instance type is a hardware template that defines the size of RAM and vCPU.",
        "operationId": "instance_types_v1_get_all",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit_medium"
          },
          {
            "$ref": "#/components/parameters/instance_type_status"
          },
          {
            "description": "Engine Id unique identifier",
            "in": "query",
            "name": "engine_id",
            "required": false,
            "schema": {
              "format": "uuid",
              "title": "Engine Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceTypesResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "List available instance types.",
        "tags": [
          "instance_types"
        ]
      }
    },
    "/v1/instance-types/{instance_type_id}": {
      "get": {
        "description": "Returns an instance type detail.",
        "operationId": "instance_types_v1_get_by_id",
        "parameters": [
          {
            "description": "Instance Type Unique Id.",
            "in": "path",
            "name": "instance_type_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Instance Type Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceType"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "Instance Type detail.",
        "tags": [
          "instance_types"
        ]
      }
    },
    "/v1/instances": {
      "get": {
        "description": "Returns a list of database instances for a x-tenant-id.",
        "operationId": "instances_v1_get_all",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit_small"
          },
          {
            "$ref": "#/components/parameters/instance_status"
          },
          {
            "$ref": "#/components/parameters/instance_expand"
          },
          {
            "$ref": "#/components/parameters/engine_id_query"
          },
          {
            "$ref": "#/components/parameters/volume_size_query"
          },
          {
            "$ref": "#/components/parameters/volume_size_gt"
          },
          {
            "$ref": "#/components/parameters/volume_size_gte"
          },
          {
            "$ref": "#/components/parameters/volume_size_lt"
          },
          {
            "$ref": "#/components/parameters/volume_size_lte"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstancesResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "List all database instances.",
        "tags": [
          "instances"
        ]
      },
      "post": {
        "description": "Creates a new database instance asynchronously for a tenant.",
        "operationId": "instances_v1_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            },
            "description": "Accepted - Database instance creation in progress."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Creates a new database instance.",
        "tags": [
          "instances"
        ]
      }
    },
    "/v1/instances/{instance_id}": {
      "delete": {
        "description": "Deletes a database instance.",
        "operationId": "instances_v1_delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Accepted - Database instance deletion in progress."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Deletes a database instance.",
        "tags": [
          "instances"
        ]
      },
      "get": {
        "description": "Returns a database instance detail.",
        "operationId": "instances_v1_get_by_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          },
          {
            "$ref": "#/components/parameters/instance_expand"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "Database instance details.",
        "tags": [
          "instances"
        ]
      },
      "patch": {
        "description": "Updates a database instance.",
        "operationId": "instances_v1_patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DatabaseInstanceUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Database instance update.",
        "tags": [
          "instances"
        ]
      }
    },
    "/v1/instances/{instance_id}/resize": {
      "post": {
        "description": "Resizes a database instance.",
        "operationId": "instances_v1_resize",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceResizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Resizes a database instance.",
        "tags": [
          "instances"
        ]
      }
    },
    "/v1/instances/{instance_id}/snapshots": {
      "get": {
        "description": "List all snapshots.",
        "operationId": "instances_v1_snapshots_get_all",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit_medium"
          },
          {
            "$ref": "#/components/parameters/snapshot_type"
          },
          {
            "$ref": "#/components/parameters/snapshot_status"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotsResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "Snapshots List.",
        "tags": [
          "instances"
        ]
      },
      "post": {
        "description": "Creates a new snapshot asynchronously.",
        "operationId": "instances_v1_snapshots_post",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Snapshot Create.",
        "tags": [
          "instances"
        ]
      }
    },
    "/v1/instances/{instance_id}/snapshots/{snapshot_id}": {
      "delete": {
        "description": "Deletes a database snapshot.",
        "operationId": "instances_v1_snapshots_delete",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          },
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Delete Snapshot.",
        "tags": [
          "instances"
        ]
      },
      "get": {
        "description": "Get a snapshot detail.",
        "operationId": "instances_v1_snapshot_get_by_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          },
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "Snapshot Detail.",
        "tags": [
          "instances"
        ]
      },
      "patch": {
        "description": "Updates a snapshot.",
        "operationId": "instances_v1_snapshots_patch",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          },
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Snapshot Update.",
        "tags": [
          "instances"
        ]
      }
    },
    "/v1/instances/{instance_id}/snapshots/{snapshot_id}/restore": {
      "post": {
        "description": "Create a new instance from snapshot.",
        "operationId": "restore_instance_from_snapshot_v1__snapshot_id__post",
        "parameters": [
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreSnapshotRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            },
            "description": "Accepted - Snapshot restore instance in progress."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Create a new instance from snapshot asynchronously.",
        "tags": [
          "snapshots"
        ]
      }
    },
    "/v1/instances/{instance_id}/start": {
      "post": {
        "description": "Starts a database instance.",
        "operationId": "instances_v1_start",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Starts a database instance.",
        "tags": [
          "instances"
        ]
      }
    },
    "/v1/instances/{instance_id}/stop": {
      "post": {
        "description": "Stops a database instance.",
        "operationId": "instances_v1_stop",
        "parameters": [
          {
            "$ref": "#/components/parameters/instance_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Stops a database instance.",
        "tags": [
          "instances"
        ]
      }
    },
    "/v1/replicas": {
      "get": {
        "description": "List all replicas for a given instance.",
        "operationId": "replicas_v1_get_all",
        "parameters": [
          {
            "$ref": "#/components/parameters/source_id"
          },
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit_medium"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicasResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "Replicas List.",
        "tags": [
          "replicas"
        ]
      },
      "post": {
        "description": "Creates a new replica for an instance asynchronously.",
        "operationId": "replicas_v1_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplicaCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Replica Create.",
        "tags": [
          "replicas"
        ]
      }
    },
    "/v1/replicas/{replica_id}": {
      "delete": {
        "description": "Deletes a replica instance.",
        "operationId": "replicas_v1_delete",
        "parameters": [
          {
            "description": "Database Replica Unique Id",
            "in": "path",
            "name": "replica_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "title": "Database Replica Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted - Database replica deletion in progress."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Deletes a replica instance.",
        "tags": [
          "replicas"
        ]
      },
      "get": {
        "description": "Get an instance replica detail.",
        "operationId": "replicas_v1_get_by_id",
        "parameters": [
          {
            "$ref": "#/components/parameters/replica_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.read"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.read"
            ]
          }
        ],
        "summary": "Replica Detail.",
        "tags": [
          "replicas"
        ]
      }
    },
    "/v1/replicas/{replica_id}/resize": {
      "post": {
        "description": "Resize an instance replica.",
        "operationId": "replicas_v1_resize",
        "parameters": [
          {
            "$ref": "#/components/parameters/replica_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplicaResizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Replica Resize.",
        "tags": [
          "replicas"
        ]
      }
    },
    "/v1/replicas/{replica_id}/start": {
      "post": {
        "description": "Start an instance replica.",
        "operationId": "replicas_v1_start",
        "parameters": [
          {
            "$ref": "#/components/parameters/replica_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Replica Start.",
        "tags": [
          "replicas"
        ]
      }
    },
    "/v1/replicas/{replica_id}/stop": {
      "post": {
        "description": "Stop an instance replica.",
        "operationId": "replicas_v1_stop",
        "parameters": [
          {
            "$ref": "#/components/parameters/replica_id"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaDetailResponse"
                }
              }
            },
            "description": "Successful Response."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Replica Stop.",
        "tags": [
          "replicas"
        ]
      }
    },
    "/v1/snapshots/{snapshot_id}/restores": {
      "post": {
        "deprecated": true,
        "description": "Create a new instance from snapshot.",
        "operationId": "restores_instance_from_snapshot_v1__snapshot_id__post",
        "parameters": [
          {
            "$ref": "#/components/parameters/snapshot_id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreSnapshotRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            },
            "description": "Accepted - Snapshot restore instance in progress."
          },
          "400": {
            "$ref": "#/components/responses/RequiredField"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "bearerAuth": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2PreProd": [
              "dbaas.write"
            ]
          },
          {
            "OAuth2Prod": [
              "dbaas.write"
            ]
          }
        ],
        "summary": "Create a new instance from snapshot asynchronously.",
        "tags": [
          "snapshots"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://{env}/{region}/database",
      "variables": {
        "region": {
          "enum": [
            "br-ne1",
            "br-se1",
            "br-mgl1"
          ],
          "default": "br-se1",
          "description": "Region to reach the service",
          "x-mgc-transforms": [
            {
              "allowMissing": true,
              "translations": [
                {
                  "from": "br-mgl1",
                  "to": "br-se-1"
                }
              ],
              "type": "translate"
            }
          ]
        },
        "env": {
          "enum": [
            "api.magalu.cloud",
            "api.pre-prod.jaxyendy.com"
          ],
          "default": "api.magalu.cloud",
          "description": "Environment to use",
          "x-mgc-transforms": [
            {
              "translations": [
                {
                  "from": "prod",
                  "to": "api.magalu.cloud"
                },
                {
                  "from": "pre-prod",
                  "to": "api.pre-prod.jaxyendy.com"
                }
              ],
              "type": "translate"
            }
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Engines available for database instances.",
      "name": "engines"
    },
    {
      "description": "Instance Types available for database instances.",
      "name": "instance_types"
    },
    {
      "description": "Database instances management.",
      "name": "instances"
    },
    {
      "description": "Database replicas management.",
      "name": "replicas"
    },
    {
      "description": "Snapshots management.",
      "name": "snapshots"
    }
  ]
}