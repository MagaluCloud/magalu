{
  "components": {
    "responses": {
      "BadRequestError": {
        "content": {
          "application/json": {
            "example": {
              "detail": {},
              "message": "invalid param",
              "slug": "bad_request"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Bad Request"
      },
      "ConflictError": {
        "content": {
          "application/json": {
            "example": {
              "detail": {},
              "message": "resource already exists",
              "slug": "conflict"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Conflict"
      },
      "ForbiddenError": {
        "content": {
          "application/json": {
            "example": {
              "detail": {},
              "message": "user not allowed",
              "slug": "forbidden"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Forbidden"
      },
      "InternalServerError": {
        "content": {
          "application/json": {
            "example": {
              "detail": {},
              "message": "error when getting resource: timeout",
              "slug": "internal_server_error"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Internal Server Error"
      },
      "NotFoundError": {
        "content": {
          "application/json": {
            "example": {
              "detail": {},
              "message": "error when getting resource: not found",
              "slug": "not_found"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Not Found"
      },
      "TooManyRequestsError": {
        "content": {
          "application/json": {
            "example": {
              "detail": {},
              "message": "too many requests",
              "slug": "too_many_requests"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Too Many Requests"
      },
      "UnauthorizedError": {
        "content": {
          "application/json": {
            "example": {
              "detail": {},
              "message": "invalid email on token",
              "slug": "unauthorized"
            },
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        },
        "description": "Unauthorized"
      }
    },
    "schemas": {
      "AmountRepositoryResponse": {
        "description": "User's repositories quantity.",
        "example": {
          "total": 1
        },
        "properties": {
          "total": {
            "description": "Total number of repositories for a user.",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "CreateRegistryResponse": {
        "description": "Container Registry's creation response.",
        "example": {
          "id": "0c6bbd87-881a-4bf8-b3f6-4ff3ceacb42c",
          "name": "cool_registry"
        },
        "properties": {
          "id": {
            "description": "Container Registry's UUID.",
            "type": "string"
          },
          "name": {
            "description": "A unique, global name for the container registry. It must be written in lowercase letters and consists only of numbers and letters, up to a limit of 63 characters.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "type": "object"
      },
      "CredentialsResponse": {
        "description": "User's credentials for authentication to the container registry.",
        "example": {
          "email": "janedoe@email.com",
          "password": "62kWa168QL!d4IVwN6wTfTYFv63=Sc1D",
          "username": "e3d49354-35d7-4565-b634-65d8b86aa594"
        },
        "properties": {
          "email": {
            "description": "Email for authentication to the container registry.",
            "type": "string"
          },
          "password": {
            "description": "Password for authentication to the container registry.",
            "type": "string"
          },
          "username": {
            "description": "Username for authentication to the container registry.",
            "type": "string"
          }
        },
        "required": [
          "username",
          "password",
          "email"
        ],
        "type": "object"
      },
      "Error": {
        "description": "Details regarding an error.",
        "properties": {
          "detail": {
            "description": "Details about the error.",
            "type": "object"
          },
          "message": {
            "description": "Detailed message with information about the error.",
            "type": "string"
          },
          "slug": {
            "description": "Identifier corresponding to the error type.",
            "type": "string"
          }
        },
        "required": [
          "slug",
          "message"
        ],
        "type": "object"
      },
      "ImageResponse": {
        "description": "Repository image response data.",
        "example": {
          "digest": "sha256:aef9ff594b36575be6248901a4e5a9bad031f3e0fd42c33a6d2bd501dde5e955",
          "extra_attr": {},
          "manifest_media_type": "application/vnd.docker.distribution.manifest.v2+json",
          "media_type": "application/vnd.docker.container.image.v1+json",
          "pulled_at": "2024-05-15T19:56:47Z",
          "pushed_at": "2024-05-15T19:56:47Z",
          "size_bytes": 3552429,
          "tags": [
            "latest"
          ],
          "tags_details": [
            {
              "name": "latest",
              "pulled_at": "2024-05-15T19:56:47Z",
              "pushed_at": "2024-05-15T19:56:47Z",
              "signed": false
            }
          ]
        },
        "properties": {
          "digest": {
            "description": "Image digest.",
            "type": "string"
          },
          "extra_attr": {
            "description": "Extra attributes about the image.",
            "type": "object"
          },
          "manifest_media_type": {
            "description": "The manifest media type of the image.",
            "type": "string"
          },
          "media_type": {
            "description": "The media type of the image.",
            "type": "string"
          },
          "pulled_at": {
            "description": "Date and time when the image was pulled.",
            "type": "string"
          },
          "pushed_at": {
            "description": "Date and time when the image was pushed.",
            "type": "string"
          },
          "size_bytes": {
            "description": "Image size in bytes.",
            "type": "integer"
          },
          "tags": {
            "description": "Tags of the image.",
            "items": {
              "description": "Tag names.",
              "type": "string"
            },
            "type": "array"
          },
          "tags_details": {
            "description": "Tags details of the image",
            "items": {
              "$ref": "#/components/schemas/ImageTagResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "digest",
          "size_bytes",
          "pushed_at",
          "pulled_at",
          "tags"
        ],
        "type": "object"
      },
      "ImageTagResponse": {
        "description": "Tag of an image response.",
        "example": {
          "name": "latest",
          "pulled_at": "2024-05-15T19:56:47Z",
          "pushed_at": "2024-05-15T19:56:47Z",
          "signed": false
        },
        "properties": {
          "name": {
            "description": "Tag name.",
            "type": "string"
          },
          "pulled_at": {
            "description": "Date and time when the tag was pulled.",
            "type": "string"
          },
          "pushed_at": {
            "description": "Date and time when the tag was pushed.",
            "type": "string"
          },
          "signed": {
            "description": "Boolean value indicating if the image is signed or not.",
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "ImagesResponse": {
        "description": "Repository images response.",
        "properties": {
          "results": {
            "description": "List of repository images.",
            "items": {
              "$ref": "#/components/schemas/ImageResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "RegistriesResponse": {
        "description": "Container registry information response object.",
        "properties": {
          "results": {
            "description": "List of user registries.",
            "items": {
              "$ref": "#/components/schemas/RegistryResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "RegistryRequest": {
        "description": "Container Registry Request Object.",
        "example": {
          "name": "cool_registry"
        },
        "properties": {
          "name": {
            "description": "A unique, global name for the container registry. It must be written in lowercase letters and consists only of numbers and letters, up to a limit of 63 characters.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "RegistryResponse": {
        "description": "Container Registry's response data.",
        "example": {
          "created_at": "2024-05-15T19:56:47Z",
          "id": "0c6bbd87-881a-4bf8-b3f6-4ff3ceacb42c",
          "name": "cool_registry",
          "storage_usage_bytes": 12345,
          "updated_at": "2024-05-15T19:56:47Z"
        },
        "properties": {
          "created_at": {
            "description": "Date and time of creation of the container registry.",
            "type": "string"
          },
          "id": {
            "description": "Container Registry's UUID.",
            "type": "string"
          },
          "name": {
            "description": "Name of the container registry created.",
            "type": "string"
          },
          "storage_usage_bytes": {
            "description": "Storage used in bytes.",
            "type": "integer"
          },
          "updated_at": {
            "description": "Date and time of the last change to the container registry.",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "storage_usage_bytes",
          "created_at",
          "updated_at"
        ],
        "type": "object"
      },
      "RepositoriesResponse": {
        "description": "Information returned about the container registry repository.",
        "properties": {
          "goal": {
            "$ref": "#/components/schemas/AmountRepositoryResponse"
          },
          "results": {
            "description": "Information about the container registry repositories.",
            "items": {
              "$ref": "#/components/schemas/RepositoryResponse"
            },
            "type": "array"
          }
        },
        "required": [
          "results"
        ],
        "type": "object"
      },
      "RepositoryResponse": {
        "description": "Information about the repository.",
        "example": {
          "created_at": "2024-05-15T19:56:47Z",
          "image_count": 2,
          "name": "alpine",
          "registry_name": "cool_registry",
          "updated_at": "2024-05-15T19:56:47Z"
        },
        "properties": {
          "created_at": {
            "description": "Date and time of creation of the repository.",
            "type": "string"
          },
          "image_count": {
            "description": "Number of images in the repository.",
            "type": "integer"
          },
          "name": {
            "description": "Name of the repository.",
            "type": "string"
          },
          "registry_name": {
            "description": "Name of the container registry.",
            "type": "string"
          },
          "updated_at": {
            "description": "Date and time of the last change to the repository.",
            "type": "string"
          }
        },
        "required": [
          "registry_name",
          "name",
          "image_count",
          "created_at",
          "updated_at"
        ],
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http"
      },
      "OAuth2": {
        "description": "OAuth2 via IDPA",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/auth",
            "scopes": {
              "mcr.read": "Read IaaS resource information",
              "mcr.write": "Write IaaS resource information"
            },
            "tokenUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "email": "suporte@jaxyendy.com",
      "name": "Tribo IAAS Cloud",
      "url": "https://github.com/luizalabs"
    },
    "description": "Magalu Container Registry product API.",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "title": "mcr-api-product",
    "version": "0.1.0"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v0/credentials": {
      "get": {
        "description": "Return container registry user's authentication credentials.",
        "operationId": "getCredentials",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.read"
            ]
          },
          {
            "OAuth2": [
              "mcr.read"
            ]
          }
        ],
        "summary": "Get credentials for container registry",
        "tags": [
          "credentials"
        ]
      }
    },
    "/v0/credentials/password": {
      "post": {
        "description": "Reset container registry user's password.",
        "operationId": "resetPassword",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialsResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.write"
            ]
          },
          {
            "OAuth2": [
              "mcr.write"
            ]
          }
        ],
        "summary": "Reset password",
        "tags": [
          "credentials"
        ]
      }
    },
    "/v0/registries": {
      "get": {
        "description": "List user's container registries.",
        "operationId": "getRegistries",
        "parameters": [
          {
            "description": "Limit",
            "in": "query",
            "name": "_limit",
            "required": false,
            "schema": {
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "Offset",
            "in": "query",
            "name": "_offset",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Fields to use as reference to sort.",
            "in": "query",
            "name": "_sort",
            "required": false,
            "schema": {
              "default": "created_at:asc",
              "pattern": "(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistriesResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.read"
            ]
          },
          {
            "OAuth2": [
              "mcr.read"
            ]
          }
        ],
        "summary": "List all container registries",
        "tags": [
          "registries"
        ]
      },
      "post": {
        "description": "Creates a container registry in Magalu Cloud.",
        "operationId": "createRegistry",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistryRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateRegistryResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.write"
            ]
          },
          {
            "OAuth2": [
              "mcr.write"
            ]
          }
        ],
        "summary": "Create a container registry",
        "tags": [
          "registries"
        ]
      }
    },
    "/v0/registries/{registry_id}": {
      "delete": {
        "description": "Delete a container registry by uuid.",
        "operationId": "deleteRegistry",
        "parameters": [
          {
            "description": "Container Registry's UUID.",
            "in": "path",
            "name": "registry_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.write"
            ]
          },
          {
            "OAuth2": [
              "mcr.write"
            ]
          }
        ],
        "summary": "Delete a container registry by registry_id",
        "tags": [
          "registries"
        ]
      },
      "get": {
        "description": "Show detailed information about the user's container registry.",
        "operationId": "getRegistry",
        "parameters": [
          {
            "description": "Container Registry's UUID.",
            "in": "path",
            "name": "registry_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistryResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.read"
            ]
          },
          {
            "OAuth2": [
              "mcr.read"
            ]
          }
        ],
        "summary": "Get registry information",
        "tags": [
          "registries"
        ]
      }
    },
    "/v0/registries/{registry_id}/repositories": {
      "get": {
        "description": "List all user's repositories in the container registry.",
        "operationId": "getRepositories",
        "parameters": [
          {
            "description": "Container Registry's UUID.",
            "in": "path",
            "name": "registry_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Limit",
            "in": "query",
            "name": "_limit",
            "required": false,
            "schema": {
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "Offset",
            "in": "query",
            "name": "_offset",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Fields to use as reference to sort.",
            "in": "query",
            "name": "_sort",
            "required": false,
            "schema": {
              "default": "created_at:desc",
              "pattern": "(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoriesResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.read"
            ]
          },
          {
            "OAuth2": [
              "mcr.read"
            ]
          }
        ],
        "summary": "List all container registry repositories",
        "tags": [
          "repositories"
        ]
      }
    },
    "/v0/registries/{registry_id}/repositories/{repository_name}": {
      "delete": {
        "description": "Delete a repository by name.",
        "operationId": "deleteRepository",
        "parameters": [
          {
            "description": "Container Registry's UUID.",
            "in": "path",
            "name": "registry_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Repository's name.",
            "in": "path",
            "name": "repository_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.write"
            ]
          },
          {
            "OAuth2": [
              "mcr.write"
            ]
          }
        ],
        "summary": "Delete a container registry repository by repository_name.",
        "tags": [
          "repositories"
        ]
      },
      "get": {
        "description": "Return detailed repository's information filtered by name.",
        "operationId": "getRepository",
        "parameters": [
          {
            "description": "Container Registry's UUID.",
            "in": "path",
            "name": "registry_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Repository's name.",
            "in": "path",
            "name": "repository_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.read"
            ]
          },
          {
            "OAuth2": [
              "mcr.read"
            ]
          }
        ],
        "summary": "Get a container registry repository by repository_name",
        "tags": [
          "repositories"
        ]
      }
    },
    "/v0/registries/{registry_id}/repositories/{repository_name}/images": {
      "get": {
        "description": "List all images in container registry repository",
        "operationId": "getImages",
        "parameters": [
          {
            "description": "Container Registry's UUID.",
            "in": "path",
            "name": "registry_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Repository's name.",
            "in": "path",
            "name": "repository_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Limit",
            "in": "query",
            "name": "_limit",
            "required": false,
            "schema": {
              "minimum": 1,
              "title": "Limit",
              "type": "integer"
            }
          },
          {
            "description": "Offset",
            "in": "query",
            "name": "_offset",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer"
            }
          },
          {
            "description": "Fields to use as reference to sort.",
            "in": "query",
            "name": "_sort",
            "required": false,
            "schema": {
              "default": "pushed_at:desc",
              "pattern": "(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "type": "string"
            }
          },
          {
            "description": "You can get more detailed info about: ['tags_details', 'extra_attr', 'manifest_media_type', 'media_type']",
            "in": "query",
            "name": "expand",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImagesResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.read"
            ]
          },
          {
            "OAuth2": [
              "mcr.read"
            ]
          }
        ],
        "summary": "List images in container registry repository",
        "tags": [
          "images"
        ]
      }
    },
    "/v0/registries/{registry_id}/repositories/{repository_name}/images/{digest_or_tag}": {
      "delete": {
        "description": "Delete repository image by digest or tag",
        "operationId": "deleteImage",
        "parameters": [
          {
            "description": "Container Registry's UUID.",
            "in": "path",
            "name": "registry_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Repository's name.",
            "in": "path",
            "name": "repository_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Digest or tag of an image",
            "in": "path",
            "name": "digest_or_tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.write",
              "mcr.read"
            ]
          },
          {
            "OAuth2": [
              "mcr.write",
              "mcr.read"
            ]
          }
        ],
        "summary": "Delete image by digest or tag",
        "tags": [
          "images"
        ]
      },
      "get": {
        "description": "Show detailed information about the image.",
        "operationId": "getImage",
        "parameters": [
          {
            "description": "Container Registry's UUID.",
            "in": "path",
            "name": "registry_id",
            "required": true,
            "schema": {
              "format": "uuid",
              "type": "string"
            }
          },
          {
            "description": "Repository's name.",
            "in": "path",
            "name": "repository_name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Digest or tag of an image.",
            "in": "path",
            "name": "digest_or_tag",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImageResponse"
                }
              }
            },
            "description": "Successful operation"
          },
          "400": {
            "$ref": "#/components/responses/BadRequestError"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "403": {
            "$ref": "#/components/responses/ForbiddenError"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundError"
          },
          "429": {
            "$ref": "#/components/responses/TooManyRequestsError"
          },
          "500": {
            "$ref": "#/components/responses/InternalServerError"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mcr.read"
            ]
          },
          {
            "OAuth2": [
              "mcr.read"
            ]
          }
        ],
        "summary": "Get image details",
        "tags": [
          "images"
        ]
      }
    }
  },
  "servers": [
    {
      "url": "https://{env}/{region}/container-registry",
      "variables": {
        "region": {
          "enum": [
            "br-ne1",
            "br-se1",
            "br-mgl1"
          ],
          "default": "br-se1",
          "description": "Region to reach the service",
          "x-mgc-transforms": [
            {
              "allowMissing": true,
              "translations": [
                {
                  "from": "br-mgl1",
                  "to": "br-se-1"
                }
              ],
              "type": "translate"
            }
          ]
        },
        "env": {
          "enum": [
            "api.magalu.cloud",
            "api.pre-prod.jaxyendy.com"
          ],
          "default": "api.magalu.cloud",
          "description": "Environment to use",
          "x-mgc-transforms": [
            {
              "translations": [
                {
                  "from": "prod",
                  "to": "api.magalu.cloud"
                },
                {
                  "from": "pre-prod",
                  "to": "api.pre-prod.jaxyendy.com"
                }
              ],
              "type": "translate"
            }
          ]
        }
      }
    }
  ],
  "tags": [
    {
      "description": "Routes related to credentials to login to Docker.",
      "name": "credentials"
    },
    {
      "description": "Routes related to creation, listing and deletion of registries.",
      "name": "registries"
    },
    {
      "description": "Routes related to listing and deletion of repositories.",
      "name": "repositories"
    },
    {
      "description": "Routes related to listing and deletion of images.",
      "name": "images"
    }
  ]
}