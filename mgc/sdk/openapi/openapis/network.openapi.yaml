{
  "components": {
    "schemas": {
      "BookCidrRequest": {
        "example": [
          {
            "cidr": "172.26.0.0/16"
          }
        ],
        "properties": {
          "cidr": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Cidr"
          },
          "mask": {
            "anyOf": [
              {
                "type": "integer"
              },
              {}
            ],
            "title": "Mask"
          }
        },
        "title": "BookCidrRequest",
        "type": "object"
      },
      "BookCidrResponse": {
        "example": {
          "cidr": "172.26.0.0/16"
        },
        "properties": {
          "cidr": {
            "default": "172.26.0.0/16",
            "description": "The CIDR notation for the subnet pool.",
            "title": "Cidr",
            "type": "string"
          }
        },
        "title": "BookCidrResponse",
        "type": "object"
      },
      "DhcpPoolStr": {
        "properties": {
          "end": {
            "title": "End",
            "type": "string"
          },
          "start": {
            "title": "Start",
            "type": "string"
          }
        },
        "required": [
          "start",
          "end"
        ],
        "title": "DhcpPoolStr",
        "type": "object"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail",
            "type": "array"
          }
        },
        "title": "HTTPValidationError",
        "type": "object"
      },
      "IpAddress": {
        "example": {
          "ethertype": "IPv4",
          "ip_address": "172.20.0.2",
          "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "ethertype": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Ethertype"
          },
          "ip_address": {
            "title": "Ip Address",
            "type": "string"
          },
          "subnet_id": {
            "title": "Subnet Id",
            "type": "string"
          }
        },
        "required": [
          "ip_address",
          "subnet_id"
        ],
        "title": "IpAddress",
        "type": "object"
      },
      "LinkModel": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Next"
          },
          "previous": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Previous"
          },
          "self": {
            "title": "Self",
            "type": "string"
          }
        },
        "required": [
          "previous",
          "next",
          "self"
        ],
        "title": "LinkModel",
        "type": "object"
      },
      "Meta": {
        "properties": {
          "links": {
            "$ref": "#/components/schemas/MetaLinks"
          },
          "page": {
            "$ref": "#/components/schemas/MetaPageInfo"
          }
        },
        "required": [
          "page",
          "links"
        ],
        "title": "Meta",
        "type": "object"
      },
      "MetaLinks": {
        "properties": {
          "next": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Next"
          },
          "previous": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Previous"
          },
          "self": {
            "title": "Self",
            "type": "string"
          }
        },
        "required": [
          "self"
        ],
        "title": "MetaLinks",
        "type": "object"
      },
      "MetaModel": {
        "properties": {
          "links": {
            "$ref": "#/components/schemas/LinkModel"
          },
          "page": {
            "$ref": "#/components/schemas/PageModel"
          }
        },
        "required": [
          "page",
          "links"
        ],
        "title": "MetaModel",
        "type": "object"
      },
      "MetaPageInfo": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "limit": {
            "title": "Limit",
            "type": "integer"
          },
          "max_items_per_page": {
            "title": "Max Items Per Page",
            "type": "integer"
          },
          "offset": {
            "title": "Offset",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "limit",
          "offset",
          "count",
          "total",
          "max_items_per_page"
        ],
        "title": "MetaPageInfo",
        "type": "object"
      },
      "NatGatewayCreatePayload": {
        "example": {
          "description": "Description",
          "name": "NatGateway Name",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "a"
        },
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "vpc_id": {
            "title": "Vpc Id",
            "type": "string"
          },
          "zone": {
            "title": "Zone",
            "type": "string"
          }
        },
        "required": [
          "name",
          "zone",
          "vpc_id"
        ],
        "title": "NatGatewayCreatePayload",
        "type": "object"
      },
      "NatGatewayCreateResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status": "pending"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        },
        "required": [
          "id",
          "status"
        ],
        "title": "NatGatewayCreateResponse",
        "type": "object"
      },
      "NatGatewayDetailsResponse": {
        "example": {
          "created_at": "YYYY-MM-DD HH:mm:SS",
          "description": "NatGateway description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "NatGateway Name",
          "nat_gateway_ip": "127.0.0.1",
          "status": "created",
          "updated": "YYYY-MM-DD HH:mm:SS",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "zone"
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "nat_gateway_ip": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Nat Gateway Ip"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          },
          "updated": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Updated"
          },
          "vpc_id": {
            "title": "Vpc Id",
            "type": "string"
          },
          "zone": {
            "title": "Zone",
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "vpc_id",
          "zone",
          "status"
        ],
        "title": "NatGatewayDetailsResponse",
        "type": "object"
      },
      "NatGatewayListResponse": {
        "example": {
          "meta": {
            "links": {
              "next": "?_offset=30\u0026_limit=10",
              "previous": "?_offset=10\u0026_limit=10",
              "self": "?_offset=20\u0026_limit=10"
            },
            "page": {
              "count": 10,
              "limit": 10,
              "max_items_per_page": 100,
              "offset": 20,
              "total": 112
            }
          },
          "result": [
            {
              "created_at": "YYYY-MM-DD HH:mm:SS",
              "description": "NatGateway description",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "name": "NatGateway Name",
              "nat_gateway_ip": "127.0.0.1",
              "status": "created",
              "updated": "YYYY-MM-DD HH:mm:SS",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "zone": "zone"
            }
          ]
        },
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/Meta"
          },
          "result": {
            "items": {
              "$ref": "#/components/schemas/NatGatewayDetailsResponse"
            },
            "title": "Result",
            "type": "array"
          }
        },
        "required": [
          "meta",
          "result"
        ],
        "title": "NatGatewayListResponse",
        "type": "object"
      },
      "PageModel": {
        "properties": {
          "count": {
            "title": "Count",
            "type": "integer"
          },
          "limit": {
            "default": 10,
            "title": "Limit",
            "type": "integer"
          },
          "offset": {
            "default": 0,
            "title": "Offset",
            "type": "integer"
          },
          "total": {
            "title": "Total",
            "type": "integer"
          }
        },
        "required": [
          "count",
          "total"
        ],
        "title": "PageModel",
        "type": "object"
      },
      "PortCreateRequest": {
        "example": {
          "has_pip": true,
          "has_sg": true,
          "name": "port_name",
          "security_groups_id": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "subnets": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ]
        },
        "properties": {
          "has_pip": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {}
            ],
            "default": true,
            "title": "Has Pip"
          },
          "has_sg": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {}
            ],
            "default": true,
            "title": "Has Sg"
          },
          "name": {
            "maxLength": 100,
            "minLength": 5,
            "title": "Name",
            "type": "string"
          },
          "security_groups_id": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {}
            ],
            "default": [],
            "title": "Security Groups Id"
          },
          "subnets": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Subnets",
            "type": "array"
          }
        },
        "required": [
          "name"
        ],
        "title": "PortCreateRequest",
        "type": "object"
      },
      "PortCreateResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "PortCreateResponse",
        "type": "object"
      },
      "PortResponse": {
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "port description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_address": [
            {
              "ip_address": "172.20.0.2",
              "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ],
          "is_admin_state_up": true,
          "is_port_security_enabled": true,
          "name": "port_name",
          "public_ip": [
            {
              "public_ip": "100.94.5.31",
              "public_ip_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ],
          "security_groups": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Id"
          },
          "ip_address": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/IpAddress"
            },
            "title": "Ip Address",
            "type": "array"
          },
          "is_admin_state_up": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {}
            ],
            "title": "Is Admin State Up"
          },
          "is_port_security_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {}
            ],
            "title": "Is Port Security Enabled"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Name"
          },
          "public_ip": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/PublicIpResponsePort"
                },
                "type": "array"
              },
              {}
            ],
            "default": [],
            "title": "Public Ip"
          },
          "security_groups": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Security Groups",
            "type": "array"
          },
          "updated": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Updated"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Vpc Id"
          }
        },
        "title": "PortResponse",
        "type": "object"
      },
      "PortSimpleResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_address": [
            {
              "ip_address": "172.20.0.2",
              "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        },
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Id"
          },
          "ip_address": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/IpAddress"
            },
            "title": "Ip Address",
            "type": "array"
          }
        },
        "title": "PortSimpleResponse",
        "type": "object"
      },
      "PortsList": {
        "example": {
          "ports": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "port description",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "ip_address": [
                {
                  "ip_address": "172.20.0.2",
                  "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              ],
              "is_admin_state_up": true,
              "is_port_security_enabled": true,
              "name": "port_name",
              "public_ip": [
                {
                  "public_ip": "100.94.5.31",
                  "public_ip_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              ],
              "security_groups": [
                "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              ],
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        },
        "properties": {
          "ports": {
            "items": {
              "$ref": "#/components/schemas/PortResponse"
            },
            "title": "Ports",
            "type": "array"
          }
        },
        "required": [
          "ports"
        ],
        "title": "PortsList",
        "type": "object"
      },
      "PortsListSimplified": {
        "example": {
          "ports_simplified": [
            {
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "ip_address": [
                {
                  "ip_address": "172.20.0.2",
                  "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              ]
            }
          ]
        },
        "properties": {
          "ports_simplified": {
            "items": {
              "$ref": "#/components/schemas/PortSimpleResponse"
            },
            "title": "Ports Simplified",
            "type": "array"
          }
        },
        "required": [
          "ports_simplified"
        ],
        "title": "PortsListSimplified",
        "type": "object"
      },
      "PublicIpCreateRequest": {
        "example": {
          "description": "public_ip_description"
        },
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "default": "",
            "title": "Description"
          }
        },
        "title": "PublicIpCreateRequest",
        "type": "object"
      },
      "PublicIpCreateResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "PublicIpCreateResponse",
        "type": "object"
      },
      "PublicIpDb": {
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "port description",
          "error": "error",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "port_ip": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "project_type": "project_type",
          "public_ip": "100.94.5.31",
          "status": "created",
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Error"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "External Id"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Id"
          },
          "port_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Port Id"
          },
          "project_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Project Type"
          },
          "public_ip": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Public Ip"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Status"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Tenant Id"
          },
          "updated": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Updated"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Vpc Id"
          }
        },
        "title": "PublicIpDb",
        "type": "object"
      },
      "PublicIpResponsePort": {
        "example": {
          "public_ip": "100.94.5.31",
          "public_ip_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "public_ip": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Public Ip"
          },
          "public_ip_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Public Ip Id"
          }
        },
        "title": "PublicIpResponsePort",
        "type": "object"
      },
      "PublicIpsList": {
        "example": {
          "public_ips": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "port description",
              "error": "error",
              "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "port_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "public_ip": "100.94.5.31",
              "status": "created",
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        },
        "properties": {
          "public_ips": {
            "items": {
              "$ref": "#/components/schemas/PublicIpDb"
            },
            "title": "Public Ips",
            "type": "array"
          }
        },
        "required": [
          "public_ips"
        ],
        "title": "PublicIpsList",
        "type": "object"
      },
      "RuleCreateRequest": {
        "example": {
          "description": "Some rule description",
          "direction": "egress",
          "ethertype": "IPv4",
          "port_range_max": 8028,
          "port_range_min": 8028,
          "protocol": "tcp",
          "remote_ip_prefix": "100.94.0.0/24"
        },
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "description": "Description of the security group rule",
            "title": "Description"
          },
          "direction": {
            "description": "Direction of the rule, either ingress or egress",
            "title": "Direction",
            "type": "string"
          },
          "ethertype": {
            "description": "Ethertype of the rule, either IPv4 or IPv6",
            "title": "Ethertype",
            "type": "string"
          },
          "port_range_max": {
            "anyOf": [
              {
                "type": "integer"
              },
              {}
            ],
            "title": "Port Range Max"
          },
          "port_range_min": {
            "anyOf": [
              {
                "type": "integer"
              },
              {}
            ],
            "title": "Port Range Min"
          },
          "protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Protocol"
          },
          "remote_ip_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Remote Ip Prefix"
          }
        },
        "required": [
          "direction",
          "ethertype"
        ],
        "title": "RuleCreateRequest",
        "type": "object"
      },
      "RuleCreateResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "RuleCreateResponse",
        "type": "object"
      },
      "RuleResponse": {
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "Some rule description",
          "direction": "egress",
          "ethertype": "IPv4",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "port_range_max": 8028,
          "port_range_min": 8028,
          "protocol": "tcp",
          "remote_ip_prefix": "100.94.0.0/24",
          "security_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status": "created"
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "direction": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Direction"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Error"
          },
          "ethertype": {
            "title": "Ethertype",
            "type": "string"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "External Id"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Id"
          },
          "port_range_max": {
            "anyOf": [
              {
                "type": "integer"
              },
              {}
            ],
            "title": "Port Range Max"
          },
          "port_range_min": {
            "anyOf": [
              {
                "type": "integer"
              },
              {}
            ],
            "title": "Port Range Min"
          },
          "protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Protocol"
          },
          "remote_ip_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Remote Ip Prefix"
          },
          "security_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Security Group Id"
          },
          "status": {
            "$ref": "#/components/schemas/RuleStatus"
          }
        },
        "required": [
          "ethertype",
          "status"
        ],
        "title": "RuleResponse",
        "type": "object"
      },
      "RuleResponseEvent": {
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "direction": "egress",
          "error": "null",
          "ethertype": "IPv4",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "port_range_max": 8028,
          "port_range_min": 8028,
          "protocol": "tcp",
          "remote_ip_prefix": "100.94.0.0/24",
          "security_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status": "created"
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "direction": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Direction"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Error"
          },
          "ethertype": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Ethertype"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Id"
          },
          "port_range_max": {
            "anyOf": [
              {
                "type": "integer"
              },
              {}
            ],
            "title": "Port Range Max"
          },
          "port_range_min": {
            "anyOf": [
              {
                "type": "integer"
              },
              {}
            ],
            "title": "Port Range Min"
          },
          "protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Protocol"
          },
          "remote_ip_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Remote Ip Prefix"
          },
          "security_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Security Group Id"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleStatus"
              },
              {}
            ]
          }
        },
        "title": "RuleResponseEvent",
        "type": "object"
      },
      "RuleStatus": {
        "enum": [
          "created",
          "pending",
          "error"
        ],
        "title": "RuleStatus",
        "type": "string"
      },
      "RulesList": {
        "example": {
          "rules": [
            {
              "created_at": "2022-01-01 00:00:00",
              "direction": "egress",
              "ethertype": "IPv4",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "port_range_max": 8028,
              "port_range_min": 8028,
              "protocol": "tcp",
              "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "remote_ip_prefix": "100.94.0.0/24",
              "security_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "status": "created"
            }
          ]
        },
        "properties": {
          "rules": {
            "items": {
              "$ref": "#/components/schemas/RuleResponse"
            },
            "title": "Rules",
            "type": "array"
          }
        },
        "required": [
          "rules"
        ],
        "title": "RulesList",
        "type": "object"
      },
      "SecurityGroupCreateRequest": {
        "example": {
          "description": "security group description",
          "name": "security_group_name"
        },
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "default": "",
            "title": "Description"
          },
          "name": {
            "anyOf": [
              {
                "maxLength": 100,
                "minLength": 5,
                "type": "string"
              },
              {}
            ],
            "title": "Name"
          }
        },
        "required": [
          "name"
        ],
        "title": "SecurityGroupCreateRequest",
        "type": "object"
      },
      "SecurityGroupCreateResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "SecurityGroupCreateResponse",
        "type": "object"
      },
      "SecurityGroupDetailEvent": {
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "security group description",
          "error": "null",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "security_group_name",
          "ports": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "project_type": "default",
          "rules": [
            {
              "created_at": "2022-01-01 00:00:00",
              "direction": "egress",
              "error": "null",
              "ethertype": "IPv4",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "port_range_max": 8028,
              "port_range_min": 8028,
              "protocol": "tcp",
              "remote_ip_prefix": "100.94.0.0/24",
              "security_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "status": "created"
            }
          ],
          "status": "created",
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Error"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "External Id"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Id"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {}
            ],
            "title": "Is Default"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Name"
          },
          "ports": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Ports",
            "type": "array"
          },
          "project_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Project Type"
          },
          "rules": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/RuleResponseEvent"
                },
                "type": "array"
              },
              {}
            ],
            "default": [],
            "title": "Rules"
          },
          "status": {
            "$ref": "#/components/schemas/SecurityGroupStatus"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Tenant Id"
          },
          "updated": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Updated"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Vpc Id"
          }
        },
        "required": [
          "status"
        ],
        "title": "SecurityGroupDetailEvent",
        "type": "object"
      },
      "SecurityGroupListEvent": {
        "example": {
          "security_groups": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "security group description",
              "error": "null",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "is_default": true,
              "name": "security_group_name",
              "project_type": "default",
              "status": "created",
              "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        },
        "properties": {
          "security_groups": {
            "items": {
              "$ref": "#/components/schemas/SecurityGroupResponseEvent"
            },
            "title": "Security Groups",
            "type": "array"
          }
        },
        "required": [
          "security_groups"
        ],
        "title": "SecurityGroupListEvent",
        "type": "object"
      },
      "SecurityGroupResponseEvent": {
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "security group description",
          "error": "null",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "security_group_name",
          "project_type": "default",
          "status": "created",
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Error"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Id"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {}
            ],
            "title": "Is Default"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Name"
          },
          "project_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Project Type"
          },
          "status": {
            "$ref": "#/components/schemas/SecurityGroupStatus"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Tenant Id"
          },
          "updated": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Updated"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Vpc Id"
          }
        },
        "required": [
          "status"
        ],
        "title": "SecurityGroupResponseEvent",
        "type": "object"
      },
      "SecurityGroupStatus": {
        "enum": [
          "created",
          "pending",
          "error"
        ],
        "title": "SecurityGroupStatus",
        "type": "string"
      },
      "Status": {
        "enum": [
          "pending",
          "processing",
          "created",
          "error",
          "deleting"
        ],
        "title": "Status",
        "type": "string"
      },
      "StatusCode400BadRequest": {
        "properties": {
          "details": {
            "items": {
              "type": "object"
            },
            "title": "Details",
            "type": "array"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "slug": {
            "default": "Bad Request",
            "title": "Slug",
            "type": "string"
          }
        },
        "required": [
          "message",
          "details"
        ],
        "title": "StatusCode400BadRequest",
        "type": "object"
      },
      "StatusCode409Conflict": {
        "properties": {
          "details": {
            "items": {
              "type": "object"
            },
            "title": "Details",
            "type": "array"
          },
          "message": {
            "title": "Message",
            "type": "string"
          },
          "slug": {
            "default": "Conflict",
            "title": "Slug",
            "type": "string"
          }
        },
        "required": [
          "message",
          "details"
        ],
        "title": "StatusCode409Conflict",
        "type": "object"
      },
      "StatusCode500InternalServerError": {
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          },
          "slug": {
            "default": "Internal Server Error",
            "title": "Slug",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "title": "StatusCode500InternalServerError",
        "type": "object"
      },
      "StatusCode504GatewayTimeout": {
        "properties": {
          "message": {
            "title": "Message",
            "type": "string"
          },
          "slug": {
            "default": "Gateway Timeout",
            "title": "Slug",
            "type": "string"
          }
        },
        "required": [
          "message"
        ],
        "title": "StatusCode504GatewayTimeout",
        "type": "object"
      },
      "SubnetCreateRequest": {
        "properties": {
          "cidr_block": {
            "title": "Cidr Block",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "dns_nameservers": {
            "default": [],
            "items": {
              "format": "ipvanyaddress",
              "type": "string"
            },
            "title": "Dns Nameservers",
            "type": "array"
          },
          "ip_version": {
            "title": "Ip Version",
            "type": "integer"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "subnetpool_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Subnetpool Id"
          }
        },
        "required": [
          "name",
          "cidr_block",
          "ip_version"
        ],
        "title": "SubnetCreateRequest",
        "type": "object"
      },
      "SubnetCreateResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "SubnetCreateResponse",
        "type": "object"
      },
      "SubnetPatchRequest": {
        "example": {
          "dns_nameservers": [
            "8.8.8.8"
          ]
        },
        "properties": {
          "dns_nameservers": {
            "default": [],
            "items": {
              "format": "ipvanyaddress",
              "type": "string"
            },
            "title": "Dns Nameservers",
            "type": "array"
          }
        },
        "title": "SubnetPatchRequest",
        "type": "object"
      },
      "SubnetPoolDetailsResponse": {
        "description": "A Schema representing the request for creating one Subnet Pool.",
        "example": {
          "cidr": "172.26.0.0/16",
          "created_at": "2022-01-01T00:00:00.000000Z",
          "description": "some description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_version": 4,
          "is_default": true,
          "name": "some_subnet_pool",
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "cidr": {
            "default": "172.26.0.0/16",
            "description": "The CIDR notation for the subnet pool.",
            "title": "Cidr",
            "type": "string"
          },
          "created_at": {
            "format": "date-time",
            "title": "Created At",
            "type": "string"
          },
          "description": {
            "title": "Description",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "ip_version": {
            "title": "Ip Version",
            "type": "integer"
          },
          "is_default": {
            "title": "Is Default",
            "type": "boolean"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "tenant_id": {
            "title": "Tenant Id",
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "tenant_id",
          "ip_version",
          "is_default",
          "name",
          "description"
        ],
        "title": "SubnetPoolDetailsResponse",
        "type": "object"
      },
      "SubnetPoolPostResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "SubnetPoolPostResponse",
        "type": "object"
      },
      "SubnetPoolRequest": {
        "description": "A Schema representing the request for creating one Subnet Pool.",
        "example": {
          "cidr": "172.26.0.0/16",
          "description": "some description",
          "name": "some_subnet_pool"
        },
        "properties": {
          "cidr": {
            "default": "172.26.0.0/16",
            "description": "The CIDR notation for the subnet pool.",
            "title": "Cidr",
            "type": "string"
          },
          "description": {
            "description": "The description for the subnet pool",
            "title": "Description",
            "type": "string"
          },
          "name": {
            "description": "The name of the subnet pool.",
            "title": "Name",
            "type": "string"
          },
          "type": {
            "default": "default",
            "description": "The type of subnetpool, pip or default.",
            "pattern": "^(pip|default)$",
            "title": "Type",
            "type": "string"
          }
        },
        "required": [
          "name",
          "description"
        ],
        "title": "SubnetPoolRequest",
        "type": "object"
      },
      "SubnetPoolResponse": {
        "description": "A Schema representing a response for Subnet Pool creation.",
        "example": {
          "cidr": "172.26.0.0/16",
          "description": "some description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "some_subnet_pool",
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "cidr": {
            "default": "172.26.0.0/16",
            "description": "The CIDR notation for the subnet pool.",
            "title": "Cidr",
            "type": "string"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "is_default": {
            "title": "Is Default",
            "type": "boolean"
          },
          "name": {
            "title": "Name",
            "type": "string"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Tenant Id"
          }
        },
        "required": [
          "id",
          "name",
          "tenant_id",
          "is_default"
        ],
        "title": "SubnetPoolResponse",
        "type": "object"
      },
      "SubnetPoolsResponse": {
        "description": "A Schema representing a list of Subnet Pools.",
        "example": {
          "meta": {
            "links": {
              "next": "?_offset=30\u0026_limit=10",
              "previous": "?_offset=10\u0026_limit=10",
              "self": "?_offset=30\u0026_limit=10"
            },
            "page": {
              "count": 10,
              "limit": 10,
              "offset": 20,
              "total": 112
            }
          },
          "results": [
            {
              "cidr": "172.20.0.0/16",
              "description": "subnet pool description",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "is_default": true,
              "name": "subnet_pool_name",
              "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        },
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaModel"
          },
          "results": {
            "default": [],
            "description": "List of items for the current page",
            "items": {
              "$ref": "#/components/schemas/SubnetPoolResponse"
            },
            "title": "Results",
            "type": "array"
          }
        },
        "required": [
          "meta"
        ],
        "title": "SubnetPoolsResponse",
        "type": "object"
      },
      "SubnetResponse": {
        "example": {
          "cidr_block": "172.20.0.0/24",
          "created_at": "2022-01-01 00:00:00",
          "description": "vpc description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_version": "4",
          "name": "vpc_name",
          "subnetpool_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "a"
        },
        "properties": {
          "cidr_block": {
            "title": "Cidr Block",
            "type": "string"
          },
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "ip_version": {
            "title": "Ip Version",
            "type": "string"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Name"
          },
          "subnetpool_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Subnetpool Id"
          },
          "updated": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Updated"
          },
          "vpc_id": {
            "title": "Vpc Id",
            "type": "string"
          },
          "zone": {
            "title": "Zone",
            "type": "string"
          }
        },
        "required": [
          "id",
          "vpc_id",
          "cidr_block",
          "ip_version",
          "zone"
        ],
        "title": "SubnetResponse",
        "type": "object"
      },
      "SubnetResponseDetail": {
        "example": {
          "cidr_block": "172.20.0.0/24",
          "created_at": "2022-01-01 00:00:00",
          "description": "vpc description",
          "dhcp_pools": [
            {
              "end": "172.50.0.254",
              "start": "172.50.0.2"
            }
          ],
          "dns_nameservers": [
            "8.8.8.8"
          ],
          "gateway_ip": "172.50.0.1",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_version": "4",
          "name": "vpc_name",
          "subnetpool_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "a"
        },
        "properties": {
          "cidr_block": {
            "title": "Cidr Block",
            "type": "string"
          },
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "dhcp_pools": {
            "items": {
              "$ref": "#/components/schemas/DhcpPoolStr"
            },
            "title": "Dhcp Pools",
            "type": "array"
          },
          "dns_nameservers": {
            "items": {
              "type": "string"
            },
            "title": "Dns Nameservers",
            "type": "array"
          },
          "gateway_ip": {
            "title": "Gateway Ip",
            "type": "string"
          },
          "id": {
            "title": "Id",
            "type": "string"
          },
          "ip_version": {
            "title": "Ip Version",
            "type": "string"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Name"
          },
          "subnetpool_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Subnetpool Id"
          },
          "updated": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Updated"
          },
          "vpc_id": {
            "title": "Vpc Id",
            "type": "string"
          },
          "zone": {
            "title": "Zone",
            "type": "string"
          }
        },
        "required": [
          "id",
          "vpc_id",
          "cidr_block",
          "ip_version",
          "zone",
          "gateway_ip",
          "dns_nameservers",
          "dhcp_pools"
        ],
        "title": "SubnetResponseDetail",
        "type": "object"
      },
      "SubnetResponseId": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          }
        },
        "required": [
          "id"
        ],
        "title": "SubnetResponseId",
        "type": "object"
      },
      "SubnetsResponse": {
        "example": {
          "subnets": [
            {
              "cidr_block": "172.20.0.0/24",
              "created_at": "2022-01-01 00:00:00",
              "description": "vpc description",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "ip_version": "4",
              "name": "vpc_name",
              "subnetpool_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "zone": "a"
            }
          ]
        },
        "properties": {
          "subnets": {
            "default": [],
            "items": {
              "$ref": "#/components/schemas/SubnetResponse"
            },
            "title": "Subnets",
            "type": "array"
          }
        },
        "title": "SubnetsResponse",
        "type": "object"
      },
      "UnbookCidrRequest": {
        "example": {
          "cidr": "172.26.0.0/16"
        },
        "properties": {
          "cidr": {
            "default": "172.26.0.0/16",
            "description": "The CIDR notation for the subnet pool.",
            "title": "Cidr",
            "type": "string"
          }
        },
        "title": "UnbookCidrRequest",
        "type": "object"
      },
      "VPCStatus": {
        "enum": [
          "pending",
          "processing",
          "processing_interconnect",
          "processing_azdc_migration",
          "error_interconnect",
          "error_azdc_migration",
          "created",
          "error"
        ],
        "title": "VPCStatus",
        "type": "string"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location",
            "type": "array"
          },
          "msg": {
            "title": "Message",
            "type": "string"
          },
          "type": {
            "title": "Error Type",
            "type": "string"
          }
        },
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError",
        "type": "object"
      },
      "VpcCreatePayload": {
        "example": {
          "description": "Description",
          "name": "VPC Name"
        },
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "name": {
            "title": "Name",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "title": "VpcCreatePayload",
        "type": "object"
      },
      "VpcResponse": {
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "DESCRIPTION",
          "error": "error",
          "external_network": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "vpc_name",
          "network_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "router_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "security_groups": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "status": "created",
          "subnets": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00"
        },
        "properties": {
          "created_at": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Created At"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Description"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Error"
          },
          "external_network": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "External Network"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Id"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {}
            ],
            "title": "Is Default"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Name"
          },
          "network_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Network Id"
          },
          "router_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Router Id"
          },
          "security_groups": {
            "default": [],
            "items": {
              "type": "string"
            },
            "title": "Security Groups",
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/VPCStatus"
          },
          "subnets": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {}
            ],
            "default": [],
            "title": "Subnets"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {}
            ],
            "title": "Tenant Id"
          },
          "updated": {
            "anyOf": [
              {
                "format": "date-time",
                "type": "string"
              },
              {}
            ],
            "title": "Updated"
          }
        },
        "required": [
          "status"
        ],
        "title": "VpcResponse",
        "type": "object"
      },
      "VpcResponseList": {
        "example": {
          "vpcs": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "DESCRIPTION",
              "error": "error",
              "external_network": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "is_default": true,
              "name": "vpc_name",
              "network_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "router_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "security_groups": [
                "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              ],
              "status": "created",
              "subnets": [
                "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              ],
              "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "updated": "2022-01-01 00:00:00"
            }
          ]
        },
        "properties": {
          "vpcs": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/VpcResponse"
                },
                "type": "array"
              },
              {}
            ],
            "default": [],
            "title": "Vpcs"
          }
        },
        "title": "VpcResponseList",
        "type": "object"
      },
      "vpc_api_product__v1__vpcs__schemas__VpcCreateResponse": {
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status": "pending"
        },
        "properties": {
          "id": {
            "title": "Id",
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        },
        "required": [
          "id",
          "status"
        ],
        "title": "VpcCreateResponse",
        "type": "object"
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "in": "header",
        "name": "x-api-key",
        "type": "apiKey"
      },
      "OAuth2": {
        "description": "OAuth2 via IDPA",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect",
            "scopes": {
              "network.pip-k8s-read": "Ler IP publico de projeto k8s",
              "network.pip-k8s-write": "Criar e deletar IP publico de projeto k8s",
              "network.read": "Ler informacoes de recursos VPC IaaS",
              "network.write": "Escrever informacoes de recursos VPC IaaS"
            },
            "tokenUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/oauth/token"
          }
        },
        "type": "oauth2"
      }
    }
  },
  "info": {
    "contact": {
      "name": "IaaS Products",
      "url": "https://github.com/luizalabs"
    },
    "description": "VPC Api Product",
    "title": "VPC API Product",
    "version": "1.158.1"
  },
  "openapi": "3.0.3",
  "paths": {
    "/v0/ports": {
      "get": {
        "description": "Return a detailed list of ports from the provided tenant_id",
        "operationId": "detail_ports_v0_ports_get",
        "parameters": [
          {
            "in": "query",
            "name": "port_id_list",
            "required": false,
            "schema": {
              "default": [],
              "items": {},
              "title": "Port Id List",
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/PortResponse"
                  },
                  "title": "Response Detail Ports V0 Ports Get",
                  "type": "array"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Details of a Port list",
        "tags": [
          "ports"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_port_list",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/ports/{port_id}": {
      "delete": {
        "description": "Delete a port from the provided tenant_id",
        "operationId": "delete_port_v0_ports__port_id__delete",
        "parameters": [
          {
            "description": "ID of the Port to delete",
            "in": "path",
            "name": "port_id",
            "required": true,
            "schema": {
              "description": "ID of the Port to delete",
              "title": "port_id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Delete Port",
        "tags": [
          "ports"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_port_delete",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "get": {
        "description": "Return a port details from the provided tenant_id",
        "operationId": "detail_port_v0_ports__port_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "port_id",
            "required": true,
            "schema": {
              "title": "Port Id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Port Details",
        "tags": [
          "ports"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_port_get",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/ports/{port_id}/attach/{security_group_id}": {
      "post": {
        "description": "Attach a Security Group to a Port with provided port_id, security_group_id, x-tenant-id of an specific project type",
        "operationId": "attach_security_group_v0_ports__port_id__attach__security_group_id__post",
        "parameters": [
          {
            "description": "ID of the Port to attach security group",
            "in": "path",
            "name": "port_id",
            "required": true,
            "schema": {
              "description": "ID of the Port to attach security group",
              "title": "port_id"
            }
          },
          {
            "description": "ID of the Security Group to attach",
            "in": "path",
            "name": "security_group_id",
            "required": true,
            "schema": {
              "description": "ID of the Security Group to attach",
              "title": "security_group_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Attach Security Group",
        "tags": [
          "ports"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_port-attach_action",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/ports/{port_id}/detach/{security_group_id}": {
      "post": {
        "description": "Detach a Security Group to a Port with provided port_id, security_group_id, x-tenant-id of an specific project type",
        "operationId": "detach_security_group_v0_ports__port_id__detach__security_group_id__post",
        "parameters": [
          {
            "description": "ID of the Port to detach security group",
            "in": "path",
            "name": "port_id",
            "required": true,
            "schema": {
              "description": "ID of the Port to detach security group",
              "title": "port_id"
            }
          },
          {
            "description": "ID of the Security Group to detach",
            "in": "path",
            "name": "security_group_id",
            "required": true,
            "schema": {
              "description": "ID of the Security Group to detach",
              "title": "security_group_id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Detach Security Group",
        "tags": [
          "ports"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_port-attach_action",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/public_ips": {
      "get": {
        "description": "Return a tenant's public ip list",
        "operationId": "get_tenant_public_ip_list_v0_public_ips_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpsList"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Tenant's public IP list",
        "tags": [
          "public_ips"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_fip_list",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/public_ips/{public_ip_id}": {
      "delete": {
        "description": "Delete a Public IP from the provided tenant_id",
        "operationId": "delete_public_ip_v0_public_ips__public_ip_id__delete",
        "parameters": [
          {
            "description": "Id of the Public IP to delete",
            "in": "path",
            "name": "public_ip_id",
            "required": true,
            "schema": {
              "description": "Id of the Public IP to delete",
              "title": "Public IP ID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Delete Public IP",
        "tags": [
          "public_ips"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_fip_delete",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "get": {
        "description": "Return a Public IP details",
        "operationId": "detail_public_ip_v0_public_ips__public_ip_id__get",
        "parameters": [
          {
            "description": "Id of the Public IP to retrieve",
            "in": "path",
            "name": "public_ip_id",
            "required": true,
            "schema": {
              "description": "Id of the Public IP to retrieve",
              "title": "Public IP ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpDb"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Public IP Details",
        "tags": [
          "public_ips"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_fip_get",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/public_ips/{public_ip_id}/attach/{port_id}": {
      "post": {
        "description": "Attach a Public IP to a Port",
        "operationId": "attach_public_ip_v0_public_ips__public_ip_id__attach__port_id__post",
        "parameters": [
          {
            "description": "Id of the Public IP to attach port to",
            "in": "path",
            "name": "public_ip_id",
            "required": true,
            "schema": {
              "description": "Id of the Public IP to attach port to",
              "title": "Public IP ID"
            }
          },
          {
            "description": "Id of the Port to attach the Public IP",
            "in": "path",
            "name": "port_id",
            "required": true,
            "schema": {
              "description": "Id of the Port to attach the Public IP",
              "title": "Port ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Attach Public IP",
        "tags": [
          "public_ips"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_fip-attach_action",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/public_ips/{public_ip_id}/detach/{port_id}": {
      "post": {
        "description": "Detach a Public IP to a Port",
        "operationId": "detach_public_ip_v0_public_ips__public_ip_id__detach__port_id__post",
        "parameters": [
          {
            "description": "Id of the Public IP to detach port to",
            "in": "path",
            "name": "public_ip_id",
            "required": true,
            "schema": {
              "description": "Id of the Public IP to detach port to",
              "title": "Public IP ID"
            }
          },
          {
            "description": "Id of the Port to detach the Public IP",
            "in": "path",
            "name": "port_id",
            "required": true,
            "schema": {
              "description": "Id of the Port to detach the Public IP",
              "title": "Port ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Detach Public IP",
        "tags": [
          "public_ips"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_fip-attach_action",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/rules/{rule_id}": {
      "delete": {
        "description": "Delete a rule from the provided tenant_id",
        "operationId": "delete_rule_v0_rules__rule_id__delete",
        "parameters": [
          {
            "description": "Id of the Rule",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "description": "Id of the Rule",
              "title": "Rule ID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Delete a Rule",
        "tags": [
          "rules"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_rule_delete",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "get": {
        "description": "Return a rule details",
        "operationId": "detail_rule_v0_rules__rule_id__get",
        "parameters": [
          {
            "description": "Id of the Rule",
            "in": "path",
            "name": "rule_id",
            "required": true,
            "schema": {
              "description": "Id of the Rule",
              "title": "Rule ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Rule Details",
        "tags": [
          "rules"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_rule_get",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/security_groups": {
      "get": {
        "description": "Returns a list of security groups for a provided tenant_id",
        "operationId": "list_vpc_security_groups_by_tenant_v0_security_groups_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupListEvent"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "List Security Groups by Tenant",
        "tags": [
          "security_groups"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_sg_list",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "post": {
        "description": "Create a Security Group",
        "operationId": "create_security_group_v0_security_groups_post",
        "parameters": [
          {
            "description": "Validate the quota before creating Security Group",
            "in": "query",
            "name": "validate_quota",
            "required": false,
            "schema": {
              "default": true,
              "description": "Validate the quota before creating Security Group",
              "title": "validateQuota",
              "type": "boolean"
            }
          },
          {
            "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
            "in": "query",
            "name": "wait",
            "required": false,
            "schema": {
              "default": true,
              "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
              "title": "wait",
              "type": "boolean"
            }
          },
          {
            "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
            "in": "query",
            "name": "wait_timeout",
            "required": false,
            "schema": {
              "default": 120,
              "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
              "title": "waitTimeout",
              "type": "integer"
            }
          },
          {
            "description": "Skip creation of default security group rules",
            "in": "query",
            "name": "skip_default_rules",
            "required": false,
            "schema": {
              "default": false,
              "description": "Skip creation of default security group rules",
              "title": "Skip Default Rules",
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityGroupCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupCreateResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Create Security Group",
        "tags": [
          "security_groups"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_sg_create",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/security_groups/{security_group_id}": {
      "delete": {
        "description": "Delete a security group from the provided tenant_id",
        "operationId": "delete_security_group_v0_security_groups__security_group_id__delete",
        "parameters": [
          {
            "description": "Id of the security group to delete",
            "in": "path",
            "name": "security_group_id",
            "required": true,
            "schema": {
              "description": "Id of the security group to delete",
              "title": "Security Group ID"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Delete a security group",
        "tags": [
          "security_groups"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_sg_delete",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "get": {
        "description": "Return a security group details",
        "operationId": "detail_security_group_v0_security_groups__security_group_id__get",
        "parameters": [
          {
            "description": "Id of the security group to detail",
            "in": "path",
            "name": "security_group_id",
            "required": true,
            "schema": {
              "description": "Id of the security group to detail",
              "title": "Security Group ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupDetailEvent"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Security Group Details",
        "tags": [
          "security_groups"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_sg_get",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/security_groups/{security_group_id}/rules": {
      "get": {
        "description": "Returns a list of rules for a provided security_group_id",
        "operationId": "list_security_group_rules_v0_security_groups__security_group_id__rules_get",
        "parameters": [
          {
            "description": "Id of the Security Group",
            "in": "path",
            "name": "security_group_id",
            "required": true,
            "schema": {
              "description": "Id of the Security Group",
              "title": "Security Group ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RulesList"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "List Rules",
        "tags": [
          "security_groups"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_sg-rule_list",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "post": {
        "description": "Create a Rule async, returning its ID. To monitor the creation progress, please check the status in the service message or implement polling.Either a remote_ip_prefix or a remote_group_id can be specified.With remote_ip_prefix, all IPs that match the criteria will be allowed.With remote_group_id, only the specified security group is allowed to communicatefollowing the specified protocol, direction and port_range_min/max",
        "operationId": "create_rule_v0_security_groups__security_group_id__rules_post",
        "parameters": [
          {
            "description": "Id of the Security Group",
            "in": "path",
            "name": "security_group_id",
            "required": true,
            "schema": {
              "description": "Id of the Security Group",
              "title": "Security Group ID"
            }
          },
          {
            "description": "Validate the quota before creating Rule",
            "in": "query",
            "name": "validate_quota",
            "required": false,
            "schema": {
              "default": true,
              "description": "Validate the quota before creating Rule",
              "title": "validateQuota",
              "type": "boolean"
            }
          },
          {
            "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
            "in": "query",
            "name": "wait",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {}
              ],
              "default": true,
              "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
              "title": "wait"
            }
          },
          {
            "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
            "in": "query",
            "name": "wait_timeout",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {}
              ],
              "default": 120,
              "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
              "title": "waitTimeout"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleCreateResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Create Rule",
        "tags": [
          "security_groups"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_sg-rule_create",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/subnetpools": {
      "get": {
        "description": "Returns a list of Subnet Pools for the current tenant's project",
        "operationId": "list_subnetpools_v0_subnetpools_get",
        "parameters": [
          {
            "description": "Start item for pagination",
            "in": "query",
            "name": "_offset",
            "required": false,
            "schema": {
              "default": 0,
              "description": "Start item for pagination",
              "minimum": 0,
              "title": "Items Offset",
              "type": "integer"
            }
          },
          {
            "description": "Number of items per page",
            "in": "query",
            "name": "_limit",
            "required": false,
            "schema": {
              "default": 20,
              "description": "Number of items per page",
              "minimum": 1,
              "title": "Pagination",
              "type": "integer"
            }
          },
          {
            "description": "Name of the field wich the list must be ordered by ending with :asc or :desc",
            "examples": {
              "example_created_at_asc": {
                "summary": "created_at:asc",
                "value": "created_at:asc"
              },
              "example_created_at_desc": {
                "summary": "created_at:desc",
                "value": "created_at:desc"
              }
            },
            "in": "query",
            "name": "_sort",
            "required": false,
            "schema": {
              "default": "created_at:desc",
              "description": "Name of the field wich the list must be ordered by ending with :asc or :desc",
              "title": " Sort",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "_az_id",
            "required": false,
            "schema": {
              "default": "a",
              "title": " Az Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetPoolsResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "List Subnet Pools by Tenant",
        "tags": [
          "subnetpools"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnetpool_list",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "post": {
        "description": "Create a Subnet Pool",
        "operationId": "create_subnetpool_v0_subnetpools_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubnetPoolRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetPoolPostResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Create a Subnet Pool in a tenant",
        "tags": [
          "subnetpools"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnetpool_create",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/subnetpools/{subnetpool_id}": {
      "delete": {
        "description": "Delete one Subnet Pool by ID",
        "operationId": "delete_subnetpool_v0_subnetpools__subnetpool_id__delete",
        "parameters": [
          {
            "description": "Id of the Subnet Pool to delete",
            "in": "path",
            "name": "subnetpool_id",
            "required": true,
            "schema": {
              "description": "Id of the Subnet Pool to delete",
              "title": "subnetpoolId"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Delete Subnet Pool by ID",
        "tags": [
          "subnetpools"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnetpool_delete",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "get": {
        "description": "Get details of a specific Subnet Pool",
        "operationId": "get_subnetpool_v0_subnetpools__subnetpool_id__get",
        "parameters": [
          {
            "description": "Id of the Subnet Pool to get details",
            "in": "path",
            "name": "subnetpool_id",
            "required": true,
            "schema": {
              "description": "Id of the Subnet Pool to get details",
              "title": "subnetpoolId"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetPoolDetailsResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Get Subnet Pool by ID",
        "tags": [
          "subnetpools"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnetpool_get",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/subnetpools/{subnetpool_id}/book_cidr": {
      "post": {
        "description": "Booking a CIDR range from a subnetpool",
        "operationId": "book_cidr_v0_subnetpools__subnetpool_id__book_cidr_post",
        "parameters": [
          {
            "description": "Id of the Subnet Pool to get details",
            "in": "path",
            "name": "subnetpool_id",
            "required": true,
            "schema": {
              "description": "Id of the Subnet Pool to get details",
              "title": "subnetpoolId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "example_cidr": {
                  "summary": "Example with CIDR",
                  "value": {
                    "cidr": "172.26.0.0/16"
                  }
                },
                "example_mask": {
                  "summary": "Example with Mask",
                  "value": {
                    "mask": 26
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BookCidrRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookCidrResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Book Subnetpool",
        "tags": [
          "subnetpools"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnetpool-book_action",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/subnetpools/{subnetpool_id}/unbook_cidr": {
      "post": {
        "description": "Unbooking a CIDR range from a subnetpool",
        "operationId": "unbook_cidr_v0_subnetpools__subnetpool_id__unbook_cidr_post",
        "parameters": [
          {
            "description": "Id of the Subnet Pool to get details",
            "in": "path",
            "name": "subnetpool_id",
            "required": true,
            "schema": {
              "description": "Id of the Subnet Pool to get details",
              "title": "subnetpoolId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnbookCidrRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Unbook Subnetpool",
        "tags": [
          "subnetpools"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnetpool-book_action",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/subnets/{subnet_id}": {
      "delete": {
        "description": "Delete a subnet from the provided tenant_id",
        "operationId": "delete_subnet_v0_subnets__subnet_id__delete",
        "parameters": [
          {
            "description": "Id of the Subnet to delete",
            "in": "path",
            "name": "subnet_id",
            "required": true,
            "schema": {
              "description": "Id of the Subnet to delete",
              "title": "Subnet Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Delete a Subnet",
        "tags": [
          "subnets"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnet_delete",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "get": {
        "description": "Returns a subnet details",
        "operationId": "detail_subnet_v0_subnets__subnet_id__get",
        "parameters": [
          {
            "description": "Id of the Subnet to detail",
            "in": "path",
            "name": "subnet_id",
            "required": true,
            "schema": {
              "description": "Id of the Subnet to detail",
              "title": "Subnet Id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetResponseDetail"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Subnet Details",
        "tags": [
          "subnets"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnet_get",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "patch": {
        "description": "Update a subnet from the provided tenant_id",
        "operationId": "update_subnet_v0_subnets__subnet_id__patch",
        "parameters": [
          {
            "description": "Id of the Subnet to update",
            "in": "path",
            "name": "subnet_id",
            "required": true,
            "schema": {
              "description": "Id of the Subnet to update",
              "title": "Subnet Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubnetPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetResponseId"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Update Subnet",
        "tags": [
          "subnets"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_subnet_update",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs": {
      "get": {
        "description": "Returns a list of VPCs for a provided tenant_id",
        "operationId": "list_vpcs_v0_vpcs_get",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcResponseList"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "List VPC",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc_list",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/{vpc_id}": {
      "delete": {
        "description": "Delete a VPC from the provided tenant_id",
        "operationId": "delete_vpc_v0_vpcs__vpc_id__delete",
        "parameters": [
          {
            "description": "ID of the VPC to delete",
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "description": "ID of the VPC to delete",
              "title": "VPC Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Delete VPC",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc_delete",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "get": {
        "description": "Return a VPC details",
        "operationId": "detail_vpc_v0_vpcs__vpc_id__get",
        "parameters": [
          {
            "description": "ID of the VPC to detail",
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "description": "ID of the VPC to detail",
              "title": "VPC Id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "VPC Details",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc_get",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/{vpc_id}/ports": {
      "get": {
        "description": "Returns a list of ports for a provided vpc_id and x-tenant-id. The list will be paginated, it means you can easily find what you need just setting the page number(_offset) and the quantity of items per page(_limit). The level of detail can also be set",
        "operationId": "list_vpc_ports_v0_vpcs__vpc_id__ports_get",
        "parameters": [
          {
            "description": "ID of VPC to list ports",
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "description": "ID of VPC to list ports",
              "title": "vpc_id"
            }
          },
          {
            "in": "query",
            "name": "detailed",
            "required": false,
            "schema": {
              "default": true,
              "title": "Detailed",
              "type": "boolean"
            }
          },
          {
            "description": "Filter ports results with name",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {}
              ],
              "description": "Filter ports results with name",
              "title": "Name of the port to list"
            }
          },
          {
            "description": "Page Number",
            "in": "query",
            "name": "_offset",
            "required": false,
            "schema": {
              "default": 1,
              "description": "Page Number",
              "minimum": 1,
              "title": "Page Number",
              "type": "integer"
            }
          },
          {
            "description": "Items Per Page",
            "in": "query",
            "name": "_limit",
            "required": false,
            "schema": {
              "default": 10,
              "description": "Items Per Page",
              "minimum": 1,
              "title": "Items Per Page",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "port_id_list",
            "required": false,
            "schema": {
              "default": [],
              "items": {},
              "title": "Port Id List",
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PortsListSimplified"
                    },
                    {
                      "$ref": "#/components/schemas/PortsList"
                    }
                  ],
                  "title": "Response List Vpc Ports V0 Vpcs  Vpc Id  Ports Get"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "List Ports",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc-port_list",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "post": {
        "description": "Create a Port with provided vpc_id and x-tenant-id. You can provide a list of security_groups_id or subnets",
        "operationId": "create_port_v0_vpcs__vpc_id__ports_post",
        "parameters": [
          {
            "description": "ID of the VPC to create port",
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "description": "ID of the VPC to create port",
              "title": "vpc_id"
            }
          },
          {
            "in": "header",
            "name": "x-zone",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {}
              ],
              "title": "X-Zone"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortCreateResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Create Port",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc-port_create",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/{vpc_id}/public_ips": {
      "get": {
        "description": "Returns a list of Public IPs for a provided vpc_id",
        "operationId": "list_vpc_public_ips_v0_vpcs__vpc_id__public_ips_get",
        "parameters": [
          {
            "description": "Id of the VPC to list the Public IPs in",
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "description": "Id of the VPC to list the Public IPs in",
              "title": "Vpc ID"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpsList"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "List Public IPs",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc-fip_list",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "post": {
        "description": "Create async Public IP in a VPC with provided vpc_id and x_tenant_id",
        "operationId": "create_public_ip_v0_vpcs__vpc_id__public_ips_post",
        "parameters": [
          {
            "description": "Id of the VPC to create the Public IP in",
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "description": "Id of the VPC to create the Public IP in",
              "title": "Vpc ID"
            }
          },
          {
            "description": "Validate the quota before creating the Public IP",
            "in": "query",
            "name": "validate_quota",
            "required": false,
            "schema": {
              "default": true,
              "description": "Validate the quota before creating the Public IP",
              "title": "validateQuota",
              "type": "boolean"
            }
          },
          {
            "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
            "in": "query",
            "name": "wait",
            "required": false,
            "schema": {
              "default": true,
              "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
              "title": "wait",
              "type": "boolean"
            }
          },
          {
            "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
            "in": "query",
            "name": "wait_timeout",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {}
              ],
              "default": 120,
              "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
              "title": "waitTimeout"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicIpCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpCreateResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Create Public IP",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc-fip_create",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/{vpc_id}/subnets": {
      "get": {
        "description": "Returns a list of subnets for a provided vpc_id",
        "operationId": "list_subnets_from_vpc_v0_vpcs__vpc_id__subnets_get",
        "parameters": [
          {
            "description": "Id of the VPC to list Subnets",
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "description": "Id of the VPC to list Subnets",
              "title": "Vpc Id"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetsResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "List Subnets",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc-subnet_list",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "post": {
        "description": "Create a Subnet",
        "operationId": "create_subnet_v0_vpcs__vpc_id__subnets_post",
        "parameters": [
          {
            "description": "Id of the VPC to create Subnet",
            "in": "path",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "description": "Id of the VPC to create Subnet",
              "title": "Vpc Id"
            }
          },
          {
            "in": "header",
            "name": "x-zone",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {}
              ],
              "title": "X-Zone"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "example_cidr": {
                  "summary": "Example with CIDR",
                  "value": {
                    "cidr_block": "172.50.0.0/24",
                    "description": "some_description",
                    "dns_nameservers": [
                      "8.8.8.8"
                    ],
                    "ip_version": 4,
                    "name": "subnet_name",
                    "subnetpool_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                  }
                },
                "example_mask": {
                  "summary": "Example with Mask",
                  "value": {
                    "cidr_block": "24",
                    "description": "some_description",
                    "dns_nameservers": [
                      "8.8.8.8"
                    ],
                    "ip_version": 4,
                    "name": "subnet_name",
                    "subnetpool_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/SubnetCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetCreateResponse"
                }
              }
            },
            "description": "Successful Response"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Create Subnet",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc-subnet_create",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v1/nat_gateways": {
      "get": {
        "description": "List the NAT (Network Address Translation) Gateways from a VPC.",
        "operationId": "list_nat_gateways_v1_nat_gateways_get",
        "parameters": [
          {
            "in": "query",
            "name": "vpc_id",
            "required": true,
            "schema": {
              "title": "Vpc Id",
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {}
              ],
              "default": "name:asc",
              "title": "Sort"
            }
          },
          {
            "in": "query",
            "name": "page",
            "required": false,
            "schema": {
              "default": 1,
              "minimum": 1,
              "title": "Page",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "items_per_page",
            "required": false,
            "schema": {
              "default": 10,
              "maximum": 100,
              "minimum": 1,
              "title": "Items Per Page",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatGatewayListResponse"
                }
              }
            },
            "description": "Ok"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode400BadRequest"
                }
              }
            },
            "description": "Bad Request"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode409Conflict"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode500InternalServerError"
                }
              }
            },
            "description": "Internal Exception"
          },
          "504": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode504GatewayTimeout"
                }
              }
            },
            "description": "Gateway Timeout"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "List the NAT Gateways from a VPC",
        "tags": [
          "nat_gateways"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_ng_list",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "post": {
        "description": "Create a new NAT (Network Address Translation) Gateway for a specified VPC and zone.",
        "operationId": "create_nat_gateway_v1_nat_gateways_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NatGatewayCreatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatGatewayCreateResponse"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode400BadRequest"
                }
              }
            },
            "description": "Bad Request"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode409Conflict"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode500InternalServerError"
                }
              }
            },
            "description": "Internal Exception"
          },
          "504": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode504GatewayTimeout"
                }
              }
            },
            "description": "Gateway Timeout"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Create a new NAT Gateway resource",
        "tags": [
          "nat_gateways"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_ng_create",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v1/nat_gateways/{nat_gateway_id}": {
      "delete": {
        "description": "Delete a NAT (Network Address Translation) Gateway from a VPC.",
        "operationId": "delete_nat_gateway_v1_nat_gateways__nat_gateway_id__delete",
        "parameters": [
          {
            "in": "path",
            "name": "nat_gateway_id",
            "required": true,
            "schema": {
              "title": "Nat Gateway Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {}
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode400BadRequest"
                }
              }
            },
            "description": "Bad Request"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode409Conflict"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode500InternalServerError"
                }
              }
            },
            "description": "Internal Exception"
          },
          "504": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode504GatewayTimeout"
                }
              }
            },
            "description": "Gateway Timeout"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Delete a NAT Gateway from a VPC",
        "tags": [
          "nat_gateways"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_ng_delete",
          "product-name": "network"
        },
        "x-viveiro": true
      },
      "get": {
        "description": "Detail a NAT (Network Address Translation) Gateway from a VPC.",
        "operationId": "detail_nat_gateway_v1_nat_gateways__nat_gateway_id__get",
        "parameters": [
          {
            "in": "path",
            "name": "nat_gateway_id",
            "required": true,
            "schema": {
              "title": "Nat Gateway Id",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NatGatewayDetailsResponse"
                }
              }
            },
            "description": "Ok"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode400BadRequest"
                }
              }
            },
            "description": "Bad Request"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode409Conflict"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode500InternalServerError"
                }
              }
            },
            "description": "Internal Exception"
          },
          "504": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode504GatewayTimeout"
                }
              }
            },
            "description": "Gateway Timeout"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.read"
            ]
          }
        ],
        "summary": "Detail a NAT Gateway from a VPC",
        "tags": [
          "nat_gateways"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_ng_get",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    },
    "/v1/vpcs": {
      "post": {
        "description": "Create a new Virtual Private Cloud (VPC).",
        "operationId": "v1_create_vpc_v1_vpcs_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcCreatePayload"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/vpc_api_product__v1__vpcs__schemas__VpcCreateResponse"
                }
              }
            },
            "description": "Accepted"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode400BadRequest"
                }
              }
            },
            "description": "Bad Request"
          },
          "409": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode409Conflict"
                }
              }
            },
            "description": "Conflict"
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            },
            "description": "Validation Error"
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode500InternalServerError"
                }
              }
            },
            "description": "Internal Exception"
          },
          "504": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusCode504GatewayTimeout"
                }
              }
            },
            "description": "Gateway Timeout"
          }
        },
        "security": [
          {
            "OAuth2": [
              "network.write"
            ]
          }
        ],
        "summary": "Create a new Virtual Private Cloud (VPC)",
        "tags": [
          "vpcs"
        ],
        "x-mgc-hidden": false,
        "x-permission": {
          "permission-name": "net_vpc_create",
          "product-name": "network"
        },
        "x-viveiro": true
      }
    }
  },
  "tags": [
    {
      "description": "Operations related to Ports",
      "name": "ports"
    },
    {
      "description": "Operations related to Public IPs",
      "name": "public_ips"
    },
    {
      "description": "Operations related to Rules",
      "name": "rules"
    },
    {
      "description": "Operations related to Security Groups",
      "name": "security_groups"
    },
    {
      "description": "Operations related to Subnet Pools",
      "name": "subnetpools"
    },
    {
      "description": "Operations related to Subnets",
      "name": "subnets"
    },
    {
      "description": "Operations related to VPCs",
      "name": "vpcs"
    },
    {
      "description": "Operations related to Nat Gateway",
      "name": "nat_gateways"
    }
  ],
  "servers": [
    {
      "url": "https://{env}/{region}/network",
      "variables": {
        "region": {
          "enum": [
            "br-ne1",
            "br-se1",
            "br-mgl1"
          ],
          "default": "br-se1",
          "description": "Region to reach the service",
          "x-mgc-transforms": [
            {
              "allowMissing": true,
              "translations": [
                {
                  "from": "br-mgl1",
                  "to": "br-se-1"
                }
              ],
              "type": "translate"
            }
          ]
        },
        "env": {
          "enum": [
            "api.magalu.cloud",
            "api.pre-prod.jaxyendy.com"
          ],
          "default": "api.magalu.cloud",
          "description": "Environment to use",
          "x-mgc-transforms": [
            {
              "translations": [
                {
                  "from": "prod",
                  "to": "api.magalu.cloud"
                },
                {
                  "from": "pre-prod",
                  "to": "api.pre-prod.jaxyendy.com"
                }
              ],
              "type": "translate"
            }
          ]
        }
      }
    }
  ]
}