{
  "openapi": "3.0.1",
  "info": {
    "title": "k8s-api-product",
    "description": "APIs related to the Kubernetes product.",
    "contact": {
      "name": "IAAS Cloud Tribe",
      "url": "https://github.com/luizalabs",
      "email": "suporte@jaxyendy.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api-mke.pre-prod.br-ne-1.jaxyendy.com",
      "description": "NE-1 pre-prod"
    },
    {
      "url": "https://api-mke.team-integration.br-ne-1.jaxyendy.com",
      "description": "NE-1 team-integration"
    },
    {
      "url": "https://api-mke.br-ne-1.jaxyendy.com",
      "description": "NE-1 prod"
    },
    {
      "url": "https://api-mke.br-se1-pre-prod.jaxyendy.com",
      "description": "SE1 pre-prod"
    },
    {
      "url": "https://api-mke.br-se1-team-integration.jaxyendy.com",
      "description": "SE1 team-integration"
    },
    {
      "url": "https://api-mke.br-se1-prod.jaxyendy.com",
      "description": "SE1 prod"
    },
    {
      "url": "https://api-mke.pre-prod.se1.br.jaxyendy.com",
      "description": "SE1-BLU pre-prod"
    },
    {
      "url": "https://api-mke.prod.se1.br.jaxyendy.com",
      "description": "SE1-BLU prod"
    },
    {
      "url": "https:///api-mke.team-integration.se1.br.jaxyendy.com",
      "description": "SE1-BLU team-integration"
    }
  ],
  "paths": {
    "/v0/clusters": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "List all clusters",
        "description": "Lists all clusters for a user.",
        "operationId": "getClusters",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClustersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Create a cluster",
        "description": "Creates a Kubernetes cluster in Magalu Cloud.",
        "operationId": "createCluster",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClusterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"cluster-example\",\"version\":\"v1.30.2\",\"description\":\"This is an example cluster.\",\"zone\":\"br-region-zone\",\"enabled_bastion\":false,\"enabled_server_group\":false,\"node_pools\":[{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"valor1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}],\"allowed_cidrs\":[\"192.168.1.0/24\",\"10.0.0.0/16\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"name\":\"cluster-example\",\"version\":\"v1.30.2\",\"description\":\"This is an example cluster.\",\"zone\":\"br-region-zone\",\"enabled_bastion\":false,\"enabled_server_group\":false,\"node_pools\":[{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"valor1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}],\"allowed_cidrs\":[\"192.168.1.0/24\",\"10.0.0.0/16\"]}' |  \\\n  http POST https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.30.2\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}],\\\"allowed_cidrs\\\":[\\\"192.168.1.0/24\\\",\\\"10.0.0.0/16\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.30.2\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}],\\\"allowed_cidrs\\\":[\\\"192.168.1.0/24\\\",\\\"10.0.0.0/16\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v0/clusters\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'cluster-example',\n  version: 'v1.30.2',\n  description: 'This is an example cluster.',\n  zone: 'br-region-zone',\n  enabled_bastion: false,\n  enabled_server_group: false,\n  node_pools: [\n    {\n      name: 'nodepool-example',\n      flavor: 'cloud-k8s.gp1.small',\n      replicas: 3,\n      tags: ['tag-value1'],\n      taints: [{key: 'example-key', value: 'valor1', effect: 'NoSchedule'}],\n      auto_scale: {min_replicas: 2, max_replicas: 5}\n    }\n  ],\n  allowed_cidrs: ['192.168.1.0/24', '10.0.0.0/16']\n}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.30.2\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}],\\\"allowed_cidrs\\\":[\\\"192.168.1.0/24\\\",\\\"10.0.0.0/16\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "List a cluster by uuid",
        "description": "Lists detailed cluster information by cluster_uuid.",
        "operationId": "getClusterById",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "tags": [
          "cluster"
        ],
        "summary": "Delete a cluster",
        "description": "Deletes a cluster by cluster_uuid.",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"DELETE\", \"/v0/clusters/%7Bcluster_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "tags": [
          "cluster"
        ],
        "summary": "Patches a cluster",
        "description": "Patches the mutable fields of a cluster",
        "operationId": "patchCluster",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchClusterRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchClusterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"allowed_cidrs\":[\"string\"]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"allowed_cidrs\":[\"string\"]}' |  \\\n  http PATCH https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"allowed_cidrs\\\":[\\\"string\\\"]}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"allowed_cidrs\\\":[\\\"string\\\"]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v0/clusters/%7Bcluster_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({allowed_cidrs: ['string']}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"allowed_cidrs\\\":[\\\"string\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}/kubeconfig": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get kubeconfig cluster",
        "description": "Retrieves the kubeconfig of a Kubernetes cluster by cluster_uuid.",
        "operationId": "getKubeConfigCluster",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Schema to get the cluster's kubeconfig file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterKubeConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/kubeconfig\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/kubeconfig\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}/node_pools": {
      "get": {
        "tags": [
          "nodepool"
        ],
        "summary": "List node pools by cluster_id",
        "description": "Gets a node pool from a Kubernetes cluster by cluster_uuid.",
        "operationId": "getClusterNodePools",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNodePoolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/node_pools\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "tags": [
          "nodepool"
        ],
        "summary": "Create a node pool",
        "description": "Creates a node pool in a Kubernetes cluster.",
        "operationId": "createNodePool",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodePoolRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"value1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"value1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}' |  \\\n  http POST https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v0/clusters/%7Bcluster_id%7D/node_pools\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'nodepool-example',\n  flavor: 'cloud-k8s.gp1.small',\n  replicas: 3,\n  tags: ['tag-value1'],\n  taints: [{key: 'example-key', value: 'value1', effect: 'NoSchedule'}],\n  auto_scale: {min_replicas: 2, max_replicas: 5}\n}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}/node_pools/{node_pool_id}": {
      "get": {
        "tags": [
          "nodepool"
        ],
        "summary": "Get node pool by node_pool_id",
        "description": "Gets nodes in a node pool by nodepool_uuid.",
        "operationId": "getNodePool",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "description": "Nodepool's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "tags": [
          "nodepool"
        ],
        "summary": "Delete node pool by node_pool_id",
        "description": "Deletes a node pool in a Kubernetes cluster by nodepool_uuid.",
        "operationId": "deleteNodePool",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "description": "Nodepool's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"DELETE\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "tags": [
          "nodepool"
        ],
        "summary": "Patch node pool replicas by node_pool_id",
        "description": "Updates nodes from a node pool by nodepool_uuid.",
        "operationId": "patchNodePool",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "description": "Nodepool's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchNodePoolRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"replicas\":0,\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"replicas\":0,\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}' |  \\\n  http PATCH https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({replicas: 0, auto_scale: {min_replicas: 2, max_replicas: 5}}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes": {
      "get": {
        "tags": [
          "nodepool"
        ],
        "summary": "List nodes from a node pool by node_pool_id",
        "description": "Lists nodes in a node pool by nodepool_uuid.",
        "operationId": "getNodes",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "description": "Nodepool's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/info/flavors": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Lists all available flavors",
        "description": "Lists all available flavors.",
        "operationId": "getFlavors",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v0/info/flavors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/info/flavors\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/info/versions": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Lists all available versions",
        "description": "Lists all available Kubernetes versions.",
        "operationId": "getVersions",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v0/info/versions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/info/versions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/flavors": {
      "get": {
        "tags": [
          "flavor"
        ],
        "summary": "Lists all available flavors",
        "description": "Lists all available flavors.",
        "operationId": "getFlavorsV1",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/flavors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v1/flavors\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/versions": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Lists all available versions",
        "description": "Lists all available Kubernetes versions.",
        "operationId": "getVersionsV1",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/versions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v1/versions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ClusterRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Kubernetes cluster name. The name is primarily intended for idempotence, and must be unique within a namespace. The name cannot be changed.\nThe name must follow the following rules:\n  - must contain a maximum of 63 characters\n  - must contain only lowercase alphanumeric characters or '-'\n  - must start with an alphabetic character\n  - must end with an alphanumeric character\n",
            "example": "cluster-example"
          },
          "version": {
            "type": "string",
            "description": "The native Kubernetes version of the cluster.\nPlease specify the Kubernetes version using the standard \"vX.Y.Z\" format.\n",
            "default": "v1.30.2",
            "example": "v1.30.2"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the Kubernetes cluster.\n",
            "default": "",
            "example": "This is an example cluster."
          },
          "zone": {
            "type": "string",
            "description": "[Deprecated] This parameter is deprecated and its use won't create a cluster at requested zone.\nIdentifier of the zone where the Kubernetes cluster will be located.\n",
            "example": "br-region-zone",
            "deprecated": true
          },
          "enabled_bastion": {
            "type": "boolean",
            "description": "[Deprecated] This parameter is deprecated and its use won't create a bastion server\nEnables the use of a bastion host for secure access to the cluster.\n",
            "default": false,
            "example": false,
            "deprecated": true
          },
          "enabled_server_group": {
            "type": "boolean",
            "description": "Enables the use of a server group with anti-affinity policy during the creation of the cluster and its node pools.\n",
            "default": true,
            "example": false
          },
          "node_pools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateNodePoolRequest"
            },
            "description": "An array representing a set of nodes within a Kubernetes cluster.\n",
            "example": [
              {
                "name": "nodepool-example",
                "flavor": "cloud-k8s.gp1.small",
                "replicas": 3,
                "tags": [
                  "tag-value1"
                ],
                "taints": [
                  {
                    "key": "example-key",
                    "value": "valor1",
                    "effect": "NoSchedule"
                  }
                ],
                "auto_scale": {
                  "min_replicas": 2,
                  "max_replicas": 5
                }
              }
            ]
          },
          "allowed_cidrs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed CIDR blocks for API server access.\n",
            "example": [
              "192.168.1.0/24",
              "10.0.0.0/16"
            ]
          }
        },
        "required": [
          "name"
        ],
        "description": "Request object for the creation of a Kubernetes cluster."
      },
      "CreateClusterResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          },
          "allowed_cidrs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed CIDR blocks for API server access.\n",
            "example": [
              "192.168.1.0/24",
              "10.0.0.0/16"
            ]
          }
        },
        "required": [
          "name",
          "id",
          "status"
        ],
        "description": "Object of the cluster response request."
      },
      "ClustersResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterResponse"
            },
            "description": "List of Kubernetes clusters."
          }
        },
        "required": [
          "results"
        ],
        "description": "Object of the clusters response request."
      },
      "ClusterResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411"
          },
          "name": {
            "type": "string",
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          },
          "version": {
            "type": "string",
            "description": "Native Kubernetes version of the cluster.",
            "example": "v1.22.9"
          },
          "kube_api_server": {
            "$ref": "#/components/schemas/KubeApiServer"
          },
          "description": {
            "type": "string",
            "description": "Description of the Kubernetes cluster.",
            "example": "This is an example cluster"
          },
          "project_id": {
            "type": "string",
            "description": "(Deprecated) Unique identifier of the project where the cluster was provisioned.",
            "example": "0000806e53ec429792a7885e63264411"
          },
          "region": {
            "type": "string",
            "description": "Identifier of the region where the Kubernetes cluster is located.",
            "example": "br-ne-1a"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "description": "Object of the cluster response request."
      },
      "ClusterKubeConfigResponse": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "format": "binary",
            "description": "Object of the kubeconfig file for the Kubernetes cluster.",
            "example": "apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: \u003cca-data\u003e\n    server: https://179.190.33.102:6443\n  name: mke-cluster3\ncontexts:\n- context:\n    cluster: mke-cluster3\n    user: mke-cluster3-admin\n  name: mke-cluster3-admin@mke-cluster3\ncurrent-context: mke-cluster3-admin@mke-cluster3\nkind: Config\npreferences: {}\nusers:\n- name: mke-cluster3-admin\n  user:\n    client-certificate-data: \u003ccertified_data\u003e\n    client-key-data: \u003ckey_data\u003e\n"
          }
        },
        "description": "Object of the kubeconfig response request for the cluster."
      },
      "ClusterByIdResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example"
          },
          "id": {
            "type": "string",
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          },
          "version": {
            "type": "string",
            "description": "Native Kubernetes version of the cluster.",
            "example": "v1.22.9"
          },
          "description": {
            "type": "string",
            "description": "Description of the Kubernetes cluster.",
            "example": "This is an example cluster"
          },
          "project_id": {
            "type": "string",
            "description": "(Deprecated) Unique identifier of the project where the cluster was provisioned.",
            "example": "0000806e53ec429792a7885e63264411"
          },
          "region": {
            "type": "string",
            "description": "Identifier of the region where the Kubernetes cluster is located.",
            "example": "br-ne-1a"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the Kubernetes cluster.",
            "example": "2023-03-01T09:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last modification of the Kubernetes cluster.",
            "example": "2023-03-01T09:10:00Z"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkResponse"
          },
          "controlplane": {
            "$ref": "#/components/schemas/NodePoolsResponse"
          },
          "kube_api_server": {
            "$ref": "#/components/schemas/KubeApiServer"
          },
          "node_pools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodePoolsResponse"
            },
            "description": "Set of nodes in a Kubernetes cluster."
          },
          "addons": {
            "$ref": "#/components/schemas/Addons"
          },
          "allowed_cidrs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed CIDR blocks for API server access.\n",
            "example": [
              "192.168.1.0/24",
              "10.0.0.0/16"
            ]
          }
        },
        "required": [
          "name",
          "id",
          "version",
          "region"
        ],
        "description": "Object of the cluster response request by uuid."
      },
      "CreateNodePoolRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the node pool. The name is primarily for idempotence and must be unique within a namespace. The name cannot be changed.\nThe name must follow the following rules:\n  - Must contain a maximum of 63 characters\n  - Must contain only lowercase alphanumeric characters or '-'\n  - Must start with an alphabetic character\n  - Must end with an alphanumeric character\n",
            "example": "nodepool-example"
          },
          "flavor": {
            "type": "string",
            "description": "Definition of the CPU, RAM, and storage capacity of the nodes.\n\n| Flavor                     | vCPUs | RAM (GB) | Root Disk (GB) |\n|----------------------------|-------|----------|----------------|\n| cloud-k8s.gp1.small        | 2     | 4        | 20             |\n| cloud-k8s.gp1.medium       | 4     | 8        | 50             |\n| cloud-k8s.gp1.large        | 8     | 16       | 100            |\n| cloud-k8s.gp2.small        | 2     | 4        | 300            |\n| cloud-k8s.gp2.large        | 8     | 32       | 300            |\n| cloud-k8s.hm1.medium       | 4     | 16       | 50             |\n| cloud-k8s.i1-c48-r96-d300  | 48    | 96       | 300            |\n| cloud-k8s.i1-c1-r8-d100    | 1     | 8        | 100            |\n| cloud-k8s.i1-c8-r8-d40     | 8     | 8        | 40             |\n| cloud-k8s.i1-c4-r16-d100   | 4     | 16       | 100            |\n| cloud-k8s.i1-c4-r32-d100   | 4     | 32       | 100            |\n| cloud-k8s.i1-c8-r32-d100   | 8     | 32       | 100            |\n| cloud-k8s.i1-c16-r32-d40   | 16    | 32       | 40             |\n| cloud-k8s.i1-c16-r64-d100  | 16    | 64       | 100            |\n| cloud-k8s.i1-c32-r64-d100  | 32    | 64       | 100            |\n| cloud-k8s.i1-c32-r128-d500 | 32    | 128      | 500            |\n",
            "example": "cloud-k8s.gp1.small"
          },
          "replicas": {
            "type": "integer",
            "description": "Number of replicas of the nodes in the node pool.",
            "default": 1,
            "example": 3
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the list of tags applied to the node pool.",
              "example": "tag-value1"
            },
            "description": "List of tags applied to the node pool."
          },
          "taints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "description": "Property associating a set of nodes."
          },
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScale"
          }
        },
        "required": [
          "name",
          "flavor",
          "replicas"
        ],
        "description": "Object of the node pool request"
      },
      "PatchNodePoolRequest": {
        "type": "object",
        "properties": {
          "replicas": {
            "type": "integer",
            "description": "Number of replicas of the nodes in the node pool."
          },
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScale"
          }
        },
        "description": "Object of the node pool modification request."
      },
      "PatchClusterRequest": {
        "type": "object",
        "properties": {
          "allowed_cidrs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Cluster fields to be patched"
      },
      "PatchClusterResponse": {
        "type": "object",
        "properties": {
          "allowed_cidrs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Object for cluster patch response"
      },
      "KubeApiServer": {
        "type": "object",
        "properties": {
          "disable_api_server_fip": {
            "type": "boolean",
            "description": "Enables or disables the use of Floating IP on the API Server.",
            "default": false,
            "example": true
          },
          "fixed_ip": {
            "type": "string",
            "description": "Fixed IP configured for the Kubernetes API Server.",
            "example": "172.100.10.1"
          },
          "floating_ip": {
            "type": "string",
            "description": "Floating IP created for the Kubernetes API Server.",
            "example": "172.100.10.1"
          },
          "port": {
            "type": "integer",
            "description": "Port used by the Kubernetes API Server.",
            "example": 6443
          }
        },
        "description": "Information about the Kubernetes API Server of the cluster."
      },
      "NodePoolsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Node pool's UUID.",
            "example": "2cc6f625-7d67-4ed2-8c5e-24e5b40b951b"
          },
          "name": {
            "type": "string",
            "description": "Node pool name",
            "example": "nodepool-example"
          },
          "instance_template": {
            "$ref": "#/components/schemas/InstanceTemplate"
          },
          "replicas": {
            "type": "integer",
            "description": "Number of replicas of the nodes in the node pool.",
            "example": 3
          },
          "zone": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the list of availability zones for creating the Kubernetes cluster.",
              "example": "br-ne-1b"
            },
            "description": "Availability zone for creating the Kubernetes cluster.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the list of tags applied to the node pool.",
              "nullable": true,
              "example": "tag-example"
            },
            "description": "List of tags applied to the node pool."
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "key1": "value1"
            }
          },
          "taints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "description": "Property for associating a set of nodes."
          },
          "securityGroups": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the security groups defining rules allowing network traffic in the worker node pool.",
              "example": "security-group-name"
            },
            "description": "Name of the security group to define rules allowing network traffic in the worker node pool."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation of the Kubernetes cluster.",
            "example": "2023-03-01T09:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last change to the Kubernetes cluster.",
            "example": "2023-03-01T09:10:00Z"
          },
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScale"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        },
        "required": [
          "id",
          "name",
          "instance_template",
          "replicas",
          "zone",
          "labels",
          "auto_scale",
          "status"
        ],
        "description": "Object of the node pool response."
      },
      "ClusterNodePoolsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodePoolsResponse"
            },
            "description": "List of node pools."
          }
        },
        "required": [
          "results"
        ],
        "description": "Object of the node pool response in the cluster."
      },
      "NodesResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeResponse"
            },
            "description": "List of nodes."
          }
        },
        "required": [
          "results"
        ],
        "description": "Object of the node response."
      },
      "NodeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID identifier to uniquely identify the node.",
            "example": "77b3a951-dc2c-4802-a246-63a3c7f7ecac"
          },
          "name": {
            "type": "string",
            "description": "Name of the node.",
            "example": "node-example"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the node.",
            "example": "namespace-example"
          },
          "cluster_name": {
            "type": "string",
            "description": "Name of the cluster to which the node belongs.",
            "example": "cluster-example"
          },
          "nodepool_name": {
            "type": "string",
            "description": "Name of the node pool to which the node belongs.",
            "example": "nodepool-example"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the node.",
            "example": "2023-03-01T09:00:00Z"
          },
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "annotation-key1": "value1"
            }
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "label-key1": "value1"
            }
          },
          "taints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "description": "Property for associating a set of nodes."
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeAddress"
            },
            "description": "List of addresses accessible to the node."
          },
          "flavor": {
            "type": "string",
            "description": "Name of the flavor.",
            "example": "cloud-k8s.gp1.small"
          },
          "node_image": {
            "type": "string",
            "description": "Operating system image run by the node.",
            "example": "ubuntu-2004-kube-v1.22.9-v1"
          },
          "zone": {
            "type": "string",
            "description": "Identifier of the region where the node is located.",
            "nullable": true,
            "example": "br-ne-1c"
          },
          "infrastructure": {
            "$ref": "#/components/schemas/NodeInfrastructure"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          }
        },
        "required": [
          "id",
          "name",
          "namespace",
          "cluster_name",
          "nodepool_name",
          "created_at",
          "annotations",
          "labels",
          "taints",
          "addresses",
          "flavor",
          "node_image",
          "zone",
          "infrastructure",
          "status"
        ],
        "description": "Object of the node response request."
      },
      "NodeAddress": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The node's address",
            "example": "address-example"
          },
          "type": {
            "type": "string",
            "description": "Type of the node's address, one of Hostname, ExternalIP, or InternalIP.\n**HostName** - The host name reported by the node's kernel. Can be overridden through the kubelet parameter --hostname-override.\n**ExternalIP** - Typically, the node's IP address that is externally routable (available outside the cluster).\n**InternalIP** - Typically, the node's IP address that is routable only within the cluster.\n",
            "example": "Hostname"
          }
        },
        "required": [
          "type",
          "address"
        ],
        "description": "Information for the node's address."
      },
      "NodeInfrastructure": {
        "type": "object",
        "properties": {
          "architecture": {
            "type": "string",
            "description": "Architecture reported by the node.",
            "example": "amd64"
          },
          "containerRuntimeVersion": {
            "type": "string",
            "description": "Version of Container Runtime reported by the node through the remote runtime API.",
            "example": "containerd://1.6.2"
          },
          "kernelVersion": {
            "type": "string",
            "description": "Kernel version reported by the node from 'uname -r'.",
            "example": "5.4.0-122-generic"
          },
          "kubeProxyVersion": {
            "type": "string",
            "description": "Version of KubeProxy reported by the node.",
            "example": "v1.22.9"
          },
          "kubeletVersion": {
            "type": "string",
            "description": "Version of Kubelet reported by the node.",
            "example": "v1.22.9"
          },
          "operatingSystem": {
            "type": "string",
            "description": "Operating system reported by the node.",
            "example": "linux"
          },
          "osImage": {
            "type": "string",
            "description": "OS image reported by the node from /etc/os-release.",
            "example": "Ubuntu 20.04.4 LTS"
          },
          "allocatable": {
            "$ref": "#/components/schemas/NodeResources"
          },
          "capacity": {
            "$ref": "#/components/schemas/NodeResources"
          }
        },
        "required": [
          "architecture",
          "containerRuntimeVersion",
          "kernelVersion",
          "kubeProxyVersion",
          "kubeletVersion",
          "operatingSystem",
          "osImage",
          "allocatable",
          "capacity"
        ],
        "description": "Information about the node's infrastructure."
      },
      "NodeResources": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "string",
            "description": "Number of CPUs.",
            "example": "2"
          },
          "ephemeral_storage": {
            "type": "string",
            "description": "Amount of ephemeral storage.",
            "example": "18859814062"
          },
          "hugepages_1Gi": {
            "type": "string",
            "description": "Allocation and consumption of 1Gi pages."
          },
          "hugepages_2Mi": {
            "type": "string",
            "description": "Allocation and consumption of 2Mi pages."
          },
          "memory": {
            "type": "string",
            "description": "Amount of memory.",
            "example": "3923640Ki"
          },
          "pods": {
            "type": "string",
            "description": "Number of pods.",
            "example": "110"
          }
        },
        "required": [
          "cpu",
          "ephemeral_storage",
          "hugepages_1Gi",
          "hugepages_2Mi",
          "memory",
          "pods"
        ],
        "description": "Information about node resources."
      },
      "Status": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "Current state of the node pool or control plane.\n\n| Component       | Possible States                                           |\n|-----------------|-----------------------------------------------------------|\n| Node pool       | ScalingUp, ScalingDown, Pending, Running, Failed, Unknown |\n| Control Plane   | ScalingUp, ScalingDown, Pending, Running, Failed, Unknown |\n",
            "example": "Pending"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Messages returned by the control planes or node pools.\n",
              "example": "Ready"
            },
            "description": "Detailed message about the status of the node pool or control plane.\n"
          }
        },
        "required": [
          "state",
          "messages"
        ],
        "description": "Details about the status of the node pool or control plane.\n"
      },
      "SingleStatus": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "Current state of the cluster or node.\n\n| Component | Possible States                              |\n|-----------|---------------------------------------------|\n| Cluster   | Pending, Provisioning, Running, Provisioned, Terminating, Deleting, Failed |\n| Node      | Pending, Provisioning, Provisioned, Running, Deleting, Failed, Unknown   |\n",
            "example": "Pending"
          },
          "message": {
            "type": "string",
            "description": "Detailed message about the status of the cluster or node.\n",
            "example": "Ready"
          }
        },
        "required": [
          "state",
          "message"
        ],
        "description": "Details about the status of the Kubernetes cluster or node.\n"
      },
      "Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier corresponding to the HTTP status code returned.\n"
          },
          "message": {
            "type": "string",
            "description": "Detailed message with information about the error.\n"
          }
        },
        "required": [
          "id",
          "message"
        ],
        "description": "Details about the error in the Kubernetes cluster and/or node pool.\n"
      },
      "NetworkResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Nodepool's UUID.",
            "example": "7c24eb01-9423-4f09-a2d2-99ba5df01411"
          },
          "cidr": {
            "type": "string",
            "description": "Available IP addresses used for provisioning nodes in the cluster.\n",
            "example": "00.0.0.0/00"
          },
          "name": {
            "type": "string",
            "description": "Name of the node pool.",
            "example": "k8s-clusterapi-cluster-example"
          },
          "subnet_id": {
            "type": "string",
            "description": "Identifier of the internal subnet where the cluster will be provisioned.\n",
            "example": "c5f750a0-a032-477e-a23a-bcffab8b0707"
          }
        },
        "required": [
          "uuid",
          "cidr",
          "name",
          "subnet_id"
        ],
        "description": "Response object for the Kubernetes cluster network resource request.\n"
      },
      "Addons": {
        "type": "object",
        "properties": {
          "loadbalance": {
            "type": "string",
            "description": "Flag indicating whether the load balancer service is enabled/disabled in the cluster.\n"
          },
          "volume": {
            "type": "string",
            "description": "Flag indicating whether the storage class service is configured by default.\n"
          },
          "secrets": {
            "type": "string",
            "description": "Native Kubernetes secret to be included in the cluster during provisioning.\n"
          }
        },
        "required": [
          "loadbalance",
          "volume",
          "secrets"
        ],
        "description": "Object representing addons that extend the functionality of the Kubernetes cluster.\n"
      },
      "AutoScale": {
        "type": "object",
        "properties": {
          "min_replicas": {
            "type": "integer",
            "minimum": 1,
            "description": "Minimum number of replicas for autoscaling. If not provided, or if the value is equal to or less than zero, the autoscaler value will be assumed based on the \"replicas\" field.\n",
            "default": 1,
            "example": 2
          },
          "max_replicas": {
            "type": "integer",
            "minimum": 1,
            "description": "Maximum number of replicas for autoscaling. If not provided, or if the value is equal to or less than zero, the autoscaler value will be assumed based on the \"replicas\" field.\n",
            "default": 1,
            "example": 5
          }
        },
        "required": [
          "min_replicas",
          "max_replicas"
        ],
        "description": "Object specifying properties for updating workload resources in the Kubernetes cluster.\n"
      },
      "Taint": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the taint to be applied to the node.",
            "example": "example-key"
          },
          "value": {
            "type": "string",
            "description": "Value corresponding to the taint key.",
            "example": "value1"
          },
          "effect": {
            "type": "string",
            "enum": [
              "NoSchedule",
              "PreferNoSchedule",
              "NoExecute"
            ],
            "description": "The effect of the taint on pods that do not tolerate the taint.\n- **NoSchedule**: Prevents new pods from being scheduled on the node, unless they tolerate the taint. Allows all existing pods to continue running.\n- **PreferNoSchedule**: Similar to NoSchedule, but attempts not to schedule new pods on the node, rather than completely prohibiting new pod scheduling on the node.\n- **NoExecute**: Removes all already running pods that do not tolerate the taint.\n",
            "example": "NoSchedule"
          }
        },
        "required": [
          "key",
          "value",
          "effect"
        ]
      },
      "InstanceTemplate": {
        "type": "object",
        "properties": {
          "flavor": {
            "$ref": "#/components/schemas/Flavor"
          },
          "node_image": {
            "type": "string",
            "description": "Operating system image running on each node.",
            "example": "ubuntu-2004-kube-v1.22.9-v1"
          },
          "disk_size": {
            "type": "integer",
            "description": "Size of the disk attached to each node."
          },
          "disk_type": {
            "type": "string",
            "description": "Type of disk attached to each node."
          }
        },
        "required": [
          "flavor",
          "node_image",
          "disk_size",
          "disk_type"
        ],
        "description": "Template for the instance object used to create machine instances and managed instance groups.\n"
      },
      "Flavor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Flavor.",
            "example": "cloud-k8s.gp1.small"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the Flavor.",
            "default": "",
            "example": "c777eaa7-d67c-46f4-9e4f-232bc9b67b58"
          },
          "vcpu": {
            "type": "integer",
            "description": "Number of available vCPUs.",
            "default": 0,
            "example": 2
          },
          "ram": {
            "type": "integer",
            "description": "Amount of RAM, measured in MB.",
            "default": 0,
            "example": 4096
          },
          "size": {
            "type": "integer",
            "description": "Amount of disk space, measured in GB.",
            "default": 0,
            "example": 20
          }
        },
        "required": [
          "name",
          "id",
          "vcpu",
          "ram",
          "size"
        ],
        "description": "Definition of CPU capacity, RAM, and storage for nodes."
      },
      "FlavorWithSku": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Flavor.",
            "example": "cloud-k8s.gp1.small"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the Flavor.",
            "default": "",
            "example": "c777eaa7-d67c-46f4-9e4f-232bc9b67b58"
          },
          "vcpu": {
            "type": "integer",
            "description": "Number of available vCPUs.",
            "default": 0,
            "example": 2
          },
          "ram": {
            "type": "integer",
            "description": "Amount of RAM, measured in MB.",
            "default": 0,
            "example": 4096
          },
          "size": {
            "type": "integer",
            "description": "Amount of disk space, measured in GB.",
            "default": 0,
            "example": 20
          },
          "sku": {
            "type": "string",
            "description": "SKU associated with the Flavor.",
            "example": "sku-1234"
          }
        },
        "required": [
          "name",
          "id",
          "vcpu",
          "ram",
          "size",
          "sku"
        ],
        "description": "Definition of CPU capacity, RAM, and storage for nodes."
      },
      "FlavorsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorsAvailable"
            }
          }
        },
        "required": [
          "results"
        ],
        "description": "Response object for the Flavor request."
      },
      "FlavorsAvailable": {
        "type": "object",
        "properties": {
          "nodepool": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorWithSku"
            },
            "description": "Lists of available flavors for the Node Pools."
          },
          "controlplane": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorWithSku"
            },
            "description": "Lists of available flavors for the Control Plane."
          }
        },
        "required": [
          "nodepool",
          "controlplane"
        ],
        "description": "Lists of available flavors provided by the application."
      },
      "VersionsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version"
            },
            "description": "Lists of Kubernetes cluster versions."
          }
        },
        "required": [
          "results"
        ],
        "description": "Response object for the Version request."
      },
      "Version": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Kubernetes version.",
            "example": "v1.22.9"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the version is deprecated.",
            "example": false
          }
        },
        "required": [
          "version",
          "deprecated"
        ],
        "description": "Object representing a Kubernetes version."
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "OAuth2": {
        "type": "oauth2",
        "description": "OAuth2 by IDPA (Identity Provider Authentication)  \n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/auth",
            "tokenUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/token",
            "scopes": {
              "mke.read": "Read information about IaaS resources",
              "mke.write": "Write information about IaaS resources"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "cluster",
      "description": "Endpoints related to the creation, listing, deletion, and retrieval of the kubeconfig for a Kubernetes cluster."
    },
    {
      "name": "nodepool",
      "description": "Endpoints related to the creation, listing of nodepools and nodes, updating, and deletion of nodepools for a Kubernetes cluster."
    },
    {
      "name": "info",
      "description": "Endpoints related to listing available flavors (resource configurations) and Kubernetes versions for a Kubernetes cluster."
    },
    {
      "name": "flavor",
      "description": "Endpoints related to listing available flavors for a Kubernetes cluster."
    },
    {
      "name": "version",
      "description": "Endpoints related to listing available Kubernetes versions for a Kubernetes cluster."
    }
  ]
}