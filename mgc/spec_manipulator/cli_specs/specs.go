package openapi

import (
	"os"
	"syscall"

	"magalu.cloud/core/dataloader"
)

type embedLoader map[string][]byte

func GetEmbedLoader() dataloader.Loader {
	return embedLoaderInstance
}
func (f embedLoader) Load(name string) ([]byte, error) {
	if data, ok := embedLoaderInstance[name]; ok {
		return data, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: syscall.ENOENT}
}
func (f embedLoader) String() string {
	return "embedLoader"
}

var embedLoaderInstance = embedLoader{
	"network.jaxyendy.openapi.json":         ([]byte)("{
  "openapi": "3.1.0",
  "info": {
    "title": "vpc-api-product",
    "description": "APIs referentes ao produto de VPC",
    "contact": {
      "name": "Tribo IAAS Cloud",
      "url": "https://github.com/luizalabs",
      "email": "thullyo.cunha@luizalabs.com"
    },
    "version": "1.124.1"
  },
  "paths": {
    "/v0/healthcheck": {
      "get": {
        "tags": [
          "healthcheck"
        ],
        "summary": "Healthcheck",
        "description": "Check api status",
        "operationId": "healthcheck_v0_healthcheck_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Healthcheck"
                }
              }
            }
          }
        }
      }
    },
    "/v0/ports": {
      "get": {
        "tags": [
          "port"
        ],
        "summary": "Details of a Port list",
        "description": "Return a detailed list of ports from the provided tenant_id",
        "operationId": "portsDetailedList",
        "parameters": [
          {
            "name": "port_id_list",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {},
              "title": "Port Id List",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortResponse"
                  },
                  "title": "Response Portsdetailedlist"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "port"
        ],
        "summary": "Create Port VPC Default",
        "description": "Create a Port on the default VPC. Uses VPC default in the provided x-tenant-id. You can provide a list of security_groups_id or subnets.",
        "operationId": "createPortVpcDefault",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          },
          {
            "name": "x-zone",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Zone"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": false,
        "x-mgc-hidden": true
      }
    },
    "/v0/vpcs/{vpc_id}/ports": {
      "get": {
        "tags": [
          "port"
        ],
        "summary": "List Ports",
        "description": "Returns a list of ports for a provided vpc_id and x-tenant-id. The list will be paginated, it means you can easily find what you need just setting the page number(_offset) and the quantity of items per page(_limit). The level of detail can also be set",
        "operationId": "listPorts",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "ID of VPC to list ports",
            "required": true,
            "schema": {
              "title": "vpc_id",
              "description": "ID of VPC to list ports"
            }
          },
          {
            "name": "detailed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Detailed",
              "default": true
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "description": "Page Number",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Page Number",
              "minimum": 1,
              "description": "Page Number",
              "default": 1
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "description": "Items Per Page",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Items Per Page",
              "minimum": 1,
              "description": "Items Per Page",
              "default": 10
            }
          },
          {
            "name": "port_id_list",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {},
              "title": "Port Id List",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/PortsListSimplified"
                    },
                    {
                      "$ref": "#/components/schemas/PortsList"
                    }
                  ],
                  "title": "Response Listports"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "port"
        ],
        "summary": "Create Port",
        "description": "Create a Port with provided vpc_id and x-tenant-id. You can provide a list of security_groups_id or subnets",
        "operationId": "createPort",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "ID of the VPC to create port",
            "required": true,
            "schema": {
              "title": "vpc_id",
              "description": "ID of the VPC to create port"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          },
          {
            "name": "x-zone",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Zone"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PortCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/ports/{port_id}": {
      "get": {
        "tags": [
          "port"
        ],
        "summary": "Port Details",
        "description": "Return a port details from the provided tenant_id",
        "operationId": "portDetails",
        "parameters": [
          {
            "name": "port_id",
            "in": "path",
            "required": true,
            "schema": {
              "title": "Port Id"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "port"
        ],
        "summary": "Delete Port",
        "description": "Delete a port from the provided tenant_id",
        "operationId": "deletePort",
        "parameters": [
          {
            "name": "port_id",
            "in": "path",
            "description": "ID of the Port to delete",
            "required": true,
            "schema": {
              "title": "port_id",
              "description": "ID of the Port to delete"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/ports/all": {
      "delete": {
        "tags": [
          "port"
        ],
        "summary": "Delete Port All",
        "description": "Delete a all ports from the provided tenant_id",
        "operationId": "deleteAllPorts",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortDeletedAllResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": false,
        "x-mgc-hidden": true
      }
    },
    "/v0/ports/{port_id}/attach/{security_group_id}": {
      "post": {
        "tags": [
          "port"
        ],
        "summary": "Attach Security Group",
        "description": "Attach a Security Group to a Port with provided port_id, security_group_id, x-tenant-id of an specific project type",
        "operationId": "attachSecurityGroup",
        "parameters": [
          {
            "name": "port_id",
            "in": "path",
            "description": "ID of the Port to attach security group",
            "required": true,
            "schema": {
              "title": "port_id",
              "description": "ID of the Port to attach security group"
            }
          },
          {
            "name": "security_group_id",
            "in": "path",
            "description": "ID of the Security Group to attach",
            "required": true,
            "schema": {
              "title": "security_group_id",
              "description": "ID of the Security Group to attach"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/ports/{port_id}/detach/{security_group_id}": {
      "post": {
        "tags": [
          "port"
        ],
        "summary": "Detach Security Group",
        "description": "Detach a Security Group to a Port with provided port_id, security_group_id, x-tenant-id of an specific project type",
        "operationId": "detachSecurityGroup",
        "parameters": [
          {
            "name": "port_id",
            "in": "path",
            "description": "ID of the Port to detach security group",
            "required": true,
            "schema": {
              "title": "port_id",
              "description": "ID of the Port to detach security group"
            }
          },
          {
            "name": "security_group_id",
            "in": "path",
            "description": "ID of the Security Group to detach",
            "required": true,
            "schema": {
              "title": "security_group_id",
              "description": "ID of the Security Group to detach"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/{vpc_id}/public_ips": {
      "get": {
        "tags": [
          "public_ip"
        ],
        "summary": "List Public IPs",
        "description": "Returns a list of Public IPs for a provided vpc_id",
        "operationId": "ListPublicIps",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "Id of the VPC to list the Public IPs in",
            "required": true,
            "schema": {
              "title": "Vpc ID",
              "description": "Id of the VPC to list the Public IPs in"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "public_ip"
        ],
        "summary": "Create Public IP",
        "description": "Create async Public IP in a VPC with provided vpc_id and x_tenant_id",
        "operationId": "createPublicIp",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "Id of the VPC to create the Public IP in",
            "required": true,
            "schema": {
              "title": "Vpc ID",
              "description": "Id of the VPC to create the Public IP in"
            }
          },
          {
            "name": "validate_quota",
            "in": "query",
            "description": "Validate the quota before creating the Public IP",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "validateQuota",
              "description": "Validate the quota before creating the Public IP",
              "default": true
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "wait",
              "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
              "default": true
            }
          },
          {
            "name": "wait_timeout",
            "in": "query",
            "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "waitTimeout",
              "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
              "default": 120
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicIpCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/public_ips/{public_ip_id}": {
      "get": {
        "tags": [
          "public_ip"
        ],
        "summary": "Public IP Details",
        "description": "Return a Public IP details",
        "operationId": "publicIpDetails",
        "parameters": [
          {
            "name": "public_ip_id",
            "in": "path",
            "description": "Id of the Public IP to retrieve",
            "required": true,
            "schema": {
              "title": "Public IP ID",
              "description": "Id of the Public IP to retrieve"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpDb"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "public_ip"
        ],
        "summary": "Delete Public IP",
        "description": "Delete a Public IP from the provided tenant_id",
        "operationId": "deletePublicIp",
        "parameters": [
          {
            "name": "public_ip_id",
            "in": "path",
            "description": "Id of the Public IP to delete",
            "required": true,
            "schema": {
              "title": "Public IP ID",
              "description": "Id of the Public IP to delete"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/public_ips/{public_ip_id}/attach/{port_id}": {
      "post": {
        "tags": [
          "public_ip"
        ],
        "summary": "Attach Public IP",
        "description": "Attach a Public IP to a Port",
        "operationId": "attachPublicIp",
        "parameters": [
          {
            "name": "public_ip_id",
            "in": "path",
            "description": "Id of the Public IP to attach port to",
            "required": true,
            "schema": {
              "title": "Public IP ID",
              "description": "Id of the Public IP to attach port to"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "Id of the Port to attach the Public IP",
            "required": true,
            "schema": {
              "title": "Port ID",
              "description": "Id of the Port to attach the Public IP"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/public_ips/{public_ip_id}/detach/{port_id}": {
      "post": {
        "tags": [
          "public_ip"
        ],
        "summary": "Detach Public IP",
        "description": "Detach a Public IP to a Port",
        "operationId": "detachPublicIp",
        "parameters": [
          {
            "name": "public_ip_id",
            "in": "path",
            "description": "Id of the Public IP to detach port to",
            "required": true,
            "schema": {
              "title": "Public IP ID",
              "description": "Id of the Public IP to detach port to"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "description": "Id of the Port to detach the Public IP",
            "required": true,
            "schema": {
              "title": "Port ID",
              "description": "Id of the Port to detach the Public IP"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/public_ips": {
      "get": {
        "tags": [
          "public_ip"
        ],
        "summary": "Tenant's public IP list",
        "description": "Return a tenant's public ip list",
        "operationId": "tenantPublicIpList",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpsList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/usage": {
      "get": {
        "tags": [
          "quotas"
        ],
        "summary": "List usage quotas",
        "description": "Return a list of selected usage quotas from a provided tenant",
        "operationId": "usageQuotasList",
        "parameters": [
          {
            "name": "quota_slug",
            "in": "query",
            "description": "Service to check quota usage",
            "required": true,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SlugQuotas"
                }
              ],
              "title": "quota_slug",
              "description": "Service to check quota usage"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuotaResult"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": false,
        "x-mgc-hidden": true
      }
    },
    "/v0/security_groups/{security_group_id}/rules": {
      "get": {
        "tags": [
          "rule"
        ],
        "summary": "List Rules",
        "description": "Returns a list of rules for a provided security_group_id",
        "operationId": "listRules",
        "parameters": [
          {
            "name": "security_group_id",
            "in": "path",
            "description": "Id of the Security Group",
            "required": true,
            "schema": {
              "title": "Security Group ID",
              "description": "Id of the Security Group"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RulesList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "rule"
        ],
        "summary": "Create Rule",
        "description": "Create a Rule async, returning its ID. To monitor the creation progress, please check the status in the service message or implement polling.Either a remote_ip_prefix or a remote_group_id can be specified.With remote_ip_prefix, all IPs that match the criteria will be allowed.With remote_group_id, only the specified security group is allowed to communicatefollowing the specified protocol, direction and port_range_min/max",
        "operationId": "createRule",
        "parameters": [
          {
            "name": "security_group_id",
            "in": "path",
            "description": "Id of the Security Group",
            "required": true,
            "schema": {
              "title": "Security Group ID",
              "description": "Id of the Security Group"
            }
          },
          {
            "name": "validate_quota",
            "in": "query",
            "description": "Validate the quota before creating Rule",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "validateQuota",
              "description": "Validate the quota before creating Rule",
              "default": true
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "wait",
              "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
              "default": true
            }
          },
          {
            "name": "wait_timeout",
            "in": "query",
            "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "waitTimeout",
              "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
              "default": 120
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RuleCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/rules/{rule_id}": {
      "get": {
        "tags": [
          "rule"
        ],
        "summary": "Rule Details",
        "description": "Return a rule details",
        "operationId": "ruleDetails",
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "description": "Id of the Rule",
            "required": true,
            "schema": {
              "title": "Rule ID",
              "description": "Id of the Rule"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RuleResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "rule"
        ],
        "summary": "Delete a Rule",
        "description": "Delete a rule from the provided tenant_id",
        "operationId": "deleteRule",
        "parameters": [
          {
            "name": "rule_id",
            "in": "path",
            "description": "Id of the Rule",
            "required": true,
            "schema": {
              "title": "Rule ID",
              "description": "Id of the Rule"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/security_groups/default": {
      "post": {
        "tags": [
          "security_group"
        ],
        "summary": "Create Security Group Default",
        "description": "Create a Security Group Default",
        "operationId": "createSecurityGroupDefault",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": false,
        "x-mgc-hidden": true
      }
    },
    "/v0/security_groups": {
      "get": {
        "tags": [
          "security_group"
        ],
        "summary": "List Security Groups by Tenant",
        "description": "Returns a list of security groups for a provided tenant_id",
        "operationId": "listSecurityGroupByTenant",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupListEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "security_group"
        ],
        "summary": "Create Security Group",
        "description": "Create a Security Group",
        "operationId": "createSecurityGroup",
        "parameters": [
          {
            "name": "validate_quota",
            "in": "query",
            "description": "Validate the quota before creating Security Group",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "validateQuota",
              "description": "Validate the quota before creating Security Group",
              "default": true
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "wait",
              "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
              "default": true
            }
          },
          {
            "name": "wait_timeout",
            "in": "query",
            "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "waitTimeout",
              "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
              "default": 120
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityGroupCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/{vpc_id}/security_groups": {
      "get": {
        "tags": [
          "security_group"
        ],
        "summary": "List Security Groups",
        "description": "Returns a list of security groups for a provided vpc_id",
        "operationId": "listSecurityGroup",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "Id of the VPC to create the Security Group in",
            "required": true,
            "schema": {
              "title": "Vpc ID",
              "description": "Id of the VPC to create the Security Group in"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupListEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-hidden": true
      },
      "post": {
        "tags": [
          "security_group"
        ],
        "summary": "Create Security Group",
        "description": "Create a Security Group",
        "operationId": "createSecurityGroupDeprecated",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "Id of the vpc to create the security group in",
            "required": true,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "VPC Id",
              "description": "Id of the vpc to create the security group in"
            }
          },
          {
            "name": "wait",
            "in": "query",
            "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "title": "wait",
              "description": "The request will be asynchronous. The wait parameter tells the API that you want the request to simulate synchronous behavior (to maintain endpoint compatibility). You can set an approximate timeout with the waitTimeout parameter",
              "default": true
            }
          },
          {
            "name": "wait_timeout",
            "in": "query",
            "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "waitTimeout",
              "description": "the approximate time in seconds you want to wait when simulating the request as synchronous (only works with wait=true)",
              "default": 120
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SecurityGroupCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true,
        "x-viveiro": true,
        "x-mgc-hidden": true
      }
    },
    "/v0/security_groups/{security_group_id}": {
      "get": {
        "tags": [
          "security_group"
        ],
        "summary": "Security Group Details",
        "description": "Return a security group details",
        "operationId": "securityGroupDetails",
        "parameters": [
          {
            "name": "security_group_id",
            "in": "path",
            "description": "Id of the security group to detail",
            "required": true,
            "schema": {
              "title": "Security Group ID",
              "description": "Id of the security group to detail"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupDetailEvent"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "security_group"
        ],
        "summary": "Delete a security group",
        "description": "Delete a security group from the provided tenant_id",
        "operationId": "deleteSecurityGroup",
        "parameters": [
          {
            "name": "security_group_id",
            "in": "path",
            "description": "Id of the security group to delete",
            "required": true,
            "schema": {
              "title": "Security Group ID",
              "description": "Id of the security group to delete"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/security_groups_all": {
      "delete": {
        "tags": [
          "security_group"
        ],
        "summary": "Delete all security groups",
        "description": "Delete all security groups from the provided tenant_id",
        "operationId": "deleteAllSecurityGroups",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SecurityGroupDeletedAllResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": false,
        "x-mgc-hidden": true
      }
    },
    "/v0/vpcs/{vpc_id}/subnets": {
      "get": {
        "tags": [
          "subnets"
        ],
        "summary": "List Subnets",
        "description": "Returns a list of subnets for a provided vpc_id",
        "operationId": "listSubnets",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "Id of the VPC to list Subnets",
            "required": true,
            "schema": {
              "title": "Vpc Id",
              "description": "Id of the VPC to list Subnets"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "subnets"
        ],
        "summary": "Create Subnet",
        "description": "Create a Subnet",
        "operationId": "createSubnet",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "Id of the VPC to create Subnet",
            "required": true,
            "schema": {
              "title": "Vpc Id",
              "description": "Id of the VPC to create Subnet"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          },
          {
            "name": "x-zone",
            "in": "header",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "X-Zone"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubnetCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/subnets/{subnet_id}": {
      "get": {
        "tags": [
          "subnets"
        ],
        "summary": "Subnet Details",
        "description": "Returns a subnet details",
        "operationId": "subnetDetails",
        "parameters": [
          {
            "name": "subnet_id",
            "in": "path",
            "description": "Id of the Subnet to detail",
            "required": true,
            "schema": {
              "title": "Subnet Id",
              "description": "Id of the Subnet to detail"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetResponseDetail"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "subnets"
        ],
        "summary": "Delete a Subnet",
        "description": "Delete a subnet from the provided tenant_id",
        "operationId": "deleteSubnet",
        "parameters": [
          {
            "name": "subnet_id",
            "in": "path",
            "description": "Id of the Subnet to delete",
            "required": true,
            "schema": {
              "title": "Subnet Id",
              "description": "Id of the Subnet to delete"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "patch": {
        "tags": [
          "subnets"
        ],
        "summary": "Update Subnet",
        "description": "Update a subnet from the provided tenant_id",
        "operationId": "updateSubnet",
        "parameters": [
          {
            "name": "subnet_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Subnet Id"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SubnetPatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubnetResponseId"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/default": {
      "post": {
        "tags": [
          "vpc"
        ],
        "summary": "Create Vpc Default",
        "operationId": "create_vpc_default_v0_vpcs_default_post",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": false,
        "x-mgc-hidden": true
      }
    },
    "/v0/vpcs": {
      "get": {
        "tags": [
          "vpc"
        ],
        "summary": "List VPC",
        "description": "Returns a list of VPCs for a provided tenant_id",
        "operationId": "listVpcs",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcResponseList"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "vpc"
        ],
        "summary": "Create VPC",
        "description": "Create a VPC",
        "operationId": "createVpc",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VpcCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcCreateResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/{vpc_id}": {
      "get": {
        "tags": [
          "vpc"
        ],
        "summary": "VPC Details",
        "description": "Return a VPC details",
        "operationId": "vpcDetails",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "ID of the VPC to detail",
            "required": true,
            "schema": {
              "title": "VPC Id",
              "description": "ID of the VPC to detail"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "vpc"
        ],
        "summary": "Delete VPC",
        "description": "Delete a VPC from the provided tenant_id",
        "operationId": "deleteVpc",
        "parameters": [
          {
            "name": "vpc_id",
            "in": "path",
            "description": "ID of the VPC to delete",
            "required": true,
            "schema": {
              "title": "VPC Id",
              "description": "ID of the VPC to delete"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v0/vpcs/all": {
      "delete": {
        "tags": [
          "vpc"
        ],
        "summary": "Delete all VPCs",
        "description": "Delete all VPCs from the provided tenant_id",
        "operationId": "deleteAllVpcs",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VpcDeletedAllResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": false,
        "x-mgc-hidden": true
      }
    },
    "/v0/worker/public_ips/{public_ip_id}": {
      "patch": {
        "tags": [
          "worker_public_ips"
        ],
        "summary": "Update Public Ip",
        "description": "Update a public ip from the provided tenant_id",
        "operationId": "updatePublicIpWorker",
        "parameters": [
          {
            "name": "public_ip_id",
            "in": "path",
            "description": "Id of the public ip to update",
            "required": true,
            "schema": {
              "title": "Public Ip Id",
              "description": "Id of the public ip to update"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant id of the project",
            "required": true,
            "schema": {
              "title": "X-Tenant-Id",
              "description": "Tenant id of the project"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicIpUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PublicIpResponseId"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": false,
        "x-mgc-hidden": true
      }
    }
  },
  "components": {
    "schemas": {
      "AddInterfaceRequest": {
        "type": "object",
        "properties": {
          "nic_vpc_id": {
            "type": "string",
            "title": "Nic Vpc Id"
          }
        },
        "title": "AddInterfaceRequest",
        "required": [
          "nic_vpc_id"
        ],
        "example": {
          "nic_vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "DhcpPoolStr": {
        "type": "object",
        "properties": {
          "start": {
            "type": "string",
            "title": "Start"
          },
          "end": {
            "type": "string",
            "title": "End"
          }
        },
        "title": "DhcpPoolStr",
        "required": [
          "start",
          "end"
        ]
      },
      "HTTPValidationError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail"
          }
        },
        "title": "HTTPValidationError"
      },
      "Healthcheck": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "title": "Healthcheck",
        "required": [
          "status"
        ],
        "example": {
          "status": "OK"
        }
      },
      "IpAddress": {
        "type": "object",
        "properties": {
          "ip_address": {
            "type": "string",
            "title": "Ip Address"
          },
          "subnet_id": {
            "type": "string",
            "title": "Subnet Id"
          }
        },
        "title": "IpAddress",
        "required": [
          "ip_address",
          "subnet_id"
        ],
        "example": {
          "ip_address": "172.20.0.2",
          "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "ListNetworkApiResponse": {
        "type": "object",
        "properties": {
          "networks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NetworkApiResponse"
            },
            "title": "Networks"
          }
        },
        "title": "ListNetworkApiResponse",
        "required": [
          "networks"
        ],
        "example": {
          "networks": [
            {
              "created_at": "2022-01-01 00:00:00",
              "error": "null",
              "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "is_default": true,
              "name": "vpc_name",
              "status": "created",
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "zone": "a"
            }
          ]
        }
      },
      "NetworkApiResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "vpc_id": {
            "type": "string",
            "title": "Vpc Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "zone": {
            "type": "string",
            "title": "Zone"
          }
        },
        "title": "NetworkApiResponse",
        "required": [
          "id",
          "vpc_id",
          "name",
          "is_default",
          "status",
          "zone"
        ],
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "error": "null",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "vpc_name",
          "status": "created",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "a"
        }
      },
      "NetworkResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 100,
            "minLength": 5
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "mtu": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Mtu"
          },
          "subnets": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Subnets",
            "default": []
          },
          "shared": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shared"
          },
          "tags": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Tags",
            "default": []
          },
          "port_security_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Security Enabled"
          },
          "router_external": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Router External"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "title": "NetworkResponse",
        "required": [
          "name"
        ],
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "network description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_port_security_enabled": true,
          "is_router_external": false,
          "is_shared": false,
          "mtu": "1500",
          "name": "network_name",
          "status": "ACTIVE",
          "subnet_ids": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "tags": [
            "network_tag"
          ],
          "updated_at": "2022-01-01 00:00:00"
        }
      },
      "PortCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 100,
            "minLength": 5
          },
          "has_pip": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has Pip",
            "default": true
          },
          "has_sg": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Has Sg",
            "default": true
          },
          "subnets": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Subnets",
            "default": []
          },
          "security_groups_id": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Groups Id",
            "default": []
          }
        },
        "title": "PortCreateRequest",
        "required": [
          "name"
        ],
        "example": {
          "has_pip": true,
          "has_sg": true,
          "name": "port_name",
          "security_groups_id": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "subnets": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ]
        }
      },
      "PortCreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "PortCreateResponse",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "PortDeletedAllResponse": {
        "type": "object",
        "properties": {
          "deleted_ports": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            },
            "title": "Deleted Ports"
          },
          "deleted_public_ips": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            },
            "title": "Deleted Public Ips"
          }
        },
        "title": "PortDeletedAllResponse",
        "required": [
          "deleted_ports",
          "deleted_public_ips"
        ],
        "example": {
          "deleted_ports": [
            {
              "openstack": 0
            },
            {
              "database": 0
            }
          ],
          "deleted_public_ips": [
            {
              "openstack": 0
            },
            {
              "database": 0
            }
          ]
        }
      },
      "PortResponse": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "is_admin_state_up": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Admin State Up"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vpc Id"
          },
          "is_port_security_enabled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Port Security Enabled"
          },
          "security_groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Security Groups",
            "default": []
          },
          "public_ip": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PublicIpResponsePort"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Ip",
            "default": []
          },
          "ip_address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpAddress"
            },
            "title": "Ip Address",
            "default": []
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          }
        },
        "title": "PortResponse",
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "port description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_address": [
            {
              "ip_address": "172.20.0.2",
              "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ],
          "is_admin_state_up": true,
          "is_port_security_enabled": true,
          "name": "port_name",
          "public_ip": [
            {
              "public_ip": "100.94.5.31",
              "public_ip_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ],
          "security_groups": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "PortSimpleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "ip_address": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IpAddress"
            },
            "title": "Ip Address",
            "default": []
          }
        },
        "title": "PortSimpleResponse",
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_address": [
            {
              "ip_address": "172.20.0.2",
              "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        }
      },
      "PortsList": {
        "type": "object",
        "properties": {
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortResponse"
            },
            "title": "Ports"
          }
        },
        "title": "PortsList",
        "required": [
          "ports"
        ],
        "example": {
          "ports": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "port description",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "ip_address": [
                {
                  "ip_address": "172.20.0.2",
                  "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              ],
              "is_admin_state_up": true,
              "is_port_security_enabled": true,
              "name": "port_name",
              "public_ip": [
                {
                  "public_ip": "100.94.5.31",
                  "public_ip_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              ],
              "security_groups": [
                "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              ],
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        }
      },
      "PortsListSimplified": {
        "type": "object",
        "properties": {
          "ports_simplified": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortSimpleResponse"
            },
            "title": "Ports Simplified"
          }
        },
        "title": "PortsListSimplified",
        "required": [
          "ports_simplified"
        ],
        "example": {
          "ports_simplified": [
            {
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "ip_address": [
                {
                  "ip_address": "172.20.0.2",
                  "subnet_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
                }
              ]
            }
          ]
        }
      },
      "ProjectType": {
        "type": "string",
        "title": "ProjectType",
        "enum": [
          "dbaas",
          "iamaas",
          "k8saas",
          "default",
          "mngsvc"
        ]
      },
      "PublicIpCreateRequest": {
        "type": "object",
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "default": ""
          }
        },
        "title": "PublicIpCreateRequest",
        "example": {
          "description": "public_ip_description"
        }
      },
      "PublicIpCreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "PublicIpCreateResponse",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "PublicIpDb": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vpc Id"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "public_ip": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Ip"
          },
          "port_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Id"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          },
          "status": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "title": "PublicIpDb",
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "port description",
          "error": "error",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "port_ip": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "public_ip": "100.94.5.31",
          "status": "created",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "PublicIpResponseId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "PublicIpResponseId",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "PublicIpResponsePort": {
        "type": "object",
        "properties": {
          "public_ip_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Ip Id"
          },
          "public_ip": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Ip"
          }
        },
        "title": "PublicIpResponsePort",
        "example": {
          "public_ip": "100.94.5.31",
          "public_ip_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "PublicIpStatus": {
        "type": "string",
        "title": "PublicIpStatus",
        "enum": [
          "created",
          "pending",
          "error"
        ]
      },
      "PublicIpUpdateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PublicIpStatus"
          },
          "public_ip": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Public Ip"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "title": "PublicIpUpdateRequest",
        "required": [
          "status"
        ],
        "example": {
          "error": "error",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "public_ip": "100.94.5.31",
          "status": "created"
        }
      },
      "PublicIpsList": {
        "type": "object",
        "properties": {
          "public_ips": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicIpDb"
            },
            "title": "Public Ips"
          }
        },
        "title": "PublicIpsList",
        "required": [
          "public_ips"
        ],
        "example": {
          "public_ips": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "port description",
              "error": "error",
              "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "port_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "public_ip": "100.94.5.31",
              "status": "created",
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        }
      },
      "QuotaModel": {
        "type": "object",
        "properties": {
          "quota_slug": {
            "type": "string",
            "title": "Quota Slug"
          },
          "used": {
            "type": "integer",
            "title": "Used"
          }
        },
        "title": "QuotaModel",
        "required": [
          "quota_slug",
          "used"
        ],
        "example": {
          "quota_slug": "public_ips",
          "used": 10
        }
      },
      "QuotaResult": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuotaModel"
            },
            "title": "Results"
          }
        },
        "title": "QuotaResult",
        "required": [
          "results"
        ],
        "example": {
          "results": [
            {
              "quota_slug": "public_ips",
              "used": 10
            }
          ]
        }
      },
      "RouteRequest": {
        "type": "object",
        "properties": {
          "destination": {
            "type": "string",
            "title": "Destination"
          },
          "nexthop": {
            "type": "string",
            "title": "Nexthop"
          }
        },
        "title": "RouteRequest",
        "required": [
          "destination",
          "nexthop"
        ],
        "example": {
          "destination": "10.20.30.0/24",
          "nexthop": "172.20.0.2"
        }
      },
      "RouterInterfaceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vpc Id"
          },
          "router_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Router Id"
          },
          "ip_address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ip Address"
          },
          "nic_vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nic Vpc Id"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          }
        },
        "title": "RouterInterfaceResponse",
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_address": "172.20.0.2",
          "nic_vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "router_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "RouterInterfaceResponseList": {
        "type": "object",
        "properties": {
          "router_interfaces": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RouterInterfaceResponse"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Router Interfaces",
            "default": []
          }
        },
        "title": "RouterInterfaceResponseList",
        "example": {
          "router_interfaces": [
            {
              "created_at": "2022-01-01 00:00:00",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "ip_address": "172.20.0.2",
              "nic_vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "router_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        }
      },
      "RouterResponse": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "vpc_id": {
            "type": "string",
            "title": "Vpc Id"
          },
          "external_network": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Network"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "is_default": {
            "type": "boolean",
            "title": "Is Default"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          },
          "function": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Function",
            "default": "primary"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "zone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zone"
          }
        },
        "title": "RouterResponse",
        "required": [
          "vpc_id",
          "is_default",
          "status"
        ],
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "error": "null",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "external_network": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "function": "primary",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "vpc_name",
          "status": "created",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "a"
        }
      },
      "RuleCreateRequest": {
        "type": "object",
        "properties": {
          "direction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Direction"
          },
          "port_range_min": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Min"
          },
          "port_range_max": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Max"
          },
          "protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Protocol"
          },
          "remote_ip_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Ip Prefix"
          },
          "remote_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Group Id"
          },
          "ethertype": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ethertype"
          }
        },
        "title": "RuleCreateRequest",
        "example": {
          "direction": "egress",
          "ethertype": "IPv4",
          "port_range_max": 8028,
          "port_range_min": 8028,
          "protocol": "tcp",
          "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "remote_ip_prefix": "100.94.0.0/24"
        }
      },
      "RuleCreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "RuleCreateResponse",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "RuleDefaultStatusEvent": {
        "type": "object",
        "properties": {
          "security_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Group Id"
          },
          "direction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Direction"
          },
          "port_range_min": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Min"
          },
          "port_range_max": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Max"
          },
          "protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Protocol"
          },
          "remote_ip_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Ip Prefix"
          },
          "remote_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Group Id"
          },
          "status": {
            "$ref": "#/components/schemas/RuleStatus"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "resource_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Resource Id"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "rules_zones": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RuleZoneCreateEvent"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Rules Zones",
            "default": []
          }
        },
        "title": "RuleDefaultStatusEvent",
        "required": [
          "status"
        ],
        "example": {
          "direction": "egress",
          "error": "null",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "port_range_max": 8028,
          "port_range_min": 8028,
          "protocol": "tcp",
          "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "remote_ip_prefix": "100.94.0.0/24",
          "resource_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "rules_zones": [
            {
              "resource_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "zone": "zone_name"
            }
          ],
          "status": "created"
        }
      },
      "RuleResponse": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "security_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Group Id"
          },
          "direction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Direction"
          },
          "port_range_min": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Min"
          },
          "port_range_max": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Max"
          },
          "protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Protocol"
          },
          "remote_ip_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Ip Prefix"
          },
          "remote_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Group Id"
          },
          "ethertype": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ethertype"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "status": {
            "$ref": "#/components/schemas/RuleStatus"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "title": "RuleResponse",
        "required": [
          "status"
        ],
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "direction": "egress",
          "ethertype": "IPv4",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "port_range_max": 8028,
          "port_range_min": 8028,
          "protocol": "tcp",
          "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "remote_ip_prefix": "100.94.0.0/24",
          "security_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status": "created"
        }
      },
      "RuleResponseEvent": {
        "type": "object",
        "properties": {
          "direction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Direction"
          },
          "port_range_min": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Min"
          },
          "port_range_max": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Max"
          },
          "protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Protocol"
          },
          "remote_ip_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Ip Prefix"
          },
          "remote_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Group Id"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "security_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Group Id"
          },
          "ethertype": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ethertype"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          }
        },
        "title": "RuleResponseEvent",
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "direction": "egress",
          "error": "null",
          "ethertype": "IPv4",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "port_range_max": 8028,
          "port_range_min": 8028,
          "protocol": "tcp",
          "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "remote_ip_prefix": "100.94.0.0/24",
          "security_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status": "created"
        }
      },
      "RuleStatus": {
        "type": "string",
        "title": "RuleStatus",
        "enum": [
          "created",
          "pending",
          "error"
        ]
      },
      "RuleStatusEvent": {
        "type": "object",
        "properties": {
          "direction": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Direction"
          },
          "port_range_min": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Min"
          },
          "port_range_max": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Port Range Max"
          },
          "protocol": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Protocol"
          },
          "remote_ip_prefix": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Ip Prefix"
          },
          "remote_group_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Remote Group Id"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "api_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Id"
          },
          "rule_zones": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/RuleZoneStatusEvent"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Rule Zones",
            "default": {}
          }
        },
        "title": "RuleStatusEvent",
        "example": {
          "api_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "direction": "egress",
          "error": "null",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "port_range_max": 8028,
          "port_range_min": 8028,
          "protocol": "tcp",
          "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "remote_ip_prefix": "100.94.0.0/24",
          "rule_zones": [
            {
              "resource_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "zone": "zone_name"
            }
          ],
          "status": "created"
        }
      },
      "RuleZoneCreateEvent": {
        "type": "object",
        "properties": {
          "resource_id": {
            "type": "string",
            "title": "Resource Id"
          },
          "zone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zone"
          }
        },
        "title": "RuleZoneCreateEvent",
        "required": [
          "resource_id"
        ],
        "example": {
          "resource_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "zone_name"
        }
      },
      "RuleZoneStatusEvent": {
        "type": "object",
        "properties": {
          "api_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Id"
          },
          "zone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zone"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/RuleStatus"
              },
              {
                "type": "null"
              }
            ]
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          }
        },
        "title": "RuleZoneStatusEvent",
        "example": {
          "api_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "error": "error data, if any",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status": "created",
          "zone": "zone_name"
        }
      },
      "RulesList": {
        "type": "object",
        "properties": {
          "rules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RuleResponse"
            },
            "title": "Rules"
          }
        },
        "title": "RulesList",
        "required": [
          "rules"
        ],
        "example": {
          "rules": [
            {
              "created_at": "2022-01-01 00:00:00",
              "direction": "egress",
              "ethertype": "IPv4",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "port_range_max": 8028,
              "port_range_min": 8028,
              "protocol": "tcp",
              "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "remote_ip_prefix": "100.94.0.0/24",
              "security_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "status": "created"
            }
          ]
        }
      },
      "SecurityGroupCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 100,
                "minLength": 5
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description",
            "default": ""
          }
        },
        "title": "SecurityGroupCreateRequest",
        "required": [
          "name"
        ],
        "example": {
          "description": "security group description",
          "name": "security_group_name"
        }
      },
      "SecurityGroupCreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "SecurityGroupCreateResponse",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "SecurityGroupDeletedAllResponse": {
        "type": "object",
        "properties": {
          "deleted_security_groups": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            },
            "title": "Deleted Security Groups"
          }
        },
        "title": "SecurityGroupDeletedAllResponse",
        "required": [
          "deleted_security_groups"
        ],
        "example": {
          "deleted_security_groups": [
            {
              "database": 0
            },
            {
              "openstack": 0
            }
          ]
        }
      },
      "SecurityGroupDetailEvent": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vpc Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          },
          "status": {
            "$ref": "#/components/schemas/SecurityGroupStatus"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "project_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Type"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Default"
          },
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "rules": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RuleResponseEvent"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Rules",
            "default": []
          }
        },
        "title": "SecurityGroupDetailEvent",
        "required": [
          "status"
        ],
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "security group description",
          "error": "null",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "security_group_name",
          "project_type": "default",
          "rules": [
            {
              "created_at": "2022-01-01 00:00:00",
              "direction": "egress",
              "error": "null",
              "ethertype": "IPv4",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "port_range_max": 8028,
              "port_range_min": 8028,
              "protocol": "tcp",
              "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "remote_ip_prefix": "100.94.0.0/24",
              "security_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "status": "created"
            }
          ],
          "status": "created",
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "SecurityGroupListEvent": {
        "type": "object",
        "properties": {
          "security_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SecurityGroupResponseEvent"
            },
            "title": "Security Groups"
          }
        },
        "title": "SecurityGroupListEvent",
        "required": [
          "security_groups"
        ],
        "example": {
          "security_groups": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "security group description",
              "error": "null",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "is_default": true,
              "name": "security_group_name",
              "project_type": "default",
              "status": "created",
              "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        }
      },
      "SecurityGroupResponseEvent": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "vpc_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Vpc Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          },
          "status": {
            "$ref": "#/components/schemas/SecurityGroupStatus"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "project_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Project Type"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Default"
          }
        },
        "title": "SecurityGroupResponseEvent",
        "required": [
          "status"
        ],
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "security group description",
          "error": "null",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "security_group_name",
          "project_type": "default",
          "status": "created",
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "SecurityGroupStatus": {
        "type": "string",
        "title": "SecurityGroupStatus",
        "enum": [
          "created",
          "pending",
          "error"
        ]
      },
      "SecurityGroupStatusEvent": {
        "type": "object",
        "properties": {
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "api_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Id"
          },
          "rules": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RuleStatusEvent"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Rules",
            "default": []
          },
          "security_group_zones": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/SecurityGroupZoneStatusEvent"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Security Group Zones",
            "default": {}
          }
        },
        "title": "SecurityGroupStatusEvent",
        "required": [
          "status"
        ],
        "example": {
          "api_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "error": "null",
          "rules": [
            {
              "api_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "direction": "egress",
              "error": "null",
              "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "port_range_max": 8028,
              "port_range_min": 8028,
              "protocol": "tcp",
              "remote_group_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "remote_ip_prefix": "100.94.0.0/24",
              "rule_zones": [
                {
                  "api_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                  "zone": "zone_name"
                }
              ],
              "status": "created"
            }
          ],
          "security_group_zones": [
            {
              "api_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "zone": "zone_name"
            }
          ],
          "status": "created"
        }
      },
      "SecurityGroupZoneStatusEvent": {
        "type": "object",
        "properties": {
          "external_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Id"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "api_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Id"
          },
          "zone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zone"
          }
        },
        "title": "SecurityGroupZoneStatusEvent",
        "required": [
          "status"
        ],
        "example": {
          "api_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "error": "error data, if any",
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "status": "created",
          "zone": "zone_name"
        }
      },
      "SlugQuotas": {
        "type": "string",
        "title": "SlugQuotas",
        "enum": [
          "public_ips",
          "subnets",
          "subnet_pools",
          "security_groups",
          "security_group_rules",
          "vpcs",
          "nics"
        ]
      },
      "SubnetCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "cidr_block": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cidr Block"
          },
          "ip_version": {
            "type": "integer",
            "title": "Ip Version"
          },
          "dns_nameservers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipvanyaddress"
            },
            "title": "Dns Nameservers",
            "default": []
          }
        },
        "title": "SubnetCreateRequest",
        "required": [
          "name",
          "ip_version"
        ],
        "example": {
          "cidr_block": "172.50.0.0/24",
          "description": "some_description",
          "dns_nameservers": [
            "8.8.8.8"
          ],
          "ip_version": 4,
          "name": "subnet_name"
        }
      },
      "SubnetCreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "SubnetCreateResponse",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "SubnetPatchRequest": {
        "type": "object",
        "properties": {
          "dns_nameservers": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "ipvanyaddress"
            },
            "title": "Dns Nameservers",
            "default": []
          }
        },
        "title": "SubnetPatchRequest",
        "example": {
          "dns_nameservers": [
            "8.8.8.8"
          ]
        }
      },
      "SubnetPoolDetailsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "vpc_id": {
            "type": "string",
            "title": "Vpc Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "pool_prefix": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Pool Prefix"
          },
          "min_prefix_length": {
            "type": "integer",
            "title": "Min Prefix Length"
          },
          "max_prefix_length": {
            "type": "integer",
            "title": "Max Prefix Length"
          },
          "default_prefix_length": {
            "type": "integer",
            "title": "Default Prefix Length"
          },
          "description": {
            "type": "string",
            "title": "Description"
          }
        },
        "title": "SubnetPoolDetailsResponse",
        "required": [
          "id",
          "tenant_id",
          "vpc_id",
          "name",
          "pool_prefix",
          "min_prefix_length",
          "max_prefix_length",
          "default_prefix_length",
          "description"
        ],
        "description": "A Pydantic model representing the request for creating one Subnet Pool.",
        "example": {
          "default_prefix_length": 26,
          "description": "some description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "max_prefix_length": 28,
          "min_prefix_length": 24,
          "name": "some_subnet_pool",
          "pool_prefix": [
            "172.26.0.0/16"
          ],
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "SubnetPoolRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the subnet pool."
          },
          "pool_prefix": {
            "type": "string",
            "title": "Pool Prefix",
            "description": "The CIDR notation prefix for the subnet pool.",
            "default": "172.26.0.0/16"
          },
          "min_prefix_length": {
            "type": "integer",
            "title": "Min Prefix Length",
            "description": "The minimum prefix length for a subnet in the pool.",
            "default": 24
          },
          "max_prefix_length": {
            "type": "integer",
            "title": "Max Prefix Length",
            "description": "The maximum prefix length for a subnet in the pool.",
            "default": 28
          },
          "default_prefix_length": {
            "type": "integer",
            "title": "Default Prefix Length",
            "description": "The default prefix length for a subnet in the pool.",
            "default": 26
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "The description for the subnet pool"
          },
          "address_scope_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address Scope Id",
            "description": "The ID of the address scope for the subnet pool"
          }
        },
        "title": "SubnetPoolRequest",
        "required": [
          "name",
          "description"
        ],
        "description": "A Pydantic model representing the request for creating one Subnet Pool.",
        "example": {
          "address_scope_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "default_prefix_length": 26,
          "description": "some description",
          "max_prefix_length": 28,
          "min_prefix_length": 24,
          "name": "some_subnet_pool",
          "pool_prefix": "172.26.0.0/16"
        }
      },
      "SubnetPoolResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id"
          },
          "vpc_id": {
            "type": "string",
            "title": "Vpc Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "external_id": {
            "type": "string",
            "title": "External Id"
          }
        },
        "title": "SubnetPoolResponse",
        "required": [
          "id",
          "tenant_id",
          "vpc_id",
          "name",
          "external_id"
        ],
        "description": "A Pydantic model representing a response for Subnet Pool creation.\n\nAttributes:\n    id (str): The ID of the subnet pool.\n    tenant_id (str): The ID of the tenant that owns the subnet pool.\n    vpc_id (str): The ID of the VPC that the subnet pool belongs to.\n    name (str): The name of the subnet pool.\n    external_id (str): The ID of the subnet pool in OpenStack.",
        "example": {
          "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "some_subnet_pool",
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "SubnetPoolsResponse": {
        "type": "object",
        "properties": {
          "subnetpools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubnetPoolResponse"
            },
            "title": "Subnetpools",
            "default": []
          }
        },
        "title": "SubnetPoolsResponse",
        "description": "A Pydantic model representing a list of Subnet Pools.",
        "example": {
          "subnetpools": [
            {
              "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "name": "some_subnet_pool",
              "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
            }
          ]
        }
      },
      "SubnetResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "vpc_id": {
            "type": "string",
            "title": "Vpc Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "cidr_block": {
            "type": "string",
            "title": "Cidr Block"
          },
          "ip_version": {
            "type": "string",
            "title": "Ip Version"
          },
          "zone": {
            "type": "string",
            "title": "Zone"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          }
        },
        "title": "SubnetResponse",
        "required": [
          "id",
          "vpc_id",
          "cidr_block",
          "ip_version",
          "zone"
        ],
        "example": {
          "cidr_block": "172.20.0.0/24",
          "created_at": "2022-01-01 00:00:00",
          "description": "vpc description",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_version": "4",
          "name": "vpc_name",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "a"
        }
      },
      "SubnetResponseDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "vpc_id": {
            "type": "string",
            "title": "Vpc Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "cidr_block": {
            "type": "string",
            "title": "Cidr Block"
          },
          "ip_version": {
            "type": "string",
            "title": "Ip Version"
          },
          "zone": {
            "type": "string",
            "title": "Zone"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          },
          "gateway_ip": {
            "type": "string",
            "title": "Gateway Ip"
          },
          "dns_nameservers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Dns Nameservers"
          },
          "dhcp_pools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DhcpPoolStr"
            },
            "title": "Dhcp Pools"
          }
        },
        "title": "SubnetResponseDetail",
        "required": [
          "id",
          "vpc_id",
          "cidr_block",
          "ip_version",
          "zone",
          "gateway_ip",
          "dns_nameservers",
          "dhcp_pools"
        ],
        "example": {
          "cidr_block": "172.20.0.0/24",
          "created_at": "2022-01-01 00:00:00",
          "description": "vpc description",
          "dhcp_pools": [
            {
              "end": "172.50.0.254",
              "start": "172.50.0.2"
            }
          ],
          "dns_nameservers": [
            "8.8.8.8"
          ],
          "gateway_ip": "172.50.0.1",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "ip_version": "4",
          "name": "vpc_name",
          "updated": "2022-01-01 00:00:00",
          "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "zone": "a"
        }
      },
      "SubnetResponseId": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "SubnetResponseId",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "SubnetsResponse": {
        "type": "object",
        "properties": {
          "subnets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SubnetResponse"
            },
            "title": "Subnets",
            "default": []
          }
        },
        "title": "SubnetsResponse",
        "example": {
          "subnets": [
            {
              "cidr_block": "172.20.0.0/24",
              "created_at": "2022-01-01 00:00:00",
              "description": "vpc description",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "ip_version": "4",
              "name": "vpc_name",
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "zone": "a"
            }
          ]
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "loc": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ]
      },
      "VpcCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "title": "VpcCreateRequest",
        "required": [
          "name"
        ],
        "example": {
          "description": "DESCRIPTION",
          "name": "vpc_name"
        }
      },
      "VpcCreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          }
        },
        "title": "VpcCreateResponse",
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "VpcDeletedAllResponse": {
        "type": "object",
        "properties": {
          "deleted_vpcs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            },
            "title": "Deleted Vpcs"
          },
          "deleted_subnet_pools": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            },
            "title": "Deleted Subnet Pools"
          },
          "deleted_routers": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            },
            "title": "Deleted Routers"
          },
          "deleted_networks": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            },
            "title": "Deleted Networks"
          },
          "deleted_security_groups": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "integer"
              }
            },
            "title": "Deleted Security Groups",
            "default": []
          }
        },
        "title": "VpcDeletedAllResponse",
        "required": [
          "deleted_vpcs",
          "deleted_subnet_pools",
          "deleted_routers",
          "deleted_networks"
        ],
        "example": {
          "deleted_networks": [
            {
              "database": 0
            },
            {
              "openstack": 0
            }
          ],
          "deleted_routers": [
            {
              "database": 0
            },
            {
              "openstack": 0
            }
          ],
          "deleted_security_groups": [
            {
              "database": 0
            },
            {
              "openstack": 0
            }
          ],
          "deleted_subnet_pools": [
            {
              "database": 0
            },
            {
              "openstack": 0
            }
          ],
          "deleted_vpcs": [
            {
              "database": 0
            },
            {
              "openstack": 0
            }
          ]
        }
      },
      "VpcDetailsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "routers": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RouterResponse"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Routers",
            "default": []
          },
          "networks": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NetworkResponse"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Networks",
            "default": []
          },
          "subnets": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Subnets",
            "default": []
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Default"
          }
        },
        "title": "VpcDetailsResponse",
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "DESCRIPTION",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "vpc_name",
          "networks": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "network description",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "is_port_security_enabled": true,
              "is_router_external": false,
              "is_shared": false,
              "mtu": "1500",
              "name": "network_name",
              "status": "ACTIVE",
              "subnet_ids": [
                "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              ],
              "tags": [
                "network_tag"
              ],
              "updated_at": "2022-01-01 00:00:00"
            }
          ],
          "routers": [
            {
              "created_at": "2022-01-01 00:00:00",
              "error": "null",
              "external_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "external_network": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "function": "primary",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "is_default": true,
              "name": "vpc_name",
              "status": "created",
              "updated": "2022-01-01 00:00:00",
              "vpc_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "zone": "a"
            }
          ],
          "subnets": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00"
        }
      },
      "VpcResponse": {
        "type": "object",
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "tenant_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "router_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Router Id"
          },
          "external_network": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "External Network"
          },
          "network_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Network Id"
          },
          "subnets": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Subnets",
            "default": []
          },
          "security_groups": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "title": "Security Groups",
            "default": []
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Created At"
          },
          "updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated"
          },
          "is_default": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Default"
          }
        },
        "title": "VpcResponse",
        "example": {
          "created_at": "2022-01-01 00:00:00",
          "description": "DESCRIPTION",
          "external_network": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "is_default": true,
          "name": "vpc_name",
          "network_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "router_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "security_groups": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "subnets": [
            "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          ],
          "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "updated": "2022-01-01 00:00:00"
        }
      },
      "VpcResponseList": {
        "type": "object",
        "properties": {
          "vpcs": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/VpcResponse"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Vpcs",
            "default": []
          }
        },
        "title": "VpcResponseList",
        "example": {
          "vpcs": [
            {
              "created_at": "2022-01-01 00:00:00",
              "description": "DESCRIPTION",
              "external_network": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "is_default": true,
              "name": "vpc_name",
              "network_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "router_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "security_groups": [
                "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              ],
              "subnets": [
                "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              ],
              "tenant_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "updated": "2022-01-01 00:00:00"
            }
          ]
        }
      },
      "XVpcCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "subnetpool_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subnetpool Id",
            "description": "ID of SubnetPool             from which the VPC will get CIDRs.             Can be used instead of 'cidr' field."
          },
          "cidr": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cidr",
            "description": "CIDR from which VPC's subnets will get IPs            Can be used instead of 'subnetpool_id' field."
          }
        },
        "title": "XVpcCreateRequest",
        "required": [
          "name"
        ],
        "description": "XVpcCreateRequest is the equivalent of VpcCreateRequest\nfor XaaS routes.",
        "example": {
          "cidr": "172.20.0.0/24",
          "description": "vpc description",
          "name": "vpc_name",
          "subnetpool_id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      }
    }
  }
}"),
	"block-storage.jaxyendy.openapi.json":   ([]byte)("{
  "openapi": "3.1.0",
  "info": {
    "title": "Block Storage API Product Documentation - v1",
    "description": "Block Storage API Product Documentation",
    "contact": {
      "name": "IaaS Products",
      "url": "https://github.com/luizalabs",
      "email": "kassio.junqueira@luizalabs.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/backups": {
      "get": {
        "tags": [
          "backups"
        ],
        "summary": "List backups in the current tenant",
        "description": "Retrieve a list of Backups for the currently authenticated tenant.\n\n#### Notes\n- Use the **expand** argument to obtain additional details about the\n Volume used to create each Backup.",
        "operationId": "list_backups_v1_backups_get",
        "parameters": [
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "exclusiveMinimum": 0,
              "type": "integer",
              "title": " Limit",
              "default": 50
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort",
              "pattern": "^(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "default": "created_at:asc"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 List Backups V1 Backups Get"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 List Backups V1 Backups Get"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 List Backups V1 Backups Get"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "backups"
        ],
        "summary": "Create a Backup",
        "description": "Create a backup for the currently authenticated tenant.\n\nThe Backup can be used when it reaches the \"available\" state and the\n \"completed\" status.\n\n#### Rules\n- The Backup name must be unique; otherwise, the creation will be disallowed.\n- The Volume can be either in in-use or available states.\n- The Volume must not have an operation in execution.\n\n#### Notes\n- Use the **block-storage volume list** command to retrieve a list of all\n Volumes and obtain the ID of the Volume that will be used to create the\n Backup.",
        "operationId": "create_backup_v1_backups_post",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateBackup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Create Backup V1 Backups Post"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Create Backup V1 Backups Post"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Create Backup V1 Backups Post"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/backups/{id}": {
      "get": {
        "tags": [
          "backups"
        ],
        "summary": "Get a Backup",
        "description": "Retrieve details of a Backup for the currently authenticated tenant.\n\n#### Notes\n- Use the **expand** argument to obtain additional details about the Volume\n used to create the Backup.\n- Utilize the **block-storage backups list** command to retrieve a list of\n all Backups and obtain the ID of the Backup for which you want to retrieve\n details.",
        "operationId": "get_backup_v1_backups__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Get Backup V1 Backups  Id  Get"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Get Backup V1 Backups  Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Get Backup V1 Backups  Id  Get"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "backups"
        ],
        "summary": "Delete a Backup",
        "description": "Delete a Backup for the currently authenticated tenant.\n\n#### Rules\n- The Backup's status must be \"completed\".\n- The Backup's state must be \"available\".\n\n\n#### Notes\n- Utilize the **block-storage backups** list command to retrieve a list of\n all Backups and obtain the ID of the Backup you wish to delete.",
        "operationId": "delete_backup_v1_backups__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Delete Backup V1 Backups  Id  Delete"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Delete Backup V1 Backups  Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Delete Backup V1 Backups  Id  Delete"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "patch": {
        "tags": [
          "backups"
        ],
        "summary": "Patch a Backup",
        "description": "Patches a Backup for the currently authenticated tenant.\n\n#### Rules\n- The Backup name must be unique; otherwise, renaming will not be allowed.\n- The Backup's state must be available.\n\n#### Notes\n- Utilize the **block-storage backups list** command to retrieve a list of\n all Backups and obtain the ID of the Backup you wish to rename.",
        "operationId": "patch_backup_v1_backups__id__patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchResourceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Patch Backup V1 Backups  Id  Patch"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Patch Backup V1 Backups  Id  Patch"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Patch Backup V1 Backups  Id  Patch"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/snapshots": {
      "get": {
        "tags": [
          "snapshots"
        ],
        "summary": "List snapshots in the current tenant",
        "description": "Retrieve a list of Snapshots for the currently authenticated tenant.\n\n#### Notes\n- Use the expand argument to obtain additional details about the Volume used to\n create each Snapshot.",
        "operationId": "list_snapshot_v1_snapshots_get",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExpandSnapshots"
              },
              "title": "Expand",
              "default": []
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "exclusiveMinimum": 0,
              "type": "integer",
              "title": " Limit",
              "default": 50
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort",
              "pattern": "^(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "default": "created_at:asc"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 List Snapshot V1 Snapshots Get"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 List Snapshot V1 Snapshots Get"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 List Snapshot V1 Snapshots Get"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "snapshots"
        ],
        "summary": "Create a snapshot",
        "description": "Create a Snapshot for the currently authenticated tenant.\n\nThe Snapshot can be used when it reaches the \"available\" state and the\n \"completed\" status.\n\n#### Rules\n- The Snapshot name must be unique; otherwise, the creation will be disallowed.\n- Creating Snapshots from restored Volumes may lead to future conflicts as\n you can't delete a Volume with an Snapshot and can't delete a Snapshot with a\n restored Volume, so we recommend avoiding it.\n\n#### Notes\n- Use the **block-storage volume list** command to retrieve a list of all\n Volumes and obtain the ID of the Volume that will be used to create the\n Snapshot.",
        "operationId": "create_snapshot_v1_snapshots_post",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotCreationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Create Snapshot V1 Snapshots Post"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Create Snapshot V1 Snapshots Post"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Create Snapshot V1 Snapshots Post"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/snapshots/{id}": {
      "get": {
        "tags": [
          "snapshots"
        ],
        "summary": "Retrieve the details of a snapshot",
        "description": "Retrieve details of a Snapshot for the currently authenticated tenant.\n\n#### Notes\n- Use the **expand** argument to obtain additional details about the Volume\n used to create the Snapshot.\n- Utilize the **block-storage snapshots list** command to retrieve a list of\n all Snapshots and obtain the ID of the Snapshot for which you want to retrieve\n details.",
        "operationId": "get_snapshot_v1_snapshots__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ExpandSnapshots"
              },
              "title": "Expand",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Get Snapshot V1 Snapshots  Id  Get"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Get Snapshot V1 Snapshots  Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Get Snapshot V1 Snapshots  Id  Get"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "snapshots"
        ],
        "summary": "Delete a snapshot",
        "description": "Delete a Snapshot for the currently authenticated tenant.\n\n#### Rules\n- The Snapshot's status must be \"completed\".\n- The Snapshot's state must be \"available\".\n- Deleting a Snapshot that has been restored is not possible. If necessary,\n delete the restored Volume first and then proceed to delete the Snapshot.\n\n#### Notes\n- Utilize the **block-storage snapshots** list command to retrieve a list of\n all Snapshots and obtain the ID of the Snapshot you wish to delete.\n- If needed, you can use the **block-storage volume list** command to retrieve\n a list of all Volumes and obtain the ID of the restored Volume.",
        "operationId": "delete_snapshot_v1_snapshots__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Delete Snapshot V1 Snapshots  Id  Delete"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Delete Snapshot V1 Snapshots  Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Delete Snapshot V1 Snapshots  Id  Delete"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/snapshots/{id}/rename": {
      "patch": {
        "tags": [
          "snapshots"
        ],
        "summary": "Rename a snapshot",
        "description": "Rename a Snapshot for the currently authenticated tenant.\n\n#### Rules\n- The Snapshot name must be unique; otherwise, renaming will not be allowed.\n\n#### Notes\n- Utilize the **block-storage snapshots list** command to retrieve a list of\n all Snapshots and obtain the ID of the Snapshot you wish to rename.",
        "operationId": "rename_snapshot_v1_snapshots__id__rename_patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Name"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Rename Snapshot V1 Snapshots  Id  Rename Patch"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Rename Snapshot V1 Snapshots  Id  Rename Patch"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Rename Snapshot V1 Snapshots  Id  Rename Patch"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/snapshots/{snapshot_id}": {
      "post": {
        "tags": [
          "snapshots"
        ],
        "summary": "Restore a snapshot to a new volume",
        "description": "Restore a Snapshot on a new Volume to the currently\n authenticated tenant.\n\nThe restored Volume can be used when it reaches the \"available\" state and the\n \"completed\" status.\n\n#### Notes\n- To obtain the ID of the Snapshot you wish to restore, you can use the\n **block-storage snapshots list** command to list all Snapshots.\n- Check the state and status of your Volume using the\n **block-storage volume get --id [uuid]** command.",
        "operationId": "restore_snapshot_v1_snapshots__snapshot_id__post",
        "parameters": [
          {
            "name": "snapshot_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Snapshot Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotRestoreRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Restore Snapshot V1 Snapshots  Snapshot Id  Post"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Restore Snapshot V1 Snapshots  Snapshot Id  Post"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Restore Snapshot V1 Snapshots  Snapshot Id  Post"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/volume-types": {
      "get": {
        "tags": [
          "volume-types"
        ],
        "summary": "List volume types",
        "description": "List Volume Types allowed in the current region.\n\n#### Notes\n\n- Volume types are managed internally. If you wish to use a Volume Type that\n is not yet available, please contact our support team for assistance.",
        "operationId": "list_volume_types_v1_v1_volume_types_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenericVolumeTypeList_VolumeTypeResponse_"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/volumes": {
      "get": {
        "tags": [
          "volumes"
        ],
        "summary": "List all Volumes",
        "description": "Retrieve a list of Volumes for the currently authenticated tenant.\n\n#### Notes\n- Use the expand argument to obtain additional details about the Volume Type.",
        "operationId": "list_volume_v1_v1_volumes_get",
        "parameters": [
          {
            "name": "expand",
            "in": "query",
            "description": "You can get more detailed info about: ['volume_type', 'attachment']",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Expand",
              "description": "You can get more detailed info about: ['volume_type', 'attachment']",
              "default": []
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "exclusiveMinimum": 0,
              "type": "integer",
              "title": " Limit",
              "default": 50
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort",
              "pattern": "^(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "default": "created_at:asc"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumesResponseV1"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 List Volume V1 V1 Volumes Get"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 List Volume V1 V1 Volumes Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Create a new Volume",
        "description": "Create a Volume for the currently authenticated tenant.\n\nThe Volume can be used when it reaches the \"available\" state and \"completed\"\n status.\n\n#### Rules\n- The Volume name must be unique; otherwise, the creation will be disallowed.\n- The Volume type must be available to use.\n\n#### Notes\n- Utilize the **block-storage volume-types list** command to retrieve a list\n of all available Volume Types.\n- Verify the state and status of your Volume using the\n**block-storage volume get --id [uuid]** command\".",
        "operationId": "create_volume_v1_v1_volumes_post",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VolumeCreateRequestV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Create Volume V1 V1 Volumes Post"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Create Volume V1 V1 Volumes Post"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Create Volume V1 V1 Volumes Post"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/volumes/{id}": {
      "get": {
        "tags": [
          "volumes"
        ],
        "summary": "Retrieve the details of a volume",
        "description": "Retrieve details of a Volume for the currently authenticated tenant.\n\n#### Notes\n- Use the **expand** argument to obtain additional details about the Volume\n Type.\n- Utilize the **block-storage volume list** command to retrieve a list of all\n Volumes and obtain the ID of the Volume for which you want to retrieve\n details.",
        "operationId": "get_volume_v1_v1_volumes__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "You can get more detailed info about: ['volume_type', 'attachment']",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Expand",
              "description": "You can get more detailed info about: ['volume_type', 'attachment']",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VolumeResponseV1"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Get Volume V1 V1 Volumes  Id  Get"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Get Volume V1 V1 Volumes  Id  Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      },
      "delete": {
        "tags": [
          "volumes"
        ],
        "summary": "Delete a Volume",
        "description": "Delete a Volume for the currently authenticated tenant.\n\n#### Rules\n- The Volume cannot be attached to a Virtual Machine, i.e., its state cannot\n be \"in-use\". If necessary, detach the Volume from the Virtual Machine before\n proceeding with deletion.\n- The Volume must not have any snapshots. If necessary, delete the Volume's\n  snapshots before proceeding with deletion.\n- The Volume must have the status \"completed\", i.e., must not have any\n  actions in progress.\n\n\n#### Notes\n- Check the state and status of your Volume using the\n**block-storage volume get --id [uuid]** command\".",
        "operationId": "delete_volume_v1_v1_volumes__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Delete Volume V1 V1 Volumes  Id  Delete"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Delete Volume V1 V1 Volumes  Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Delete Volume V1 V1 Volumes  Id  Delete"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/volumes/{id}/attach/{virtual_machine_id}": {
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Attach a Volume",
        "description": "Attach a Volume to a Virtual Machine instance for the currently\n authenticated tenant.\n\nThe Volume attachment will be completed when the Volume status returns to\n\"completed\", and the state becomes \"in-use\".\n\n#### Rules\n- The Volume and the Virtual Machine must belong to the same tenant.\n- Both the Volume and Virtual Machine must have the status \"completed\".\n- The Volume's state must be \"available\".\n- The Virtual Machine's state must be \"stopped\" or \"running\".\n\n#### Notes\n- Verify the state and status of your Volume using the\n **block-storage volume get --id [uuid]** command.\n- Verify the state and status of your Virtual Machine using the\n**virtual-machine instances get --id [uuid]** command\".",
        "operationId": "attach_volume_v1_v1_volumes__id__attach__virtual_machine_id__post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "virtual_machine_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Virtual Machine Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Attach Volume V1 V1 Volumes  Id  Attach  Virtual Machine Id  Post"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Attach Volume V1 V1 Volumes  Id  Attach  Virtual Machine Id  Post"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Attach Volume V1 V1 Volumes  Id  Attach  Virtual Machine Id  Post"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/volumes/{id}/detach": {
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Detach a Volume",
        "description": "Detach a Volume from a Virtual Machine instance for the\n currently authenticated tenant.\n\nThe Volume detachment will be completed when the Volume state returns to\n \"available,\" and the status becomes \"completed\".\n\n#### Rules\n- The Volume and the Virtual Machine must belong to the same tenant.\n- Both the Volume and Virtual Machine must have the status \"completed\".\n- The Volume's state must be \"in-use\".\n- The Virtual Machine's state must be \"stopped\".\n\n#### Notes\n- Verify the state and status of your Volume using the\n **block-storage volume get --id [uuid]** command.\n- Verify the state and status of your Virtual Machine using the\n **virtual-machine instances get --id [uuid]** command.\n- Ensure that any file systems on the device within your operating system are\n unmounted before detaching the Volume.\n\n#### Troubleshooting\n- A failure during detachment can result in the Volume becoming stuck in the\n busy state. If this occurs, detachment may be delayed indefinitely until you\n unmount the Volume, force detachment, reboot the instance, or perform all\n three.",
        "operationId": "detach_volume_v1_v1_volumes__id__detach_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Detach Volume V1 V1 Volumes  Id  Detach Post"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Detach Volume V1 V1 Volumes  Id  Detach Post"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Detach Volume V1 V1 Volumes  Id  Detach Post"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/volumes/{id}/extend": {
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Extend a Volume",
        "description": "Extend the size of an existing Volume for the currently\n authenticated tenant.\n\nThe Volume extension will be completed when the Volume status returns to\n \"completed\".\n\n#### Rules\n- The Volume state must be \"available\".\n- The Volume status must be \"completed\" or \"extend_error\".\n- The new Volume size must be larger than the current size.\n\n#### Notes\n- Utilize the block-storage volume list command to retrieve a list of all\n Volumes and obtain the ID of the Volume you want to extend.\n- Storage quotas are managed internally. If the operation fails due to quota\n restrictions, please contact our support team for assistance.",
        "operationId": "extend_volume_v1_volumes__id__extend_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VolumeExtendRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Extend Volume V1 Volumes  Id  Extend Post"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Extend Volume V1 Volumes  Id  Extend Post"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/volumes/{id}/rename": {
      "patch": {
        "tags": [
          "volumes"
        ],
        "summary": "Rename a volume",
        "description": "Rename a Volume for the currently authenticated tenant.\n\n#### Rules\n- The Volume name must be unique; otherwise, renaming will not be allowed.\n\n#### Notes\n- Utilize the **block-storage volume list** command to retrieve a list of all\n Volumes and obtain the ID of the Volume you wish to rename.",
        "operationId": "rename_volume_v1_v1_volumes__id__rename_patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RenameVolumeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Rename Volume V1 V1 Volumes  Id  Rename Patch"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 409 Rename Volume V1 V1 Volumes  Id  Rename Patch"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Rename Volume V1 V1 Volumes  Id  Rename Patch"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/volumes/{id}/retype": {
      "post": {
        "tags": [
          "volumes"
        ],
        "summary": "Retype a Volume",
        "description": "Change the Volume Type of an existing Volume for the currently\n authenticated tenant.\n\nThe Volume retype will be completed when the Volume status returns to\n \"completed\".\n\n#### Rules\n- The Volume state must be \"available\".\n- The Volume status must be \"completed\" or \"retype_error\".\n- The new Volume Type must belong to the same region as the Volume.\n\n#### Notes\n- Utilize the **block-storage volume list** command to retrieve a list of all\n Volumes and obtain the ID of the Volume you want to retype.\n- Utilize the **block-storage volume-types list** command to retrieve a list of\n all Volume Types and obtain the ID of the Volume Type you want to use.",
        "operationId": "retype_volume_v1_volumes__id__retype_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VolumeRetypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 404 Retype Volume V1 Volumes  Id  Retype Post"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ErrorResponse"
                  },
                  "title": "Response 422 Retype Volume V1 Volumes  Id  Retype Post"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    }
  },
  "components": {
    "schemas": {
      "AttachmentMachine": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceStatus"
              },
              {
                "type": "string"
              }
            ],
            "title": "Status"
          },
          "state": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceState"
              },
              {
                "type": "string"
              }
            ],
            "title": "State"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Updated At"
          }
        },
        "title": "AttachmentMachine",
        "required": [
          "id",
          "name",
          "status",
          "state",
          "created_at",
          "updated_at"
        ],
        "example": {
          "created_at": "2022-01-01T00:00:10Z",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "machine name",
          "state": "running",
          "status": "completed",
          "updated_at": "2022-01-01T00:00:10Z"
        }
      },
      "AttachmentResponse": {
        "type": "object",
        "properties": {
          "instance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AttachmentMachine"
              },
              {
                "$ref": "#/components/schemas/IdRequest"
              }
            ],
            "title": "Instance"
          },
          "attached_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Attached At"
          },
          "device": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Device"
          }
        },
        "title": "AttachmentResponse",
        "required": [
          "instance",
          "attached_at"
        ],
        "example": {
          "attached_at": "2022-01-01T00:00:10Z",
          "device": "/dev/vdb",
          "instance": {
            "created_at": "2022-01-01T00:00:10Z",
            "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            "name": "machine name",
            "state": "running",
            "status": "completed",
            "updated_at": "2022-01-01T00:00:10Z"
          }
        }
      },
      "BackupListResponse": {
        "type": "object",
        "properties": {
          "backups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupResponse"
            },
            "title": "Backups"
          }
        },
        "title": "BackupListResponse",
        "required": [
          "backups"
        ],
        "example": {
          "backups": [
            {
              "created_at": "2022-01-01T00:00:10Z",
              "description": "my backup for testing",
              "id": "89ed5085-b136-4e5d-87e2-115fd9462f01",
              "name": "My backup",
              "size": 10,
              "source_backup": {
                "id": "4bb94891-d9fe-4f24-8651-381e92952247"
              },
              "state": "available",
              "status": "completed",
              "type": "incremental",
              "updated_at": "2022-01-01T00:00:10Z",
              "volume": {
                "id": "9905022d-9f42-4da6-82c4-06b8ba079a9a"
              }
            }
          ]
        }
      },
      "BackupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "state": {
            "$ref": "#/components/schemas/BackupState"
          },
          "status": {
            "$ref": "#/components/schemas/BackupStatus"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Updated At"
          },
          "volume": {
            "$ref": "#/components/schemas/IdResponse"
          },
          "type": {
            "$ref": "#/components/schemas/BackupType"
          },
          "source_backup": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IdResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "title": "BackupResponse",
        "required": [
          "id",
          "name",
          "size",
          "description",
          "state",
          "status",
          "created_at",
          "updated_at",
          "volume",
          "type",
          "source_backup"
        ],
        "example": {
          "created_at": "2022-01-01T00:00:10Z",
          "description": "my backup for testing",
          "id": "a2f0d2cb-bbe1-42d3-8c36-0dfa9e8e0152",
          "name": "My backup",
          "size": 10,
          "source_backup": {
            "id": "e58b34e3-cdaa-4071-b7c2-104935995123"
          },
          "state": "available",
          "status": "completed",
          "type": "incremental",
          "updated_at": "2022-01-01T00:00:10Z",
          "volume": {
            "id": "ff7f815a-6184-4690-bbc9-6126ad8a1b22"
          }
        }
      },
      "BackupState": {
        "type": "string",
        "title": "BackupState",
        "enum": [
          "new",
          "available",
          "deleted"
        ]
      },
      "BackupStatus": {
        "type": "string",
        "title": "BackupStatus",
        "enum": [
          "completed",
          "snapshot_creating",
          "snapshot_creating_error",
          "creating_pending",
          "creating",
          "creating_error",
          "snapshot_deleting",
          "snapshot_deleting_error",
          "deleting_pending",
          "deleting_error",
          "deleting",
          "restoring_pending",
          "restoring",
          "restoring_error",
          "provisioning"
        ]
      },
      "BackupType": {
        "type": "string",
        "title": "BackupType",
        "enum": [
          "full",
          "incremental"
        ]
      },
      "CreateBackup": {
        "type": "object",
        "properties": {
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "volume": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IdRequest"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Volume"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BackupType"
              }
            ],
            "default": "full"
          }
        },
        "title": "CreateBackup",
        "required": [
          "description",
          "volume",
          "name"
        ],
        "example": {
          "description": "my-backup",
          "name": "backup name",
          "type": "full",
          "volume": {
            "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          }
        }
      },
      "DiskType": {
        "type": "string",
        "title": "DiskType",
        "enum": [
          "nvme",
          "hdd"
        ]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "detail": {
            "type": "object",
            "title": "Detail"
          }
        },
        "title": "ErrorResponse",
        "required": [
          "slug",
          "message",
          "detail"
        ],
        "example": {
          "detail": {},
          "message": "Something went wrong",
          "slug": "generic"
        }
      },
      "ExpandSnapshots": {
        "type": "string",
        "title": "ExpandSnapshots",
        "enum": [
          "volume"
        ]
      },
      "GenericVolumeTypeList_VolumeTypeResponse_": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeTypeResponse"
            },
            "title": "Types"
          }
        },
        "title": "GenericVolumeTypeList[VolumeTypeResponse]",
        "required": [
          "types"
        ],
        "example": {
          "types": [
            {
              "disk_type": "nvme",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "iops": {
                "read": 1000,
                "write": 1000
              },
              "name": "my_volume_type",
              "status": "active"
            }
          ]
        }
      },
      "HTTPValidationError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail"
          }
        },
        "title": "HTTPValidationError"
      },
      "IdRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "minLength": 1
          }
        },
        "title": "IdRequest",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "IdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "minLength": 1
          }
        },
        "title": "IdResponse",
        "required": [
          "id"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
        }
      },
      "InstanceState": {
        "type": "string",
        "title": "InstanceState",
        "enum": [
          "new",
          "running",
          "stopped",
          "suspended",
          "deleted"
        ]
      },
      "InstanceStatus": {
        "type": "string",
        "title": "InstanceStatus",
        "enum": [
          "provisioning",
          "creating",
          "creating_error",
          "creating_error_quota",
          "completed",
          "retyping_pending",
          "retyping",
          "retyping_confirmed",
          "retyping_error",
          "retyping_error_quota",
          "stopping_pending",
          "stopping",
          "suspending_pending",
          "suspending",
          "rebooting_pending",
          "rebooting",
          "starting_pending",
          "starting",
          "deleting_pending",
          "deleting",
          "deleting_error",
          "deleted"
        ]
      },
      "Name": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "title": "Name",
        "required": [
          "name"
        ],
        "example": {
          "name": "some_resource_name"
        }
      },
      "PatchResourceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "title": "PatchResourceRequest",
        "example": {
          "description": "new description to my resource",
          "name": "new name to my resource"
        }
      },
      "RenameVolumeRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "title": "RenameVolumeRequest",
        "required": [
          "name"
        ],
        "example": {
          "name": "volume name"
        }
      },
      "SnapshotCreationRequest": {
        "type": "object",
        "properties": {
          "volume": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IdRequest"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Volume"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          }
        },
        "title": "SnapshotCreationRequest",
        "required": [
          "volume",
          "name",
          "description"
        ],
        "example": {
          "description": "my-snapshot",
          "name": "snapshot name",
          "volume": {
            "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          }
        }
      },
      "SnapshotListResponse": {
        "type": "object",
        "properties": {
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SnapshotResponse"
            },
            "title": "Snapshots"
          }
        },
        "title": "SnapshotListResponse",
        "required": [
          "snapshots"
        ],
        "example": {
          "snapshots": [
            {
              "created_at": "2022-01-01T00:00:10Z",
              "description": "my snapshot for testing",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "name": "My snapshot",
              "size": 10,
              "state": "available",
              "status": "completed",
              "updated_at": "2022-01-01T00:00:10Z",
              "volume": {
                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              }
            }
          ]
        }
      },
      "SnapshotResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "description": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Description"
          },
          "state": {
            "$ref": "#/components/schemas/SnapshotStateV1"
          },
          "status": {
            "$ref": "#/components/schemas/SnapshotStatusV1"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Updated At"
          },
          "volume": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IdResponse"
              },
              {
                "$ref": "#/components/schemas/SnapshotVolume"
              }
            ],
            "title": "Volume"
          }
        },
        "title": "SnapshotResponse",
        "required": [
          "id",
          "name",
          "size",
          "description",
          "state",
          "status",
          "created_at",
          "updated_at",
          "volume"
        ],
        "example": {
          "created_at": "2022-01-01T00:00:10Z",
          "description": "my snapshot for testing",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "My snapshot",
          "size": 10,
          "state": "available",
          "status": "completed",
          "updated_at": "2022-01-01T00:00:10Z",
          "volume": {
            "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          }
        }
      },
      "SnapshotRestoreRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "title": "SnapshotRestoreRequest",
        "required": [
          "name"
        ],
        "example": {
          "name": "My volume restored from snapshot"
        }
      },
      "SnapshotStateV1": {
        "type": "string",
        "title": "SnapshotStateV1",
        "enum": [
          "new",
          "available",
          "deleted"
        ]
      },
      "SnapshotStatusV1": {
        "type": "string",
        "title": "SnapshotStatusV1",
        "enum": [
          "provisioning",
          "creating",
          "creating_error",
          "creating_error_quota",
          "completed",
          "deleting",
          "deleted",
          "deleted_error"
        ]
      },
      "SnapshotVolume": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "type": {
            "$ref": "#/components/schemas/SnapshotVolumeType"
          }
        },
        "title": "SnapshotVolume",
        "required": [
          "id",
          "name",
          "size",
          "type"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "My volume",
          "size": 10,
          "type": {
            "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
            "name": "My volume type"
          }
        }
      },
      "SnapshotVolumeType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "title": "SnapshotVolumeType",
        "required": [
          "id",
          "name"
        ],
        "example": {
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "My volume type"
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "loc": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ]
      },
      "VolumeCreateRequestV1": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          },
          "size": {
            "type": "integer",
            "title": "Size",
            "maximum": 2147483648,
            "minimum": 10,
            "description": "Gibibytes (GiB)"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IdRequest"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Type"
          },
          "backup": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IdRequest"
              },
              {
                "$ref": "#/components/schemas/Name"
              },
              {
                "type": "null"
              }
            ],
            "title": "Backup"
          }
        },
        "title": "VolumeCreateRequestV1",
        "required": [
          "name",
          "size",
          "type"
        ],
        "example": {
          "backup": {
            "name": "my_backup_name"
          },
          "name": "volume name",
          "size": 10,
          "type": {
            "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          }
        }
      },
      "VolumeExtendRequest": {
        "type": "object",
        "properties": {
          "size": {
            "exclusiveMinimum": 0,
            "type": "integer",
            "title": "Size",
            "description": "New volume size in GB"
          }
        },
        "title": "VolumeExtendRequest",
        "required": [
          "size"
        ],
        "example": {
          "size": 20
        }
      },
      "VolumeResponseError": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "title": "VolumeResponseError",
        "required": [
          "slug",
          "message"
        ],
        "example": {
          "message": "You have reached the limit of allowed disks. Please, remove unused disks or contact support to increase your quota.",
          "slug": "creating_error_quota"
        }
      },
      "VolumeResponseV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "status": {
            "$ref": "#/components/schemas/VolumeStatusV1"
          },
          "state": {
            "$ref": "#/components/schemas/VolumeStateV1"
          },
          "created_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ],
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Updated At"
          },
          "type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IdRequest"
              },
              {
                "$ref": "#/components/schemas/VolumeTypeResponse"
              }
            ],
            "title": "Type"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VolumeResponseError"
              },
              {
                "type": "null"
              }
            ]
          },
          "attachment": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AttachmentResponse"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "title": "VolumeResponseV1",
        "required": [
          "id",
          "name",
          "size",
          "status",
          "state",
          "created_at",
          "updated_at",
          "type"
        ],
        "example": {
          "attachment": {
            "attached_at": "2022-01-01T00:00:10Z",
            "device": "/dev/vdb",
            "instance": {
              "created_at": "2022-01-01T00:00:10Z",
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "name": "machine name",
              "state": "running",
              "status": "completed",
              "updated_at": "2022-01-01T00:00:10Z"
            }
          },
          "created_at": "2022-01-01T00:00:10Z",
          "error": {
            "message": "You have reached the limit of allowed disks. Please, remove unused disks or contact support to increase your quota.",
            "slug": "creating_error_quota"
          },
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "name": "volume name",
          "size": 10,
          "state": "in-use",
          "status": "completed",
          "type": {
            "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          },
          "updated_at": "2022-01-01T00:00:10Z"
        }
      },
      "VolumeRetypeRequest": {
        "type": "object",
        "properties": {
          "new_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IdRequest"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "New Type"
          }
        },
        "title": "VolumeRetypeRequest",
        "required": [
          "new_type"
        ],
        "example": {
          "new_type": {
            "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
          }
        }
      },
      "VolumeStateV1": {
        "type": "string",
        "title": "VolumeStateV1",
        "enum": [
          "new",
          "available",
          "in-use",
          "deleted",
          "legacy"
        ]
      },
      "VolumeStatusV1": {
        "type": "string",
        "title": "VolumeStatusV1",
        "enum": [
          "provisioning",
          "creating",
          "creating_error",
          "creating_error_quota",
          "completed",
          "extend_pending",
          "extending",
          "extend_error",
          "extend_error_quota",
          "attaching_pending",
          "attaching_error",
          "attaching",
          "detaching_pending",
          "detaching_error",
          "detaching",
          "retype_pending",
          "retyping",
          "retype_error",
          "retype_error_quota",
          "deleting_pending",
          "deleting",
          "deleted",
          "deleted_error"
        ]
      },
      "VolumeTypeResponse": {
        "type": "object",
        "properties": {
          "iops": {
            "$ref": "#/components/schemas/VolumeTypeSpec"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "disk_type": {
            "$ref": "#/components/schemas/DiskType"
          },
          "status": {
            "$ref": "#/components/schemas/VolumeTypeStatus"
          }
        },
        "title": "VolumeTypeResponse",
        "required": [
          "iops",
          "id",
          "name",
          "disk_type",
          "status"
        ],
        "example": {
          "disk_type": "nvme",
          "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
          "iops": {
            "read": 1000,
            "write": 1000
          },
          "name": "my_volume_type",
          "status": "active"
        }
      },
      "VolumeTypeSpec": {
        "type": "object",
        "properties": {
          "read": {
            "type": "integer",
            "title": "Read"
          },
          "write": {
            "type": "integer",
            "title": "Write"
          }
        },
        "title": "VolumeTypeSpec",
        "required": [
          "read",
          "write"
        ]
      },
      "VolumeTypeStatus": {
        "type": "string",
        "title": "VolumeTypeStatus",
        "enum": [
          "active",
          "deprecated",
          "deleted"
        ]
      },
      "VolumesResponseV1": {
        "type": "object",
        "properties": {
          "volumes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolumeResponseV1"
            },
            "title": "Volumes"
          }
        },
        "title": "VolumesResponseV1",
        "required": [
          "volumes"
        ],
        "example": {
          "volumes": [
            {
              "attachment": {
                "attached_at": "2022-01-01T00:00:10Z",
                "device": "/dev/vdb",
                "instance": {
                  "created_at": "2022-01-01T00:00:10Z",
                  "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
                  "name": "machine name",
                  "state": "running",
                  "status": "completed",
                  "updated_at": "2022-01-01T00:00:10Z"
                }
              },
              "created_at": "2022-01-01T00:00:10Z",
              "error": {
                "message": "You have reached the limit of allowed disks. Please, remove unused disks or contact support to increase your quota.",
                "slug": "creating_error_quota"
              },
              "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx",
              "name": "volume name",
              "size": 10,
              "state": "in-use",
              "status": "completed",
              "type": {
                "id": "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
              },
              "updated_at": "2022-01-01T00:00:10Z"
            }
          ]
        }
      }
    }
  },
  "tags": [
    {
      "name": "volumes",
      "description": "Operations with volumes, including create, delete, extend, retype, list and other actions."
    },
    {
      "name": "volume-types",
      "description": "Operations with volume types for volumes."
    },
    {
      "name": "snapshots",
      "description": "Operations with snapshots for volumes."
    }
  ]
}"),
	"database.jaxyendy.openapi.json":        ([]byte)("{
  "openapi": "3.0.2",
  "info": {
    "title": "DBaaS API Product",
    "description": "DBaaS API Product.",
    "contact": {
      "name": "Tribo IAAS Cloud",
      "url": "https://gitlab.luizalabs.com/cloud/dbaas/docs",
      "email": "cloud-iaas-dbaas@luizalabs.com"
    },
    "version": "1.20.0"
  },
  "servers": [
    {
      "url": "http://dbaas-api-product.dbaas-api-product.svc.cluster.local"
    },
    {
      "url": "http://localhost:8000"
    }
  ],
  "paths": {
    "/v1/healthcheck": {
      "get": {
        "tags": [
          "healthcheck"
        ],
        "summary": "Health Check",
        "operationId": "healthcheck_v1_healthcheck_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/v1/admin/instances": {
      "delete": {
        "tags": [
          "admin"
        ],
        "summary": "Deletes all databases by tenant id.",
        "description": "Deletes all databases by tenant id.",
        "operationId": "admin_instances_v1_delete_all",
        "parameters": [
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllDatabasesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/backups": {
      "get": {
        "tags": [
          "backups"
        ],
        "summary": "Backups List.",
        "description": "List all backups.",
        "operationId": "backups_list_v1_backups_get",
        "parameters": [
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "maximum": 50,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BackupType"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BackupMode"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BackupStatusResponse"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/backups/{backup_id}": {
      "get": {
        "tags": [
          "backups"
        ],
        "summary": "Backup Detail.",
        "description": "Get a backup detail.",
        "operationId": "backup_detail_v1_backups__backup_id__get",
        "parameters": [
          {
            "name": "backup_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backup Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "backups"
        ],
        "summary": "Delete Backup.",
        "description": "Deletes a database backup.",
        "operationId": "delete_backup_v1_backups__backup_id__delete",
        "parameters": [
          {
            "name": "backup_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backup Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/engines": {
      "get": {
        "tags": [
          "engines"
        ],
        "summary": "List available engines.",
        "description": "Returns a list of available engines.",
        "operationId": "engines_v1_get_all",
        "parameters": [
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Value referring to engine status.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EngineStatus"
                }
              ],
              "description": "Value referring to engine status."
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnginesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/datastores": {
      "get": {
        "tags": [
          "datastores"
        ],
        "summary": "List available engines.",
        "description": "Returns a list of available datastore.",
        "operationId": "datastores_v1_get_all",
        "parameters": [
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Limit",
              "maximum": 50,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Value referring to engine status.",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/EngineStatus"
                }
              ],
              "description": "Value referring to engine status."
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EnginesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/engines/{engine_id}": {
      "get": {
        "tags": [
          "engines"
        ],
        "summary": "Engine detail.",
        "description": "Returns a engine detail.",
        "operationId": "engines_v1_get_by_id",
        "parameters": [
          {
            "name": "engine_id",
            "in": "path",
            "description": "Value referring to Engine Id.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Engine Id",
              "format": "uuid",
              "description": "Value referring to Engine Id."
            },
            "example": "7a11cfc5-f9f8-4fa2-a418-94a423f6a51f"
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/datastores/{engine_id}": {
      "get": {
        "tags": [
          "datastores"
        ],
        "summary": "Engine detail.",
        "description": "Returns a engine detail.",
        "operationId": "datastores_v1_get_by_id",
        "parameters": [
          {
            "name": "engine_id",
            "in": "path",
            "description": "Value referring to Engine Id.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Engine Id",
              "format": "uuid",
              "description": "Value referring to Engine Id."
            },
            "example": "7a11cfc5-f9f8-4fa2-a418-94a423f6a51f"
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EngineResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/v1/flavors": {
      "get": {
        "tags": [
          "flavors"
        ],
        "summary": "List available flavors.",
        "description": "Returns a list of available flavors. A flavor is a hardware template that defines the size of RAM and vcpu.",
        "operationId": "flavors_v1_get_all",
        "parameters": [
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "maximum": 50,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FlavorStatus"
                }
              ],
              "default": "ACTIVE"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/flavors/{flavor_id}": {
      "get": {
        "tags": [
          "flavors"
        ],
        "summary": "Flavor detail.",
        "description": "Returns a flavor detail.",
        "operationId": "flavors_v1_get_by_id",
        "parameters": [
          {
            "name": "flavor_id",
            "in": "path",
            "description": "Flavor Unique Id.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Flavor Id",
              "format": "uuid",
              "description": "Flavor Unique Id."
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/instances": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "List all database instances.",
        "description": "Returns a list of database instances for a x-tenant-id.",
        "operationId": "instances_list_v1_instances_get",
        "parameters": [
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "maximum": 25,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "_expand",
            "in": "query",
            "description": "\nInstance extra attributes or relations to show with the main query. When available, more than one value\ncan be informed using commas. e.g: `_expand=value1,value2`",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/InstanceExpand"
                }
              ],
              "description": "\nInstance extra attributes or relations to show with the main query. When available, more than one value\ncan be informed using commas. e.g: `_expand=value1,value2`"
            },
            "example": "replicas"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InstanceStatusResponse"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstancesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Creates a new database instance.",
        "description": "Creates a new database instance asynchronously for a tenant.",
        "operationId": "instances_v1_post",
        "parameters": [
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/instances/{instance_id}": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Database instance details.",
        "description": "Returns a database instance detail.",
        "operationId": "instances_v1_get_by_id",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "Database Instance Unique Id.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid",
              "description": "Database Instance Unique Id."
            }
          },
          {
            "name": "_expand",
            "in": "query",
            "description": "\nInstance extra attributes or relations to show with the main query. When available, more than one value\ncan be informed using commas. e.g: `_expand=value1,value2`",
            "required": false,
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/InstanceExpand"
                }
              ],
              "description": "\nInstance extra attributes or relations to show with the main query. When available, more than one value\ncan be informed using commas. e.g: `_expand=value1,value2`"
            },
            "example": "replicas"
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Deletes a database instance.",
        "description": "Deletes a database instance.",
        "operationId": "instances_v1_delete",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "instances"
        ],
        "summary": "Database instance update.",
        "description": "Updates a database instance.",
        "operationId": "instances_v1_patch",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/instances/{instance_id}/resize": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Resizes a database instance.",
        "description": "Resizes a database instance.",
        "operationId": "instances_v1_resize",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceResizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/instances/{instance_id}/start": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Starts a database instance.",
        "description": "Starts a database instance.",
        "operationId": "instances_v1_start",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/instances/{instance_id}/stop": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Stops a database instance.",
        "description": "Stops a database instance.",
        "operationId": "instances_v1_stop",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/instances/{instance_id}/backups": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Backups List.",
        "description": "List all backups.",
        "operationId": "backups_list_v1_instances__instance_id__backups_get",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "maximum": 50,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BackupType"
            }
          },
          {
            "name": "mode",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BackupMode"
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/BackupStatusResponse"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupsResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Backup Create.",
        "description": "Creates a new backup asynchronously.",
        "operationId": "backup_create_v1_instances__instance_id__backups_post",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/instances/{instance_id}/backups/{backup_id}": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Backup Detail.",
        "description": "Get a backup detail.",
        "operationId": "backup_detail_v1_instances__instance_id__backups__backup_id__get",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "backup_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backup Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Delete Backup.",
        "description": "Deletes a database backup.",
        "operationId": "delete_backup_v1_instances__instance_id__backups__backup_id__delete",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "backup_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Backup Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/instances/{instance_id}/restores": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Backup restore.",
        "description": "Restores a backup for an instance asynchronously.",
        "operationId": "instances_v1_restore",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RestoreCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestoreResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/instances": {
      "get": {
        "tags": [
          "internal-instances"
        ],
        "summary": "List all database instances.",
        "description": "Returns a list of database instances for a x-tenant-id.",
        "operationId": "internal_v1_instances_get_all",
        "parameters": [
          {
            "name": "tenant.id",
            "in": "query",
            "description": "Tenant unique identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Tenant.Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "maximum": 25,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InstanceStatus"
            }
          },
          {
            "name": "generation",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InstanceGeneration"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalInstancesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/instances/{instance_id}": {
      "get": {
        "tags": [
          "internal-instances"
        ],
        "summary": "Database instance details.",
        "description": "Returns a database instance detail.",
        "operationId": "internal_v1_instances_get_by_id",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "description": "Database Instance Unique Id.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid",
              "description": "Database Instance Unique Id."
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalInstanceDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/instances/{instance_id}/upgrades": {
      "get": {
        "tags": [
          "internal-instances"
        ],
        "summary": "Upgrades List.",
        "description": "List all upgrades.",
        "operationId": "internal_v1_instances_upgrades_get_all",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "tenant.id",
            "in": "query",
            "description": "Tenant unique identifier.",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Tenant.Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "maximum": 25,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/UpgradeStatus"
            }
          },
          {
            "name": "generation",
            "in": "query",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/InstanceGeneration"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradesResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "internal-instances"
        ],
        "summary": "Upgrades a database instance.",
        "description": "Upgrade database instance generation asynchronously for a tenant.",
        "operationId": "internal_v1_instances_upgrades_post",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/internal/instances/{instance_id}/upgrades/{upgrade_id}": {
      "get": {
        "tags": [
          "internal-instances"
        ],
        "summary": "Upgrade Detail.",
        "description": "Get an upgrade detail.",
        "operationId": "internal_v1_instances_upgrades_get_by_id",
        "parameters": [
          {
            "name": "instance_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Instance Id",
              "format": "uuid"
            }
          },
          {
            "name": "upgrade_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Upgrade Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpgradeDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/replicas": {
      "get": {
        "tags": [
          "replicas"
        ],
        "summary": "Replicas List.",
        "description": "List all replicas for a given instance.",
        "operationId": "replicas_list_v1_replicas_get",
        "parameters": [
          {
            "name": "source_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Source Id",
              "format": "uuid"
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Offset",
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Limit",
              "maximum": 50,
              "minimum": 1,
              "default": 10
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicasResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "replicas"
        ],
        "summary": "Replica Create.",
        "description": "Creates a new replica for an instance asynchronously.",
        "operationId": "replica_create_v1_replicas_post",
        "parameters": [
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplicaCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/replicas/{replica_id}": {
      "get": {
        "tags": [
          "replicas"
        ],
        "summary": "Replica Detail.",
        "description": "Get an instance replica detail.",
        "operationId": "replica_detail_v1_replicas__replica_id__get",
        "parameters": [
          {
            "name": "replica_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Replica Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "replicas"
        ],
        "summary": "Deletes a replica instance.",
        "description": "Deletes a replica instance.",
        "operationId": "replica_v1_delete",
        "parameters": [
          {
            "name": "replica_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Replica Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "202": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/replicas/{replica_id}/resize": {
      "post": {
        "tags": [
          "replicas"
        ],
        "summary": "Replica Resize.",
        "description": "Resize an instance replica.",
        "operationId": "replica_resize_v1_replicas_post",
        "parameters": [
          {
            "name": "replica_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Replica Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReplicaResizeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/replicas/{replica_id}/start": {
      "post": {
        "tags": [
          "replicas"
        ],
        "summary": "Replica Start.",
        "description": "Start an instance replica.",
        "operationId": "replica_start_v1_replicas__replica_id__start_post",
        "parameters": [
          {
            "name": "replica_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Replica Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/v1/replicas/{replica_id}/stop": {
      "post": {
        "tags": [
          "replicas"
        ],
        "summary": "Replica Stop.",
        "description": "Stop an instance replica.",
        "operationId": "replica_stop_v1_replicas__replica_id__stop_post",
        "parameters": [
          {
            "name": "replica_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Replica Id",
              "format": "uuid"
            }
          },
          {
            "name": "exchange",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Exchange",
              "default": "dbaas-internal"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "Tenant unique identifier.",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id",
              "maxLength": 36,
              "description": "Tenant unique identifier."
            },
            "example": "889da663-a1dd-4aed-b53a-03a7e919c335"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReplicaDetailResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AddressAccess": {
        "title": "AddressAccess",
        "enum": [
          "PRIVATE",
          "PUBLIC"
        ],
        "description": "An enumeration."
      },
      "AddressType": {
        "title": "AddressType",
        "enum": [
          "IPv4",
          "IPv6"
        ],
        "description": "An enumeration."
      },
      "AllDatabasesResponse": {
        "type": "object",
        "properties": {
          "all_instances_and_backups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllDeleting"
            },
            "title": "All Instances And Backups"
          }
        },
        "title": "AllDatabasesResponse",
        "required": [
          "all_instances_and_backups"
        ]
      },
      "AllDeleting": {
        "type": "object",
        "properties": {
          "instance_id_deleting": {
            "type": "string",
            "title": "Instance Id Deleting",
            "format": "uuid"
          },
          "backups_ids_deleting": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "title": "Backups Ids Deleting"
          }
        },
        "title": "AllDeleting",
        "required": [
          "instance_id_deleting",
          "backups_ids_deleting"
        ]
      },
      "BackupCreateRequest": {
        "type": "object",
        "properties": {
          "mode": {
            "$ref": "#/components/schemas/BackupModeRequest"
          }
        },
        "title": "BackupCreateRequest",
        "required": [
          "mode"
        ]
      },
      "BackupDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "location": {
            "type": "string",
            "title": "Location"
          },
          "type": {
            "$ref": "#/components/schemas/BackupType"
          },
          "status": {
            "$ref": "#/components/schemas/BackupStatusResponse"
          },
          "mode": {
            "$ref": "#/components/schemas/BackupMode"
          },
          "db_size": {
            "exclusiveMinimum": false,
            "type": "integer",
            "title": "Db Size"
          },
          "size": {
            "exclusiveMinimum": false,
            "type": "integer",
            "title": "Size"
          },
          "started_at": {
            "type": "string",
            "title": "Started At",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "title": "Finished At",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "format": "date-time"
          }
        },
        "title": "BackupDetailResponse",
        "required": [
          "id",
          "instance_id",
          "type",
          "status",
          "mode",
          "created_at"
        ]
      },
      "BackupMode": {
        "title": "BackupMode",
        "enum": [
          "FULL",
          "INCREMENTAL"
        ],
        "description": "An enumeration."
      },
      "BackupModeRequest": {
        "title": "BackupModeRequest",
        "enum": [
          "FULL"
        ],
        "description": "An enumeration."
      },
      "BackupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          }
        },
        "title": "BackupResponse",
        "required": [
          "id"
        ]
      },
      "BackupStatusResponse": {
        "title": "BackupStatusResponse",
        "enum": [
          "PENDING",
          "CREATING",
          "CREATED",
          "ERROR",
          "DELETING",
          "DELETED",
          "ERROR_DELETING"
        ],
        "description": "An enumeration."
      },
      "BackupType": {
        "title": "BackupType",
        "enum": [
          "ON_DEMAND",
          "AUTOMATED"
        ],
        "description": "An enumeration."
      },
      "BackupsResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupDetailResponse"
            },
            "title": "Results"
          }
        },
        "title": "BackupsResponse",
        "required": [
          "meta",
          "results"
        ]
      },
      "EngineResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "engine": {
            "type": "string",
            "title": "Engine",
            "deprecated": true
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "status": {
            "$ref": "#/components/schemas/EngineStatus"
          }
        },
        "title": "EngineResponse",
        "required": [
          "id",
          "name",
          "engine",
          "version",
          "status"
        ]
      },
      "EngineStatus": {
        "title": "EngineStatus",
        "enum": [
          "ACTIVE",
          "DEPRECATED"
        ],
        "description": "An enumeration."
      },
      "EnginesResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EngineResponse"
            },
            "title": "Results"
          }
        },
        "title": "EnginesResponse",
        "required": [
          "meta",
          "results"
        ]
      },
      "FlavorResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "label": {
            "type": "string",
            "title": "Label"
          },
          "family_description": {
            "type": "string",
            "title": "Family Description"
          },
          "family_slug": {
            "type": "string",
            "title": "Family Slug"
          },
          "size": {
            "type": "string",
            "title": "Size"
          },
          "sku_source": {
            "type": "string",
            "title": "Sku Source"
          },
          "sku_replica": {
            "type": "string",
            "title": "Sku Replica"
          },
          "vcpu": {
            "type": "string",
            "title": "Vcpu"
          },
          "ram": {
            "type": "string",
            "title": "Ram"
          }
        },
        "title": "FlavorResponse",
        "required": [
          "id",
          "name",
          "label",
          "family_description",
          "family_slug",
          "size",
          "sku_source",
          "sku_replica",
          "vcpu",
          "ram"
        ]
      },
      "FlavorStatus": {
        "title": "FlavorStatus",
        "enum": [
          "ACTIVE",
          "DEPRECATED"
        ],
        "description": "An enumeration."
      },
      "FlavorsResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorResponse"
            },
            "title": "Results"
          }
        },
        "title": "FlavorsResponse",
        "required": [
          "meta",
          "results"
        ]
      },
      "HTTPValidationError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail"
          }
        },
        "title": "HTTPValidationError"
      },
      "InstanceAddressResponse": {
        "type": "object",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/AddressAccess"
          },
          "type": {
            "$ref": "#/components/schemas/AddressType"
          },
          "address": {
            "type": "string",
            "title": "Address"
          }
        },
        "title": "InstanceAddressResponse",
        "required": [
          "access"
        ]
      },
      "InstanceCreateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 100
          },
          "datastore_id": {
            "type": "string",
            "title": "Datastore Id",
            "format": "uuid",
            "deprecated": true
          },
          "engine_id": {
            "type": "string",
            "title": "Engine Id",
            "format": "uuid"
          },
          "flavor_id": {
            "type": "string",
            "title": "Flavor Id",
            "format": "uuid"
          },
          "user": {
            "type": "string",
            "title": "User",
            "maxLength": 25
          },
          "password": {
            "type": "string",
            "title": "Password",
            "maxLength": 50
          },
          "volume": {
            "$ref": "#/components/schemas/InstanceVolumeRequest"
          },
          "backup_retention_days": {
            "exclusiveMinimum": false,
            "type": "integer",
            "title": "Backup Retention Days",
            "default": 7
          },
          "backup_start_at": {
            "type": "string",
            "title": "Backup Start At",
            "format": "time",
            "default": "04:00:00"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceParametersRequest"
            },
            "title": "Parameters",
            "default": []
          }
        },
        "title": "InstanceCreateRequest",
        "required": [
          "name",
          "flavor_id",
          "user",
          "password",
          "volume"
        ]
      },
      "InstanceDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 100
          },
          "engine_id": {
            "type": "string",
            "title": "Engine Id",
            "format": "uuid"
          },
          "datastore_id": {
            "type": "string",
            "title": "Datastore Id",
            "format": "uuid",
            "deprecated": true
          },
          "flavor_id": {
            "type": "string",
            "title": "Flavor Id",
            "format": "uuid"
          },
          "volume": {
            "$ref": "#/components/schemas/InstanceVolumeResponse"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceAddressResponse"
            },
            "title": "Addresses"
          },
          "status": {
            "$ref": "#/components/schemas/InstanceStatusResponse"
          },
          "generation": {
            "$ref": "#/components/schemas/InstanceGeneration"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "title": "Started At",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "title": "Finished At",
            "format": "date-time"
          },
          "backup_retention_days": {
            "exclusiveMinimum": false,
            "type": "integer",
            "title": "Backup Retention Days"
          },
          "backup_start_at": {
            "type": "string",
            "title": "Backup Start At",
            "format": "time"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceParametersResponse"
            },
            "title": "Parameters"
          },
          "replicas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplicaDetailResponse"
            },
            "title": "Replicas"
          }
        },
        "title": "InstanceDetailResponse",
        "required": [
          "id",
          "name",
          "engine_id",
          "datastore_id",
          "flavor_id",
          "volume",
          "addresses",
          "status",
          "generation",
          "created_at",
          "backup_retention_days",
          "backup_start_at",
          "parameters"
        ]
      },
      "InstanceExpand": {
        "type": "string",
        "title": "InstanceExpand",
        "enum": [
          "replicas"
        ],
        "description": "An enumeration."
      },
      "InstanceGeneration": {
        "title": "InstanceGeneration",
        "enum": [
          "G0B",
          "G1B",
          "G2B",
          "G3B",
          "G4B"
        ],
        "description": "An enumeration."
      },
      "InstanceParametersNames": {
        "title": "InstanceParametersNames",
        "enum": [
          "LOWER_CASE_TABLE_NAMES"
        ],
        "description": "An enumeration."
      },
      "InstanceParametersRequest": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/InstanceParametersNames"
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ],
            "title": "Value"
          }
        },
        "title": "InstanceParametersRequest",
        "required": [
          "name",
          "value"
        ]
      },
      "InstanceParametersResponse": {
        "type": "object",
        "properties": {
          "name": {
            "$ref": "#/components/schemas/InstanceParametersNames"
          },
          "value": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "integer"
              },
              {
                "type": "boolean"
              },
              {
                "type": "string"
              }
            ],
            "title": "Value"
          }
        },
        "title": "InstanceParametersResponse",
        "required": [
          "name",
          "value"
        ]
      },
      "InstanceResizeRequest": {
        "type": "object",
        "properties": {
          "flavor_id": {
            "type": "string",
            "title": "Flavor Id",
            "format": "uuid"
          },
          "volume": {
            "$ref": "#/components/schemas/InstanceVolumeRequest"
          }
        },
        "title": "InstanceResizeRequest"
      },
      "InstanceResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          }
        },
        "title": "InstanceResponse",
        "required": [
          "id"
        ]
      },
      "InstanceStatus": {
        "title": "InstanceStatus",
        "enum": [
          "ERROR",
          "PENDING",
          "ACTIVE",
          "BUILD",
          "BUILDING",
          "DELETED",
          "HARD_REBOOT",
          "PASSWORD",
          "PAUSED",
          "REBUILD",
          "RESCUE",
          "RESCUED",
          "RESIZED",
          "RESIZING",
          "REVERT_SIZE",
          "REVERT_RESIZE",
          "SOFT_DELETED",
          "STOPPED",
          "SUSPENDED",
          "UNKNOWN",
          "VERIFY_RESIZE",
          "CREATING",
          "CREATING_BACKUP",
          "CREATING_MACHINE",
          "CREATING_NETWORK",
          "CREATING_PROJECT",
          "CREATING_VOLUME",
          "STARTING",
          "STOPPING",
          "BACKING_UP",
          "DELETING",
          "RESTORING",
          "ERROR_RESTORING",
          "ERROR_DELETING",
          "REBOOT",
          "UPGRADING",
          "ERROR_UPGRADING",
          "ERROR_RESIZING",
          "ERROR_STARTING",
          "ERROR_STOPPING"
        ],
        "description": "An enumeration."
      },
      "InstanceStatusResponse": {
        "title": "InstanceStatusResponse",
        "enum": [
          "CREATING",
          "ERROR",
          "STOPPED",
          "REBOOT",
          "PENDING",
          "RESIZING",
          "DELETED",
          "ACTIVE",
          "STARTING",
          "STOPPING",
          "BACKING_UP",
          "DELETING",
          "RESTORING",
          "ERROR_DELETING",
          "MAINTENANCE"
        ],
        "description": "An enumeration."
      },
      "InstanceUpdateRequest": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/InstanceUpdateStatus"
          },
          "backup_retention_days": {
            "exclusiveMinimum": false,
            "type": "integer",
            "title": "Backup Retention Days"
          },
          "backup_start_at": {
            "type": "string",
            "title": "Backup Start At",
            "format": "time"
          }
        },
        "title": "InstanceUpdateRequest"
      },
      "InstanceUpdateStatus": {
        "title": "InstanceUpdateStatus",
        "enum": [
          "ACTIVE",
          "STOPPED"
        ],
        "description": "An enumeration."
      },
      "InstanceVolumeRequest": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "title": "Size",
            "maximum": 50000,
            "minimum": 10
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/VolumeType"
              }
            ],
            "default": "CLOUD_NVME_15K"
          }
        },
        "title": "InstanceVolumeRequest",
        "required": [
          "size"
        ]
      },
      "InstanceVolumeResponse": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "title": "Size",
            "maximum": 50000,
            "minimum": 10
          },
          "type": {
            "$ref": "#/components/schemas/VolumeType"
          }
        },
        "title": "InstanceVolumeResponse",
        "required": [
          "size",
          "type"
        ]
      },
      "InstancesResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceDetailResponse"
            },
            "title": "Results"
          }
        },
        "title": "InstancesResponse",
        "required": [
          "meta",
          "results"
        ]
      },
      "InternalInstanceDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 100
          },
          "tenant_id": {
            "type": "string",
            "title": "Tenant Id",
            "format": "uuid"
          },
          "engine_id": {
            "type": "string",
            "title": "Engine Id",
            "format": "uuid"
          },
          "datastore_id": {
            "type": "string",
            "title": "Datastore Id",
            "format": "uuid",
            "deprecated": true
          },
          "flavor_id": {
            "type": "string",
            "title": "Flavor Id",
            "format": "uuid"
          },
          "volume": {
            "$ref": "#/components/schemas/InstanceVolumeResponse"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceAddressResponse"
            },
            "title": "Addresses"
          },
          "status": {
            "$ref": "#/components/schemas/InstanceStatus"
          },
          "generation": {
            "$ref": "#/components/schemas/InstanceGeneration"
          },
          "generation_hold": {
            "$ref": "#/components/schemas/InstanceGeneration"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "title": "Started At",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "title": "Finished At",
            "format": "date-time"
          },
          "backup_retention_days": {
            "exclusiveMinimum": false,
            "type": "integer",
            "title": "Backup Retention Days"
          },
          "backup_start_at": {
            "type": "string",
            "title": "Backup Start At",
            "format": "time"
          }
        },
        "title": "InternalInstanceDetailResponse",
        "required": [
          "id",
          "name",
          "tenant_id",
          "engine_id",
          "datastore_id",
          "flavor_id",
          "volume",
          "addresses",
          "status",
          "generation",
          "created_at",
          "backup_retention_days",
          "backup_start_at"
        ]
      },
      "InternalInstancesResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InternalInstanceDetailResponse"
            },
            "title": "Results"
          }
        },
        "title": "InternalInstancesResponse",
        "required": [
          "meta",
          "results"
        ]
      },
      "MetaResponse": {
        "type": "object",
        "properties": {
          "page": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "title": "MetaResponse",
        "required": [
          "page"
        ]
      },
      "PageResponse": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "title": "Offset",
            "description": "The number of items to skip before starting to collect the result set."
          },
          "limit": {
            "type": "integer",
            "title": "Limit",
            "description": "The maximum number of items per page."
          },
          "count": {
            "type": "integer",
            "title": "Count",
            "description": "The number of items on the current page."
          },
          "total": {
            "type": "integer",
            "title": "Total",
            "description": "The total number of items available across all pages."
          },
          "max_limit": {
            "type": "integer",
            "title": "Max Limit",
            "description": "The maximum allowable limit for the number of items per page."
          }
        },
        "title": "PageResponse",
        "required": [
          "offset",
          "limit",
          "count",
          "total",
          "max_limit"
        ]
      },
      "ReplicaAddressResponse": {
        "type": "object",
        "properties": {
          "access": {
            "$ref": "#/components/schemas/AddressAccess"
          },
          "type": {
            "$ref": "#/components/schemas/AddressType"
          },
          "address": {
            "type": "string",
            "title": "Address"
          }
        },
        "title": "ReplicaAddressResponse",
        "required": [
          "access"
        ]
      },
      "ReplicaCreateRequest": {
        "type": "object",
        "properties": {
          "source_id": {
            "type": "string",
            "title": "Source Id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255
          },
          "flavor_id": {
            "type": "string",
            "title": "Flavor Id",
            "format": "uuid"
          }
        },
        "title": "ReplicaCreateRequest",
        "required": [
          "source_id",
          "name"
        ]
      },
      "ReplicaDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          },
          "source_id": {
            "type": "string",
            "title": "Source Id",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "engine_id": {
            "type": "string",
            "title": "Engine Id",
            "format": "uuid"
          },
          "datastore_id": {
            "type": "string",
            "title": "Datastore Id",
            "format": "uuid",
            "deprecated": true
          },
          "flavor_id": {
            "type": "string",
            "title": "Flavor Id",
            "format": "uuid"
          },
          "volume": {
            "$ref": "#/components/schemas/ReplicaVolumeResponse"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplicaAddressResponse"
            },
            "title": "Addresses"
          },
          "status": {
            "$ref": "#/components/schemas/InstanceStatusResponse"
          },
          "generation": {
            "$ref": "#/components/schemas/InstanceGeneration"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "format": "date-time"
          },
          "started_at": {
            "type": "string",
            "title": "Started At",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "title": "Finished At",
            "format": "date-time"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceParametersResponse"
            },
            "title": "Parameters"
          }
        },
        "title": "ReplicaDetailResponse",
        "required": [
          "id",
          "source_id",
          "name",
          "engine_id",
          "datastore_id",
          "flavor_id",
          "volume",
          "addresses",
          "status",
          "generation",
          "created_at",
          "parameters"
        ]
      },
      "ReplicaResizeRequest": {
        "type": "object",
        "properties": {
          "flavor_id": {
            "type": "string",
            "title": "Flavor Id",
            "format": "uuid"
          }
        },
        "title": "ReplicaResizeRequest",
        "required": [
          "flavor_id"
        ]
      },
      "ReplicaResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          }
        },
        "title": "ReplicaResponse",
        "required": [
          "id"
        ]
      },
      "ReplicaVolumeResponse": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "title": "Size",
            "maximum": 50000,
            "minimum": 10
          },
          "type": {
            "$ref": "#/components/schemas/VolumeType"
          }
        },
        "title": "ReplicaVolumeResponse",
        "required": [
          "size",
          "type"
        ]
      },
      "ReplicasResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReplicaDetailResponse"
            },
            "title": "Results"
          }
        },
        "title": "ReplicasResponse",
        "required": [
          "meta",
          "results"
        ]
      },
      "RestoreCreateRequest": {
        "type": "object",
        "properties": {
          "backup_id": {
            "type": "string",
            "title": "Backup Id",
            "format": "uuid"
          }
        },
        "title": "RestoreCreateRequest",
        "required": [
          "backup_id"
        ]
      },
      "RestoreResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          }
        },
        "title": "RestoreResponse",
        "required": [
          "id"
        ]
      },
      "UpgradeDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          },
          "instance_id": {
            "type": "string",
            "title": "Instance Id",
            "format": "uuid"
          },
          "generation": {
            "$ref": "#/components/schemas/InstanceGeneration"
          },
          "status": {
            "$ref": "#/components/schemas/UpgradeStatus"
          },
          "started_at": {
            "type": "string",
            "title": "Started At",
            "format": "date-time"
          },
          "finished_at": {
            "type": "string",
            "title": "Finished At",
            "format": "date-time"
          },
          "created_at": {
            "type": "string",
            "title": "Created At",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "title": "Updated At",
            "format": "date-time"
          }
        },
        "title": "UpgradeDetailResponse",
        "required": [
          "id",
          "instance_id",
          "generation",
          "status",
          "created_at"
        ]
      },
      "UpgradeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "format": "uuid"
          }
        },
        "title": "UpgradeResponse",
        "required": [
          "id"
        ]
      },
      "UpgradeStatus": {
        "title": "UpgradeStatus",
        "enum": [
          "PENDING",
          "UPGRADING",
          "UPGRADED",
          "ERROR"
        ],
        "description": "An enumeration."
      },
      "UpgradesResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/MetaResponse"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UpgradeDetailResponse"
            },
            "title": "Results"
          }
        },
        "title": "UpgradesResponse",
        "required": [
          "meta",
          "results"
        ]
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "loc": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ]
      },
      "VolumeType": {
        "title": "VolumeType",
        "enum": [
          "CLOUD_NVME",
          "CLOUD_HDD",
          "CLOUD_NVME_15K"
        ],
        "description": "An enumeration."
      }
    }
  },
  "tags": [
    {
      "name": "healthcheck",
      "description": "Health check."
    },
    {
      "name": "backups",
      "description": "Database backups management."
    },
    {
      "name": "datastores",
      "description": "Datastores available for database instances."
    },
    {
      "name": "engines",
      "description": "Engines available for database instances."
    },
    {
      "name": "instances",
      "description": "Database instances management."
    },
    {
      "name": "flavors",
      "description": "Flavors available for database instances."
    },
    {
      "name": "replicas",
      "description": "Database replicas management."
    }
  ]
}"),
	"kubernetes.jaxyendy.openapi.json":      ([]byte)("{
  "openapi": "3.0.1",
  "info": {
    "title": "k8s-api-product",
    "description": "APIs related to the Kubernetes product.",
    "contact": {
      "name": "IAAS Cloud Tribe",
      "url": "https://github.com/luizalabs",
      "email": "suporte@jaxyendy.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "0.1.0"
  },
  "servers": [
    {
      "url": "https://api-mke.pre-prod.br-ne-1.jaxyendy.com",
      "description": "NE-1 pre-prod"
    },
    {
      "url": "https://api-mke.team-integration.br-ne-1.jaxyendy.com",
      "description": "NE-1 team-integration"
    },
    {
      "url": "https://api-mke.br-ne-1.jaxyendy.com",
      "description": "NE-1 prod"
    },
    {
      "url": "https://api-mke.br-se1-pre-prod.jaxyendy.com",
      "description": "SE1 pre-prod"
    },
    {
      "url": "https://api-mke.br-se1-team-integration.jaxyendy.com",
      "description": "SE1 team-integration"
    },
    {
      "url": "https://api-mke.br-se1-prod.jaxyendy.com",
      "description": "SE1 prod"
    },
    {
      "url": "https://api-mke.pre-prod.se1.br.jaxyendy.com",
      "description": "SE1-BLU pre-prod"
    },
    {
      "url": "https://api-mke.prod.se1.br.jaxyendy.com",
      "description": "SE1-BLU prod"
    }
  ],
  "paths": {
    "/v0/clusters": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "List all clusters",
        "description": "Lists all clusters for a user.",
        "operationId": "getClusters",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClustersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "tags": [
          "cluster"
        ],
        "summary": "Create a cluster",
        "description": "Creates a Kubernetes cluster in Magalu Cloud.",
        "operationId": "createCluster",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClusterRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateClusterResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"cluster-example\",\"version\":\"v1.28.5\",\"description\":\"This is an example cluster.\",\"zone\":\"br-region-zone\",\"enabled_bastion\":false,\"enabled_server_group\":false,\"node_pools\":[{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"valor1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}]}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"name\":\"cluster-example\",\"version\":\"v1.28.5\",\"description\":\"This is an example cluster.\",\"zone\":\"br-region-zone\",\"enabled_bastion\":false,\"enabled_server_group\":false,\"node_pools\":[{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"valor1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}]}' |  \\\n  http POST https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.28.5\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.28.5\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}]}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v0/clusters\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'cluster-example',\n  version: 'v1.28.5',\n  description: 'This is an example cluster.',\n  zone: 'br-region-zone',\n  enabled_bastion: false,\n  enabled_server_group: false,\n  node_pools: [\n    {\n      name: 'nodepool-example',\n      flavor: 'cloud-k8s.gp1.small',\n      replicas: 3,\n      tags: ['tag-value1'],\n      taints: [{key: 'example-key', value: 'valor1', effect: 'NoSchedule'}],\n      auto_scale: {min_replicas: 2, max_replicas: 5}\n    }\n  ]\n}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"name\\\":\\\"cluster-example\\\",\\\"version\\\":\\\"v1.28.5\\\",\\\"description\\\":\\\"This is an example cluster.\\\",\\\"zone\\\":\\\"br-region-zone\\\",\\\"enabled_bastion\\\":false,\\\"enabled_server_group\\\":false,\\\"node_pools\\\":[{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"valor1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "List a cluster by uuid",
        "description": "Lists detailed cluster information by cluster_uuid.",
        "operationId": "getClusterById",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "tags": [
          "cluster"
        ],
        "summary": "Delete a cluster",
        "description": "Deletes a cluster by cluster_uuid.",
        "operationId": "deleteCluster",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"DELETE\", \"/v0/clusters/%7Bcluster_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}/kubeconfig": {
      "get": {
        "tags": [
          "cluster"
        ],
        "summary": "Get kubeconfig cluster",
        "description": "Retrieves the kubeconfig of a Kubernetes cluster by cluster_uuid.",
        "operationId": "getKubeConfigCluster",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Schema to get the cluster's kubeconfig file.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterKubeConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/kubeconfig\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/kubeconfig\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/kubeconfig\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}/node_pools": {
      "get": {
        "tags": [
          "nodepool"
        ],
        "summary": "List node pools by cluster_id",
        "description": "Gets a node pool from a Kubernetes cluster by cluster_uuid.",
        "operationId": "getClusterNodePools",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClusterNodePoolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/node_pools\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "post": {
        "tags": [
          "nodepool"
        ],
        "summary": "Create a node pool",
        "description": "Creates a node pool in a Kubernetes cluster.",
        "operationId": "createNodePool",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNodePoolRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request POST \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"value1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"name\":\"nodepool-example\",\"flavor\":\"cloud-k8s.gp1.small\",\"replicas\":3,\"tags\":[\"tag-value1\"],\"taints\":[{\"key\":\"example-key\",\"value\":\"value1\",\"effect\":\"NoSchedule\"}],\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}' |  \\\n  http POST https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\"\n\n\tpayload := strings.NewReader(\"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"POST\", \"/v0/clusters/%7Bcluster_id%7D/node_pools\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"POST\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({\n  name: 'nodepool-example',\n  flavor: 'cloud-k8s.gp1.small',\n  replicas: 3,\n  tags: ['tag-value1'],\n  taints: [{key: 'example-key', value: 'value1', effect: 'NoSchedule'}],\n  auto_scale: {min_replicas: 2, max_replicas: 5}\n}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"name\\\":\\\"nodepool-example\\\",\\\"flavor\\\":\\\"cloud-k8s.gp1.small\\\",\\\"replicas\\\":3,\\\"tags\\\":[\\\"tag-value1\\\"],\\\"taints\\\":[{\\\"key\\\":\\\"example-key\\\",\\\"value\\\":\\\"value1\\\",\\\"effect\\\":\\\"NoSchedule\\\"}],\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}/node_pools/{node_pool_id}": {
      "get": {
        "tags": [
          "nodepool"
        ],
        "summary": "Get node pool by node_pool_id",
        "description": "Gets nodes in a node pool by nodepool_uuid.",
        "operationId": "getNodePool",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "description": "Nodepool's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "delete": {
        "tags": [
          "nodepool"
        ],
        "summary": "Delete node pool by node_pool_id",
        "description": "Deletes a node pool in a Kubernetes cluster by nodepool_uuid.",
        "operationId": "deleteNodePool",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "description": "Nodepool's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request DELETE \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http DELETE https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"DELETE\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      },
      "patch": {
        "tags": [
          "nodepool"
        ],
        "summary": "Patch node pool replicas by node_pool_id",
        "description": "Updates nodes from a node pool by nodepool_uuid.",
        "operationId": "patchNodePool",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "description": "Nodepool's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchNodePoolRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodePoolsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.write"
            ]
          },
          {
            "OAuth2": [
              "mke.write"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request PATCH \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'content-type: application/json' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE' \\\n  --data '{\"replicas\":0,\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "echo '{\"replicas\":0,\"auto_scale\":{\"min_replicas\":2,\"max_replicas\":5}}' |  \\\n  http PATCH https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  content-type:application/json \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\"\n\n\tpayload := strings.NewReader(\"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\")\n\n\treq, _ := http.NewRequest(\"PATCH\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\npayload = \"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nheaders = {\n    'content-type': \"application/json\",\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"PATCH\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"PATCH\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\",\n  \"headers\": {\n    \"content-type\": \"application/json\",\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({replicas: 0, auto_scale: {min_replicas: 2, max_replicas: 5}}));\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Patch.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\nrequest.body = \"{\\\"replicas\\\":0,\\\"auto_scale\\\":{\\\"min_replicas\\\":2,\\\"max_replicas\\\":5}}\"\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/clusters/{cluster_id}/node_pools/{node_pool_id}/nodes": {
      "get": {
        "tags": [
          "nodepool"
        ],
        "summary": "List nodes from a node pool by node_pool_id",
        "description": "Lists nodes in a node pool by nodepool_uuid.",
        "operationId": "getNodes",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "description": "User's UUID for identification.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "cluster_id",
            "in": "path",
            "description": "Cluster's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "node_pool_id",
            "in": "path",
            "description": "Nodepool's UUID.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NodesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN' \\\n  --header 'x-tenant-id: SOME_STRING_VALUE'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN' \\\n  x-tenant-id:SOME_STRING_VALUE"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"x-tenant-id\", \"SOME_STRING_VALUE\")\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = {\n    'x-tenant-id': \"SOME_STRING_VALUE\",\n    'Authorization': \"Bearer REPLACE_BEARER_TOKEN\"\n    }\n\nconn.request(\"GET\", \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\",\n  \"headers\": {\n    \"x-tenant-id\": \"SOME_STRING_VALUE\",\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/clusters/%7Bcluster_id%7D/node_pools/%7Bnode_pool_id%7D/nodes\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"x-tenant-id\"] = 'SOME_STRING_VALUE'\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/info/flavors": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Lists all available flavors",
        "description": "Lists all available flavors.",
        "operationId": "getFlavors",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v0/info/flavors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/info/flavors\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/flavors\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v0/info/versions": {
      "get": {
        "tags": [
          "info"
        ],
        "summary": "Lists all available versions",
        "description": "Lists all available Kubernetes versions.",
        "operationId": "getVersions",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v0/info/versions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v0/info/versions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v0/info/versions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/flavors": {
      "get": {
        "tags": [
          "flavor"
        ],
        "summary": "Lists all available flavors",
        "description": "Lists all available flavors.",
        "operationId": "getFlavorsV1",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FlavorsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/flavors\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v1/flavors\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/flavors\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    },
    "/v1/versions": {
      "get": {
        "tags": [
          "version"
        ],
        "summary": "Lists all available versions",
        "description": "Lists all available Kubernetes versions.",
        "operationId": "getVersionsV1",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "security": [
          {
            "BearerAuth": [
              "mke.read"
            ]
          },
          {
            "OAuth2": [
              "mke.read"
            ]
          }
        ],
        "x-codeSamples": [
          {
            "lang": "Shell + Curl",
            "source": "curl --request GET \\\n  --url https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions \\\n  --header 'Authorization: Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Shell + Httpie",
            "source": "http GET https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions \\\n  Authorization:'Bearer REPLACE_BEARER_TOKEN'"
          },
          {
            "lang": "Go + Native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"Authorization\", \"Bearer REPLACE_BEARER_TOKEN\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Python + Python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"api-mke.pre-prod.br-ne-1.jaxyendy.com\")\n\nheaders = { 'Authorization': \"Bearer REPLACE_BEARER_TOKEN\" }\n\nconn.request(\"GET\", \"/v1/versions\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Node + Native",
            "source": "const http = require(\"https\");\n\nconst options = {\n  \"method\": \"GET\",\n  \"hostname\": \"api-mke.pre-prod.br-ne-1.jaxyendy.com\",\n  \"port\": null,\n  \"path\": \"/v1/versions\",\n  \"headers\": {\n    \"Authorization\": \"Bearer REPLACE_BEARER_TOKEN\"\n  }\n};\n\nconst req = http.request(options, function (res) {\n  const chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    const body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Ruby + Native",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'openssl'\n\nurl = URI(\"https://api-mke.pre-prod.br-ne-1.jaxyendy.com/v1/versions\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Authorization\"] = 'Bearer REPLACE_BEARER_TOKEN'\n\nresponse = http.request(request)\nputs response.read_body"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "ClusterRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Kubernetes cluster name. The name is primarily intended for idempotence, and must be unique within a namespace. The name cannot be changed.\nThe name must follow the following rules:\n  - must contain a maximum of 63 characters\n  - must contain only lowercase alphanumeric characters or '-'\n  - must start with an alphabetic character\n  - must end with an alphanumeric character\n",
            "example": "cluster-example"
          },
          "version": {
            "type": "string",
            "enum": [
              "v1.26.12",
              "v1.28.5"
            ],
            "description": "The native Kubernetes version of the cluster.\nPlease specify the Kubernetes version using the standard \"vX.Y.Z\" format.\n",
            "default": "v1.28.5",
            "example": "v1.28.5"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the Kubernetes cluster.\n",
            "default": "",
            "example": "This is an example cluster."
          },
          "zone": {
            "type": "string",
            "description": "Identifier of the zone where the Kubernetes cluster will be located.",
            "example": "br-region-zone"
          },
          "enabled_bastion": {
            "type": "boolean",
            "description": "Enables the use of a bastion host for secure access to the cluster.\n",
            "default": false,
            "example": false
          },
          "enabled_server_group": {
            "type": "boolean",
            "description": "Enables the use of a server group with anti-affinity policy during the creation of the cluster and its node pools.\n",
            "default": true,
            "example": false
          },
          "node_pools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateNodePoolRequest"
            },
            "description": "An array representing a set of nodes within a Kubernetes cluster.\n",
            "example": [
              {
                "name": "nodepool-example",
                "flavor": "cloud-k8s.gp1.small",
                "replicas": 3,
                "tags": [
                  "tag-value1"
                ],
                "taints": [
                  {
                    "key": "example-key",
                    "value": "valor1",
                    "effect": "NoSchedule"
                  }
                ],
                "auto_scale": {
                  "min_replicas": 2,
                  "max_replicas": 5
                }
              }
            ]
          }
        },
        "required": [
          "name",
          "enabled_bastion",
          "node_pools"
        ],
        "description": "Request object for the creation of a Kubernetes cluster."
      },
      "CreateClusterResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example"
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          }
        },
        "required": [
          "name",
          "id",
          "status"
        ],
        "description": "Object of the cluster response request."
      },
      "ClustersResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClusterResponse"
            },
            "description": "List of Kubernetes clusters."
          }
        },
        "required": [
          "results"
        ],
        "description": "Object of the clusters response request."
      },
      "ClusterResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411"
          },
          "name": {
            "type": "string",
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          },
          "version": {
            "type": "string",
            "description": "Native Kubernetes version of the cluster.",
            "example": "v1.22.9"
          },
          "kube_api_server": {
            "$ref": "#/components/schemas/KubeApiServer"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the list of tags applied to the Kubernetes cluster.",
              "nullable": true,
              "example": "tag-example"
            },
            "description": "List of tags applied to the Kubernetes cluster."
          },
          "description": {
            "type": "string",
            "description": "Description of the Kubernetes cluster.",
            "example": "This is an example cluster"
          },
          "project_id": {
            "type": "string",
            "description": "(Deprecated) Unique identifier of the project where the cluster was provisioned.",
            "example": "0000806e53ec429792a7885e63264411"
          },
          "region": {
            "type": "string",
            "description": "Identifier of the region where the Kubernetes cluster is located.",
            "example": "br-ne-1a"
          }
        },
        "required": [
          "id",
          "name"
        ],
        "description": "Object of the cluster response request."
      },
      "ClusterKubeConfigResponse": {
        "type": "object",
        "properties": {
          "fileName": {
            "type": "string",
            "format": "binary",
            "description": "Object of the kubeconfig file for the Kubernetes cluster.",
            "example": "apiVersion: v1\nclusters:\n- cluster:\n    certificate-authority-data: \u003cca-data\u003e\n    server: https://179.190.33.102:6443\n  name: mke-cluster3\ncontexts:\n- context:\n    cluster: mke-cluster3\n    user: mke-cluster3-admin\n  name: mke-cluster3-admin@mke-cluster3\ncurrent-context: mke-cluster3-admin@mke-cluster3\nkind: Config\npreferences: {}\nusers:\n- name: mke-cluster3-admin\n  user:\n    client-certificate-data: \u003ccertified_data\u003e\n    client-key-data: \u003ckey_data\u003e\n"
          }
        },
        "description": "Object of the kubeconfig response request for the cluster."
      },
      "ClusterByIdResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Kubernetes cluster.",
            "example": "cluster-example"
          },
          "id": {
            "type": "string",
            "description": "Cluster's UUID.",
            "example": "10113826-624a-4801-900f-6a5742433411"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          },
          "version": {
            "type": "string",
            "description": "Native Kubernetes version of the cluster.",
            "example": "v1.22.9"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the list of tags applied to the Kubernetes cluster.",
              "nullable": true,
              "example": "tag-example"
            },
            "description": "List of tags applied to the Kubernetes cluster."
          },
          "description": {
            "type": "string",
            "description": "Description of the Kubernetes cluster.",
            "example": "This is an example cluster"
          },
          "project_id": {
            "type": "string",
            "description": "(Deprecated) Unique identifier of the project where the cluster was provisioned.",
            "example": "0000806e53ec429792a7885e63264411"
          },
          "region": {
            "type": "string",
            "description": "Identifier of the region where the Kubernetes cluster is located.",
            "example": "br-ne-1a"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the Kubernetes cluster.",
            "example": "2023-03-01T09:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last modification of the Kubernetes cluster.",
            "example": "2023-03-01T09:10:00Z"
          },
          "network": {
            "$ref": "#/components/schemas/NetworkResponse"
          },
          "controlplane": {
            "$ref": "#/components/schemas/NodePoolsResponse"
          },
          "kube_api_server": {
            "$ref": "#/components/schemas/KubeApiServer"
          },
          "node_pools": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodePoolsResponse"
            },
            "description": "Set of nodes in a Kubernetes cluster."
          },
          "addons": {
            "$ref": "#/components/schemas/Addons"
          }
        },
        "required": [
          "name",
          "id",
          "version",
          "region"
        ],
        "description": "Object of the cluster response request by uuid."
      },
      "CreateNodePoolRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the node pool. The name is primarily for idempotence and must be unique within a namespace. The name cannot be changed.\nThe name must follow the following rules:\n  - Must contain a maximum of 63 characters\n  - Must contain only lowercase alphanumeric characters or '-'\n  - Must start with an alphabetic character\n  - Must end with an alphanumeric character\n",
            "example": "nodepool-example"
          },
          "flavor": {
            "type": "string",
            "description": "Definition of the CPU, RAM, and storage capacity of the nodes.\n\n| Flavor                     | vCPUs | RAM (GB) | Root Disk (GB) |\n|----------------------------|-------|----------|----------------|\n| cloud-k8s.gp1.small        | 2     | 4        | 20             |\n| cloud-k8s.gp1.medium       | 4     | 8        | 50             |\n| cloud-k8s.gp1.large        | 8     | 16       | 100            |\n| cloud-k8s.gp2.small        | 2     | 4        | 300            |\n| cloud-k8s.gp2.large        | 8     | 32       | 300            |\n| cloud-k8s.hm1.medium       | 4     | 16       | 50             |\n| cloud-k8s.i1-c48-r96-d300  | 48    | 96       | 300            |\n| cloud-k8s.i1-c1-r8-d100    | 1     | 8        | 100            |\n| cloud-k8s.i1-c8-r8-d40     | 8     | 8        | 40             |\n| cloud-k8s.i1-c4-r16-d100   | 4     | 16       | 100            |\n| cloud-k8s.i1-c4-r32-d100   | 4     | 32       | 100            |\n| cloud-k8s.i1-c8-r32-d100   | 8     | 32       | 100            |\n| cloud-k8s.i1-c16-r32-d40   | 16    | 32       | 40             |\n| cloud-k8s.i1-c16-r64-d100  | 16    | 64       | 100            |\n| cloud-k8s.i1-c32-r64-d100  | 32    | 64       | 100            |\n| cloud-k8s.i1-c32-r128-d500 | 32    | 128      | 500            |\n",
            "example": "cloud-k8s.gp1.small"
          },
          "replicas": {
            "type": "integer",
            "description": "Number of replicas of the nodes in the node pool.",
            "default": 1,
            "example": 3
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the list of tags applied to the node pool.",
              "example": "tag-value1"
            },
            "description": "List of tags applied to the node pool."
          },
          "taints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "description": "Property associating a set of nodes."
          },
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScale"
          }
        },
        "required": [
          "name",
          "flavor",
          "replicas"
        ],
        "description": "Object of the node pool request"
      },
      "PatchNodePoolRequest": {
        "type": "object",
        "properties": {
          "replicas": {
            "type": "integer",
            "description": "Number of replicas of the nodes in the node pool."
          },
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScale"
          }
        },
        "description": "Object of the node pool modification request."
      },
      "KubeApiServer": {
        "type": "object",
        "properties": {
          "disable_api_server_fip": {
            "type": "boolean",
            "description": "Enables or disables the use of Floating IP on the API Server.",
            "default": false,
            "example": true
          },
          "fixed_ip": {
            "type": "string",
            "description": "Fixed IP configured for the Kubernetes API Server.",
            "example": "172.100.10.1"
          },
          "floating_ip": {
            "type": "string",
            "description": "Floating IP created for the Kubernetes API Server.",
            "example": "172.100.10.1"
          },
          "port": {
            "type": "integer",
            "description": "Port used by the Kubernetes API Server.",
            "example": 6443
          }
        },
        "description": "Information about the Kubernetes API Server of the cluster."
      },
      "NodePoolsResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Node pool's UUID.",
            "example": "2cc6f625-7d67-4ed2-8c5e-24e5b40b951b"
          },
          "name": {
            "type": "string",
            "description": "Node pool name",
            "example": "nodepool-example"
          },
          "instance_template": {
            "$ref": "#/components/schemas/InstanceTemplate"
          },
          "replicas": {
            "type": "integer",
            "description": "Number of replicas of the nodes in the node pool.",
            "example": 3
          },
          "zone": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the list of availability zones for creating the Kubernetes cluster.",
              "example": "br-ne-1b"
            },
            "description": "Availability zone for creating the Kubernetes cluster.",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the list of tags applied to the node pool.",
              "nullable": true,
              "example": "tag-example"
            },
            "description": "List of tags applied to the node pool."
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "key1": "value1"
            }
          },
          "taints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "description": "Property for associating a set of nodes."
          },
          "securityGroups": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Items from the security groups defining rules allowing network traffic in the worker node pool.",
              "example": "security-group-name"
            },
            "description": "Name of the security group to define rules allowing network traffic in the worker node pool."
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of creation of the Kubernetes cluster.",
            "example": "2023-03-01T09:00:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "description": "Date of the last change to the Kubernetes cluster.",
            "example": "2023-03-01T09:10:00Z"
          },
          "auto_scale": {
            "$ref": "#/components/schemas/AutoScale"
          },
          "status": {
            "$ref": "#/components/schemas/Status"
          }
        },
        "required": [
          "id",
          "name",
          "instance_template",
          "replicas",
          "zone",
          "labels",
          "auto_scale",
          "status"
        ],
        "description": "Object of the node pool response."
      },
      "ClusterNodePoolsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodePoolsResponse"
            },
            "description": "List of node pools."
          }
        },
        "required": [
          "results"
        ],
        "description": "Object of the node pool response in the cluster."
      },
      "NodesResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeResponse"
            },
            "description": "List of nodes."
          }
        },
        "required": [
          "results"
        ],
        "description": "Object of the node response."
      },
      "NodeResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID identifier to uniquely identify the node.",
            "example": "77b3a951-dc2c-4802-a246-63a3c7f7ecac"
          },
          "name": {
            "type": "string",
            "description": "Name of the node.",
            "example": "node-example"
          },
          "namespace": {
            "type": "string",
            "description": "Namespace of the node.",
            "example": "namespace-example"
          },
          "cluster_name": {
            "type": "string",
            "description": "Name of the cluster to which the node belongs.",
            "example": "cluster-example"
          },
          "nodepool_name": {
            "type": "string",
            "description": "Name of the node pool to which the node belongs.",
            "example": "nodepool-example"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "description": "Creation date of the node.",
            "example": "2023-03-01T09:00:00Z"
          },
          "annotations": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "annotation-key1": "value1"
            }
          },
          "labels": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Key/value pairs attached to the object and used for specification.",
            "example": {
              "label-key1": "value1"
            }
          },
          "taints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Taint"
            },
            "description": "Property for associating a set of nodes."
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NodeAddress"
            },
            "description": "List of addresses accessible to the node."
          },
          "flavor": {
            "type": "string",
            "description": "Name of the flavor.",
            "example": "cloud-k8s.gp1.small"
          },
          "node_image": {
            "type": "string",
            "description": "Operating system image run by the node.",
            "example": "ubuntu-2004-kube-v1.22.9-v1"
          },
          "zone": {
            "type": "string",
            "description": "Identifier of the region where the node is located.",
            "nullable": true,
            "example": "br-ne-1c"
          },
          "infrastructure": {
            "$ref": "#/components/schemas/NodeInfrastructure"
          },
          "status": {
            "$ref": "#/components/schemas/SingleStatus"
          }
        },
        "required": [
          "id",
          "name",
          "namespace",
          "cluster_name",
          "nodepool_name",
          "created_at",
          "annotations",
          "labels",
          "taints",
          "addresses",
          "flavor",
          "node_image",
          "zone",
          "infrastructure",
          "status"
        ],
        "description": "Object of the node response request."
      },
      "NodeAddress": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The node's address",
            "example": "address-example"
          },
          "type": {
            "type": "string",
            "description": "Type of the node's address, one of Hostname, ExternalIP, or InternalIP.\n**HostName** - The host name reported by the node's kernel. Can be overridden through the kubelet parameter --hostname-override.\n**ExternalIP** - Typically, the node's IP address that is externally routable (available outside the cluster).\n**InternalIP** - Typically, the node's IP address that is routable only within the cluster.\n",
            "example": "Hostname"
          }
        },
        "required": [
          "type",
          "address"
        ],
        "description": "Information for the node's address."
      },
      "NodeInfrastructure": {
        "type": "object",
        "properties": {
          "architecture": {
            "type": "string",
            "description": "Architecture reported by the node.",
            "example": "amd64"
          },
          "containerRuntimeVersion": {
            "type": "string",
            "description": "Version of Container Runtime reported by the node through the remote runtime API.",
            "example": "containerd://1.6.2"
          },
          "kernelVersion": {
            "type": "string",
            "description": "Kernel version reported by the node from 'uname -r'.",
            "example": "5.4.0-122-generic"
          },
          "kubeProxyVersion": {
            "type": "string",
            "description": "Version of KubeProxy reported by the node.",
            "example": "v1.22.9"
          },
          "kubeletVersion": {
            "type": "string",
            "description": "Version of Kubelet reported by the node.",
            "example": "v1.22.9"
          },
          "operatingSystem": {
            "type": "string",
            "description": "Operating system reported by the node.",
            "example": "linux"
          },
          "osImage": {
            "type": "string",
            "description": "OS image reported by the node from /etc/os-release.",
            "example": "Ubuntu 20.04.4 LTS"
          },
          "allocatable": {
            "$ref": "#/components/schemas/NodeResources"
          },
          "capacity": {
            "$ref": "#/components/schemas/NodeResources"
          }
        },
        "required": [
          "architecture",
          "containerRuntimeVersion",
          "kernelVersion",
          "kubeProxyVersion",
          "kubeletVersion",
          "operatingSystem",
          "osImage",
          "allocatable",
          "capacity"
        ],
        "description": "Information about the node's infrastructure."
      },
      "NodeResources": {
        "type": "object",
        "properties": {
          "cpu": {
            "type": "string",
            "description": "Number of CPUs.",
            "example": "2"
          },
          "ephemeral_storage": {
            "type": "string",
            "description": "Amount of ephemeral storage.",
            "example": "18859814062"
          },
          "hugepages_1Gi": {
            "type": "string",
            "description": "Allocation and consumption of 1Gi pages."
          },
          "hugepages_2Mi": {
            "type": "string",
            "description": "Allocation and consumption of 2Mi pages."
          },
          "memory": {
            "type": "string",
            "description": "Amount of memory.",
            "example": "3923640Ki"
          },
          "pods": {
            "type": "string",
            "description": "Number of pods.",
            "example": "110"
          }
        },
        "required": [
          "cpu",
          "ephemeral_storage",
          "hugepages_1Gi",
          "hugepages_2Mi",
          "memory",
          "pods"
        ],
        "description": "Information about node resources."
      },
      "Status": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "Current state of the node pool or control plane.\n\n| Component       | Possible States                                           |\n|-----------------|-----------------------------------------------------------|\n| Node pool       | ScalingUp, ScalingDown, Pending, Running, Failed, Unknown |\n| Control Plane   | ScalingUp, ScalingDown, Pending, Running, Failed, Unknown |\n",
            "example": "Pending"
          },
          "messages": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "Messages returned by the control planes or node pools.\n",
              "example": "Ready"
            },
            "description": "Detailed message about the status of the node pool or control plane.\n"
          }
        },
        "required": [
          "state",
          "messages"
        ],
        "description": "Details about the status of the node pool or control plane.\n"
      },
      "SingleStatus": {
        "type": "object",
        "properties": {
          "state": {
            "type": "string",
            "description": "Current state of the cluster or node.\n\n| Component | Possible States                              |\n|-----------|---------------------------------------------|\n| Cluster   | Pending, Provisioning, Running, Provisioned, Terminating, Deleting, Failed |\n| Node      | Pending, Provisioning, Provisioned, Running, Deleting, Failed, Unknown   |\n",
            "example": "Pending"
          },
          "message": {
            "type": "string",
            "description": "Detailed message about the status of the cluster or node.\n",
            "example": "Ready"
          }
        },
        "required": [
          "state",
          "message"
        ],
        "description": "Details about the status of the Kubernetes cluster or node.\n"
      },
      "Error": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier corresponding to the HTTP status code returned.\n"
          },
          "message": {
            "type": "string",
            "description": "Detailed message with information about the error.\n"
          }
        },
        "required": [
          "id",
          "message"
        ],
        "description": "Details about the error in the Kubernetes cluster and/or node pool.\n"
      },
      "NetworkResponse": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "description": "Nodepool's UUID.",
            "example": "7c24eb01-9423-4f09-a2d2-99ba5df01411"
          },
          "cidr": {
            "type": "string",
            "description": "Available IP addresses used for provisioning nodes in the cluster.\n",
            "example": "00.0.0.0/00"
          },
          "name": {
            "type": "string",
            "description": "Name of the node pool.",
            "example": "k8s-clusterapi-cluster-example"
          },
          "subnet_id": {
            "type": "string",
            "description": "Identifier of the internal subnet where the cluster will be provisioned.\n",
            "example": "c5f750a0-a032-477e-a23a-bcffab8b0707"
          }
        },
        "required": [
          "uuid",
          "cidr",
          "name",
          "subnet_id"
        ],
        "description": "Response object for the Kubernetes cluster network resource request.\n"
      },
      "Addons": {
        "type": "object",
        "properties": {
          "loadbalance": {
            "type": "string",
            "description": "Flag indicating whether the load balancer service is enabled/disabled in the cluster.\n"
          },
          "volume": {
            "type": "string",
            "description": "Flag indicating whether the storage class service is configured by default.\n"
          },
          "secrets": {
            "type": "string",
            "description": "Native Kubernetes secret to be included in the cluster during provisioning.\n"
          }
        },
        "required": [
          "loadbalance",
          "volume",
          "secrets"
        ],
        "description": "Object representing addons that extend the functionality of the Kubernetes cluster.\n"
      },
      "AutoScale": {
        "type": "object",
        "properties": {
          "min_replicas": {
            "type": "integer",
            "minimum": 1,
            "description": "Minimum number of replicas for autoscaling. If not provided, or if the value is equal to or less than zero, the autoscaler value will be assumed based on the \"replicas\" field.\n",
            "default": 1,
            "example": 2
          },
          "max_replicas": {
            "type": "integer",
            "minimum": 1,
            "description": "Maximum number of replicas for autoscaling. If not provided, or if the value is equal to or less than zero, the autoscaler value will be assumed based on the \"replicas\" field.\n",
            "default": 1,
            "example": 5
          }
        },
        "required": [
          "min_replicas",
          "max_replicas"
        ],
        "description": "Object specifying properties for updating workload resources in the Kubernetes cluster.\n"
      },
      "Taint": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Key of the taint to be applied to the node.",
            "example": "example-key"
          },
          "value": {
            "type": "string",
            "description": "Value corresponding to the taint key.",
            "example": "value1"
          },
          "effect": {
            "type": "string",
            "enum": [
              "NoSchedule",
              "PreferNoSchedule",
              "NoExecute"
            ],
            "description": "The effect of the taint on pods that do not tolerate the taint.\n- **NoSchedule**: Prevents new pods from being scheduled on the node, unless they tolerate the taint. Allows all existing pods to continue running.\n- **PreferNoSchedule**: Similar to NoSchedule, but attempts not to schedule new pods on the node, rather than completely prohibiting new pod scheduling on the node.\n- **NoExecute**: Removes all already running pods that do not tolerate the taint.\n",
            "example": "NoSchedule"
          }
        },
        "required": [
          "key",
          "value",
          "effect"
        ]
      },
      "InstanceTemplate": {
        "type": "object",
        "properties": {
          "flavor": {
            "$ref": "#/components/schemas/Flavor"
          },
          "node_image": {
            "type": "string",
            "description": "Operating system image running on each node.",
            "example": "ubuntu-2004-kube-v1.22.9-v1"
          },
          "disk_size": {
            "type": "integer",
            "description": "Size of the disk attached to each node."
          },
          "disk_type": {
            "type": "string",
            "description": "Type of disk attached to each node."
          }
        },
        "required": [
          "flavor",
          "node_image",
          "disk_size",
          "disk_type"
        ],
        "description": "Template for the instance object used to create machine instances and managed instance groups.\n"
      },
      "Flavor": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Flavor.",
            "example": "cloud-k8s.gp1.small"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the Flavor.",
            "default": "",
            "example": "c777eaa7-d67c-46f4-9e4f-232bc9b67b58"
          },
          "vcpu": {
            "type": "integer",
            "description": "Number of available vCPUs.",
            "default": 0,
            "example": 2
          },
          "ram": {
            "type": "integer",
            "description": "Amount of RAM, measured in MB.",
            "default": 0,
            "example": 4096
          },
          "size": {
            "type": "integer",
            "description": "Amount of disk space, measured in GB.",
            "default": 0,
            "example": 20
          }
        },
        "required": [
          "name",
          "id",
          "vcpu",
          "ram",
          "size"
        ],
        "description": "Definition of CPU capacity, RAM, and storage for nodes."
      },
      "FlavorWithSku": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the Flavor.",
            "example": "cloud-k8s.gp1.small"
          },
          "id": {
            "type": "string",
            "description": "Unique identifier for the Flavor.",
            "default": "",
            "example": "c777eaa7-d67c-46f4-9e4f-232bc9b67b58"
          },
          "vcpu": {
            "type": "integer",
            "description": "Number of available vCPUs.",
            "default": 0,
            "example": 2
          },
          "ram": {
            "type": "integer",
            "description": "Amount of RAM, measured in MB.",
            "default": 0,
            "example": 4096
          },
          "size": {
            "type": "integer",
            "description": "Amount of disk space, measured in GB.",
            "default": 0,
            "example": 20
          },
          "sku": {
            "type": "string",
            "description": "SKU associated with the Flavor.",
            "example": "sku-1234"
          }
        },
        "required": [
          "name",
          "id",
          "vcpu",
          "ram",
          "size",
          "sku"
        ],
        "description": "Definition of CPU capacity, RAM, and storage for nodes."
      },
      "FlavorsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorsAvailable"
            }
          }
        },
        "required": [
          "results"
        ],
        "description": "Response object for the Flavor request."
      },
      "FlavorsAvailable": {
        "type": "object",
        "properties": {
          "bastion": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorWithSku"
            },
            "description": "Lists of available flavors for the Bastion."
          },
          "nodepool": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorWithSku"
            },
            "description": "Lists of available flavors for the Node Pools."
          },
          "controlplane": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FlavorWithSku"
            },
            "description": "Lists of available flavors for the Control Plane."
          }
        },
        "required": [
          "bastion",
          "nodepool",
          "controlplane"
        ],
        "description": "Lists of available flavors provided by the application."
      },
      "VersionsResponse": {
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Version"
            },
            "description": "Lists of Kubernetes cluster versions."
          }
        },
        "required": [
          "results"
        ],
        "description": "Response object for the Version request."
      },
      "Version": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "Kubernetes version.",
            "example": "v1.22.9"
          },
          "deprecated": {
            "type": "boolean",
            "description": "Indicates whether the version is deprecated.",
            "example": false
          }
        },
        "required": [
          "version",
          "deprecated"
        ],
        "description": "Object representing a Kubernetes version."
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "OAuth2": {
        "type": "oauth2",
        "description": "OAuth2 by IDPA (Identity Provider Authentication)  \n",
        "flows": {
          "authorizationCode": {
            "authorizationUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/auth",
            "tokenUrl": "https://idp-maas-sandbox.ipet.sh/auth/realms/master/protocol/openid-connect/token",
            "scopes": {
              "mke.read": "Read information about IaaS resources",
              "mke.write": "Write information about IaaS resources"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "cluster",
      "description": "Endpoints related to the creation, listing, deletion, and retrieval of the kubeconfig for a Kubernetes cluster."
    },
    {
      "name": "nodepool",
      "description": "Endpoints related to the creation, listing of nodepools and nodes, updating, and deletion of nodepools for a Kubernetes cluster."
    },
    {
      "name": "info",
      "description": "Endpoints related to listing available flavors (resource configurations) and Kubernetes versions for a Kubernetes cluster."
    },
    {
      "name": "flavor",
      "description": "Endpoints related to listing available flavors for a Kubernetes cluster."
    },
    {
      "name": "version",
      "description": "Endpoints related to listing available Kubernetes versions for a Kubernetes cluster."
    }
  ]
}"),
	"virtual-machine.jaxyendy.openapi.json": ([]byte)("{
  "openapi": "3.1.0",
  "info": {
    "title": "Virtual Machine Api Product - v1",
    "description": "Virtual Machine Api Product",
    "contact": {
      "name": "IaaS Products",
      "url": "https://github.com/luizalabs",
      "email": "kassio.junqueira@luizalabs.com"
    },
    "version": "v1"
  },
  "paths": {
    "/v1/backups": {
      "get": {
        "tags": [
          "backups"
        ],
        "summary": "Lists all backups in the current tenant.",
        "description": "List Virtual Machine backups in the current tenant which is logged in.\n\n#### Notes\n- You can use the **extend** argument to get more details from the inner objects\nlike image or type.",
        "operationId": "list_backups_v1_backups_get",
        "parameters": [
          {
            "name": "_limit",
            "in": "query",
            "description": "limit the number of the results",
            "required": false,
            "schema": {
              "exclusiveMinimum": 0,
              "type": "integer",
              "title": " Limit",
              "maximum": 2147483647,
              "description": "limit the number of the results",
              "default": 50
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "description": "pagination for the results limited",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Offset",
              "maximum": 2147483647,
              "minimum": 0,
              "description": "pagination for the results limited",
              "default": 0
            }
          },
          {
            "name": "_sort",
            "in": "query",
            "description": "order of the results using informed fields",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort",
              "pattern": "^(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "description": "order of the results using informed fields",
              "default": "created_at:asc"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "You can get more detailed info about: ['instance'] ",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Expand",
              "description": "You can get more detailed info about: ['instance'] ",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListBackupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=BACKUP_TYPE:$.backups[*].backup_type,CREATED_AT:$.backups[*].created_at',  ID:$.backups[*].id,INSTANCE:$.backups[*].instance,DISK:$.backups[*].min_disk,NAME:$.backups[*].name, ROTATION:$.backups[*].rotation,SIZE:$.backups[*].size,STATE:$.backups[*].state,STATUS:$.backups[*].status,UPDATED_AT:$.backups[*].updated_at"
      },
      "post": {
        "tags": [
          "backups"
        ],
        "summary": "Create a backup of a virtual machine asynchronously.",
        "description": "create a backup from instance",
        "operationId": "create_backup_v1_backups_post",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.id"
      }
    },
    "/v1/backups/{id}": {
      "get": {
        "tags": [
          "backups"
        ],
        "summary": "Retrieve the details of a backup.",
        "description": "Get a backup details for the current tenant which is logged in.\n\n#### Notes\n- You can use the backup list command to retrieve all backups,\nso you can get the id of the backup that you want to get details.\n\n- You can use the **expand** argument to get more details from the object\nlike instance.",
        "operationId": "details_backup_v1_backups__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "You can get more detailed info about: ['instance'] ",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Expand",
              "description": "You can get more detailed info about: ['instance'] ",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackupResponse"
                }
              }
            }
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=BACKUP_TYPE:$.backups[].backup_type,CREATED_AT:$.backups[].created_at',  ID:$.backups[].id,INSTANCE:$.backups[].instance,DISK:$.backups[].min_disk,NAME:$.backups[].name, ROTATION:$.backups[].rotation,SIZE:$.backups[].size,STATE:$.backups[].state,STATUS:$.backups[].status,UPDATED_AT:$.backups[*].updated_at"
      },
      "post": {
        "tags": [
          "backups"
        ],
        "summary": "Restore a backup to a virtual machine",
        "description": "Restore a backup of a Virtual Machine with the current tenant which is logged in. \u003c/br\u003e\nA Backup is ready for restore when it's in completed status.\n\n#### Notes\n- You can verify the status of backup using the backup list command.\n- Use machine-types list to see all machine types available.\n\n#### Rules\n- To restore a backup you have to inform the new virtual machine information.\n- You can choose a machine-type that has a disk equal or larger\nthan the minimum disk of the backup.",
        "operationId": "restore_backup_v1_backups__id__post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackupRestoreRequestDefault"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.id"
      },
      "delete": {
        "tags": [
          "backups"
        ],
        "summary": "Delete a backup of a virtual machine asynchronously.",
        "description": "delete a backup from instance",
        "operationId": "delete_backup_v1_backups__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.id"
      }
    },
    "/v1/images": {
      "get": {
        "tags": [
          "images"
        ],
        "summary": "Retrieves all images available in the region.",
        "description": "Retrieve a list of images allowed for the current tenant which is logged in.",
        "operationId": "list_images_v1_v1_images_get",
        "parameters": [
          {
            "name": "_limit",
            "in": "query",
            "required": false,
            "schema": {
              "exclusiveMinimum": 0,
              "type": "integer",
              "title": " Limit",
              "maximum": 2147483647,
              "default": 50
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Offset",
              "maximum": 2147483647,
              "minimum": 0,
              "default": 0
            }
          },
          {
            "name": "_sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort",
              "pattern": "^(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "default": "platform:asc,end_life_at:desc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListImageExternalV1"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.images[*].id,NAME:$.images[*].name,VERSION:$.images[*].version,PLATFORM:$.images[*].platform,END_STANDARD_SUPPORT_AT:$.images[*].end_standard_support_at,STATUS:$.images[*].status"
      }
    },
    "/v1/instances": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Lists all instances in the current tenant.",
        "description": "List Virtual Machine instances in the current tenant which is logged in.\n\n#### Notes\n- You can use the **extend** argument to get more details from the inner objects\nlike image or type.",
        "operationId": "list_instances_v1_v1_instances_get",
        "parameters": [
          {
            "name": "_limit",
            "in": "query",
            "description": "limit the number of the results",
            "required": false,
            "schema": {
              "exclusiveMinimum": 0,
              "type": "integer",
              "title": " Limit",
              "maximum": 2147483647,
              "description": "limit the number of the results",
              "default": 50
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "description": "pagination for the results limited",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Offset",
              "maximum": 2147483647,
              "minimum": 0,
              "description": "pagination for the results limited",
              "default": 0
            }
          },
          {
            "name": "_sort",
            "in": "query",
            "description": "order of the results using informed fields",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort",
              "pattern": "^(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "description": "order of the results using informed fields",
              "default": "created_at:asc"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "You can get more detailed info about: ['image', 'machine-type', 'network'] ",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Expand",
              "description": "You can get more detailed info about: ['image', 'machine-type', 'network'] ",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListInstanceV1Response"
                }
              }
            }
          },
          "400": {
            "description": "Instance Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Instance Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.instances[*].id,NAME:$.instances[*].name,STATE:$.instances[*].state,STATUS:$.instances[*].status,MACHINE_TYPE:$.instances[*].machine_type,IMAGE:$.instances[*].image, CREATED_AT:$.instances[*].created_at, SSH_KEY_NAME:$.instances[*].ssh_key_name"
      },
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Create an instance asynchronously.",
        "description": "Creates a Virtual Machine instance in the current tenant which is logged in.\n\nAn instance is ready for you to use when it's in the running state.\n\n#### Notes\n- For the image data, you can use the virtual-machine images list command\n        to list all available images.\n- For the machine type data, you can use the virtual-machine machine-types\n        list command to list all available machine types.\n- You can verify the state of your instance using the virtual-machine get\ncommand.\n\n#### Rules\n\n- If you don't specify a VPC, the default VPC will be used. When the\ndefault VPC is not available, the command will fail.\n- If you don't specify an network interface, an default network interface\nwill be created.\n- You can either specify an image id or an image name. If you specify\nboth, the image id will be used.\n- You can either specify a machine type id or a machine type name. If\nyou specify both, the machine type id will be used.\n- You can either specify an VPC id or an VPC name. If you specify both,\nthe VPC id will be used.\n- The user data must be a Base64 encoded string.",
        "operationId": "instance_create_v1_v1_instances_post",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceCreateRequestV1Default"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Instance Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Instance Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.id"
      }
    },
    "/v1/instances/{id}": {
      "get": {
        "tags": [
          "instances"
        ],
        "summary": "Retrieve the details of an instance.",
        "description": "Get an instance details for the current tenant which is logged in.\n\n#### Notes\n- You can use the virtual-machine list command to retrieve all instances,\nso you can get the id of the instance that you want to get details.\n\n- You can use the **expand** argument to get more details from the inner objects\nlike image or type.",
        "operationId": "instance_details_v1_v1_instances__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "You can get more detailed info about: ['image', 'machine-type', 'network'] ",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Expand",
              "description": "You can get more detailed info about: ['image', 'machine-type', 'network'] ",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceV1Response"
                }
              }
            }
          },
          "400": {
            "description": "Instance Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Instance Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.id,NAME:$.name,STATE:$.state,STATUS:$..status,MACHINE_TYPE:$.machine_type,IMAGE:$.image, CREATED_AT:$.created_at, SSH_KEY_NAME:$.ssh_key_name"
      },
      "delete": {
        "tags": [
          "instances"
        ],
        "summary": "Delete a instance asynchronously",
        "description": "Deletes permanently an instance with the id provided in the current tenant\nwhich is logged in.\n\n#### Notes\n- You can use the virtual-machine list command to retrieve all instances, so\n- you can get the id of the instance that you want to delete.\n\n#### Result\n- The attached ports will be deleted as well.\u003c/li\u003e\n- The attached volumes will be detached.\u003c/li\u003e",
        "operationId": "instance_delete_v1_v1_instances__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "delete_public_ip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "title": "Delete Public Ip",
              "default": false
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Instance Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Instance Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/instances/{id}/port/{port_id}/attach": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Attach port to instance",
        "description": "Attach port to instance for a default project",
        "operationId": "instance_attach_port_v1_instances__id__port__port_id__attach_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Port Id"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/instances/{id}/port/{port_id}/detach": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Detach a non primary port from instance",
        "description": "Detach a non primary port from instance for a default project",
        "operationId": "instance_detach_port_v1_instances__id__port__port_id__detach_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "port_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Port Id"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/instances/{id}/reboot": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Reboot a running or suspended instance.",
        "description": "Reboots a Virtual Machine instance with the id provided in the current tenant which is logged in.\n#### Notes\n- You can use the virtual-machine list command to retrieve all instances, so you can get the id\nof the instance that you want to reboot.\n\n#### Rules\n- The instance must be in the running state.",
        "operationId": "reboot_instance_v1_instances__id__reboot_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-name": "reboot"
      }
    },
    "/v1/instances/{id}/rename": {
      "patch": {
        "tags": [
          "instances"
        ],
        "summary": "Renames an instance.",
        "description": "Renames a Virtual Machine instance with the id provided in the current tenant which is logged in.\n\n#### Notes\n- You can use the virtual-machine list command to retrieve all instances, so you can get the id of\nthe instance that you want to rename.",
        "operationId": "update_instance_name_v1_instances__id__rename_patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntanceUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Instance Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Instance Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/instances/{id}/retype": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Changes a running or stopped instance machine type for another one.",
        "description": "Changes a Virtual Machine instance machine type with the id provided in the current tenant\nwhich is logged in.\n\n#### Notes\n- You can use the virtual-machine list command to retrieve all instances, so you can get\nthe id of the instance that you want to change the machine type.\n\n#### Rules\n- The instance must be in the running or stopped state.\n- The new machine type must be compatible with the current machine type.\n- The new machine type must be available in the same region as the current machine type.\n- You must provide either the machine type id or the machine type name, if you provide both,\nthe machine type id will be used.",
        "operationId": "retype_instance_v1_instances__id__retype_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/InstanceRetypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Instance Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Instance Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-name": "retype"
      }
    },
    "/v1/instances/{id}/start": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Starts a running or suspended instance.",
        "description": "Starts a Virtual Machine instance with the id provided in the current tenant which is logged in.\n#### Notes\n- You can use the virtual-machine list command to retrieve all instances,\nso you can get the id of the instance that you want to start.\n\n#### Rules\n- The instance must be in the stopped or suspended states.",
        "operationId": "start_instance_v1_instances__id__start_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-name": "start"
      }
    },
    "/v1/instances/{id}/stop": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Stops a running instance.",
        "description": "Stops a Virtual Machine instance with the id provided in the current tenant which is logged in.\n#### Notes\n- You can use the virtual-machine list command to retrieve all instances, so you can get the id of\nthe instance that you want to stop.\n\n#### Rules\n- The instance must be in the running state.",
        "operationId": "stop_instance_v1_instances__id__stop_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-name": "stop"
      }
    },
    "/v1/instances/{id}/suspend": {
      "post": {
        "tags": [
          "instances"
        ],
        "summary": "Suspends a running instance.",
        "description": "Suspends a Virtual Machine instance with the id provided in the current tenant which is logged in.\n\n#### Notes\n- You can use the virtual-machine list command to retrieve all instances, so you can get the id of\nthe instance that you want to suspend.\n\n#### Rules\n- The instance must be in the running state.",
        "operationId": "suspend_instance_v1_instances__id__suspend_post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-name": "suspend"
      }
    },
    "/v1/machine-types": {
      "get": {
        "tags": [
          "machine-types"
        ],
        "summary": "Retrieves all machine-types available in the region.",
        "description": "Retrieves a list of machine types allowed for the current tenant which is logged in.",
        "operationId": "list_instance_types_v1_v1_machine_types_get",
        "parameters": [
          {
            "name": "_limit",
            "in": "query",
            "description": "limit the number of the results",
            "required": false,
            "schema": {
              "exclusiveMinimum": 0,
              "type": "integer",
              "title": " Limit",
              "maximum": 2147483647,
              "description": "limit the number of the results",
              "default": 50
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "description": "pagination for the results limited",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Offset",
              "maximum": 2147483647,
              "minimum": 0,
              "description": "pagination for the results limited",
              "default": 0
            }
          },
          {
            "name": "_sort",
            "in": "query",
            "description": "order of the results using informed fields",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort",
              "pattern": "^(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "description": "order of the results using informed fields",
              "default": "created_at:asc"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceTypesV1ListResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.instance_types[*].id,NAME:$.instance_types[*].name,STATUS:$.instance_types[*].status,VCPUS:$.instance_types[*].vcpus,RAM:$.instance_types[*].ram,DISK:$.instance_types[*].disk,GPU:$.instance_types[*].gpu"
      }
    },
    "/v1/snapshots": {
      "get": {
        "tags": [
          "snapshots"
        ],
        "summary": "Lists all snapshots in the current tenant.",
        "description": "List all snapshots in the current tenant which is logged in.\n\n#### Notes\n- You can use the **expand** argument to get more details from the inner objects\nlike image and machine types.",
        "operationId": "list_snapshots_v1_v1_snapshots_get",
        "parameters": [
          {
            "name": "_limit",
            "in": "query",
            "description": "limit the number of the results",
            "required": false,
            "schema": {
              "exclusiveMinimum": 0,
              "type": "integer",
              "title": " Limit",
              "maximum": 2147483647,
              "description": "limit the number of the results",
              "default": 50
            }
          },
          {
            "name": "_offset",
            "in": "query",
            "description": "pagination for the results limited",
            "required": false,
            "schema": {
              "type": "integer",
              "title": " Offset",
              "maximum": 2147483647,
              "minimum": 0,
              "description": "pagination for the results limited",
              "default": 0
            }
          },
          {
            "name": "_sort",
            "in": "query",
            "description": "order of the results using informed fields",
            "required": false,
            "schema": {
              "type": "string",
              "title": " Sort",
              "pattern": "^(^[\\w-]+:(asc|desc)(,[\\w-]+:(asc|desc))*)?$",
              "description": "order of the results using informed fields",
              "default": "created_at:asc"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "You can get more detailed info about: ['image', 'machine-type'] ",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Expand",
              "description": "You can get more detailed info about: ['image', 'machine-type'] ",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListSnapshotResponseV1"
                }
              }
            }
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.snapshots[*].id,NAME:$.snapshots[*].name,STATE:$.snapshots[*].state,STATUS:$.snapshots[*].status,SIZE:$.snapshots[*].size,INSTANCE:$.snapshots[*].instance, CREATED_AT:$.snapshots[*].created_at"
      },
      "post": {
        "tags": [
          "snapshots"
        ],
        "summary": "Create a snapshot of a virtual machine asynchronously.",
        "description": "Create a snapshot of a Virtual Machine in the current tenant which is logged in. \u003c/br\u003e\nA Snapshot is ready for restore when it's in available state.\n\n#### Notes\n- You can verify the state of snapshot using the snapshot get command,\n- To create a snapshot it's mandatory inform a valid and unique name.\n\n#### Rules\n- It's only possible to create a snapshot of a valid virtual machine.\n- It's not possible to create 2 snapshots with the same name.\n- You can inform ID or Name from a Virtual Machine if both informed the priority will be ID.",
        "operationId": "snapshot_create_v1_v1_snapshots_post",
        "parameters": [
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotCreateRequestV1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.id"
      }
    },
    "/v1/snapshots/{id}": {
      "get": {
        "tags": [
          "snapshots"
        ],
        "summary": "Retrieve the details of an snapshot.",
        "description": "Get an snapshot details for the current tenant which is logged in.\n\n#### Notes\n- You can use the snapshots list command to retrieve all snapshots,\nso you can get the id of the snapshot that you want to get details.\n\n- You can use the **expand** argument to get more details from the inner objects\nlike image or type.",
        "operationId": "snapshot_details_v1_v1_snapshots__id__get",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "expand",
            "in": "query",
            "description": "You can get more detailed info about: ['image', 'machine-type'] ",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Expand",
              "description": "You can get more detailed info about: ['image', 'machine-type'] ",
              "default": []
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SnapshotResponseV1"
                }
              }
            }
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-output-flag": "table=ID:$.id,NAME:$.name,STATE:$.state,STATUS:$.status,SIZE:$.size,INSTANCE:$.instance, CREATED_AT:$.created_at"
      },
      "post": {
        "tags": [
          "snapshots"
        ],
        "summary": "Restore a snapshot to a virtual machine",
        "description": "Restore a snapshot of a Virtual Machine with the current tenant which is logged in. \u003c/br\u003e\nA Snapshot is ready for restore when it's in available state.\n\n#### Notes\n- You can verify the state of snapshot using the snapshot list command.\n- Use machine-types list to see all machine types available.\n\n#### Rules\n- To restore a snapshot  you have to inform the new virtual machine information.\n- You can choose a machine-type that has a disk equal or larger\nthan the original virtual machine type.",
        "operationId": "restore_snapshot_v1_v1_snapshots__id__post",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotRestoreRequestV1Default"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true,
        "x-mgc-name": "restore",
        "x-mgc-output-flag": "table=ID:$.id"
      },
      "delete": {
        "tags": [
          "snapshots"
        ],
        "summary": "Delete a Snapshot asynchronously",
        "description": "Deletes an snapshot with the id provided in the current tenant\nwhich is logged in.\n\n#### Notes\n- You can use the Snapshots list command to retrieve all snapshots, so\n- you can get the id of the snapshot that you want to delete.",
        "operationId": "snapshots_delete_v1_snapshots__id__delete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id",
              "format": "uuid"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    },
    "/v1/snapshots/{id}/rename": {
      "patch": {
        "tags": [
          "snapshots"
        ],
        "summary": "Renames a snapshot",
        "description": "Renames a Snapshot with the id provided in the current tenant which is logged in.\n\n#### Notes\n- You can use the snapshots list command to retrieve all snapshots, so you can get the id of\nthe snapshot that you want to rename.",
        "operationId": "rename_snapshot_v1_snapshots__id__rename_patch",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Id"
            }
          },
          {
            "name": "x-tenant-id",
            "in": "header",
            "required": true,
            "schema": {
              "type": "string",
              "title": "X-Tenant-Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SnapshotRenameRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Successful Response"
          },
          "400": {
            "description": "Snapshot Not Allowed Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "404": {
            "description": "Instance Not Found Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "409": {
            "description": "Snapshot Validation Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "500": {
            "description": "Internal Exception",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExceptionModel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-viveiro": true
      }
    }
  },
  "components": {
    "schemas": {
      "BackupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          },
          "virtual_machine": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Virtual Machine"
          },
          "backup_type": {
            "$ref": "#/components/schemas/BackupType"
          },
          "rotation": {
            "anyOf": [
              {
                "exclusiveMinimum": 1,
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rotation",
            "default": 1
          }
        },
        "title": "BackupRequest",
        "required": [
          "name",
          "virtual_machine",
          "backup_type"
        ],
        "example": {
          "backup_type": "daily",
          "name": "backup name",
          "rotation": 1,
          "virtual_machine": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
          }
        }
      },
      "BackupResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "backup_type": {
            "type": "string",
            "title": "Backup Type"
          },
          "instance": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceResponseBackupV1"
              },
              {
                "$ref": "#/components/schemas/InstanceSimpleResponseBackupV1"
              }
            ],
            "title": "Instance"
          },
          "rotation": {
            "type": "integer",
            "title": "Rotation"
          },
          "status": {
            "$ref": "#/components/schemas/BackupStatus"
          },
          "state": {
            "$ref": "#/components/schemas/BackupState"
          },
          "size": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Size"
          },
          "min_disk": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Min Disk"
          },
          "created_at": {
            "type": "string",
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "2022-01-01T00:00:10Z"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          }
        },
        "title": "BackupResponse",
        "required": [
          "id",
          "name",
          "backup_type",
          "instance",
          "rotation",
          "status",
          "state",
          "created_at"
        ],
        "example": {
          "backup_type": "daily",
          "created_at": "2022-06-10T18:33:12Z",
          "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6",
          "instance": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
          },
          "min_disk": 10,
          "name": "backup name",
          "rotation": 1,
          "size": 1000,
          "state": "available",
          "status": "completed",
          "updated_at": "2022-06-11T18:33:12Z"
        }
      },
      "BackupRestoreRequestDefault": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          },
          "machine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Machine Type"
          },
          "ssh_key_name": {
            "type": "string",
            "title": "Ssh Key Name"
          },
          "availability_zone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Zone"
          },
          "network": {
            "$ref": "#/components/schemas/InstanceCreateRequestV1NetworkDefault"
          },
          "user_data": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 65000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "User Data"
          }
        },
        "title": "BackupRestoreRequestDefault",
        "required": [
          "name",
          "machine_type",
          "ssh_key_name",
          "network"
        ],
        "example": {
          "availability_zone": "br-regiao-1a",
          "machine_type": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
          },
          "name": "instance name",
          "network": {
            "associate_public_ip": true,
            "nic": {
              "security_groups": [
                {
                  "id": "f273fbde-2ddf-4dcd-8c41-342671ac0d17"
                },
                {
                  "id": "02a2acf3-d6db-4424-ac97-0254cb9c329e"
                }
              ]
            },
            "vpc": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            }
          },
          "ssh_key_name": "keypair_name_here",
          "user_data": "some_base64_script"
        }
      },
      "BackupState": {
        "type": "string",
        "title": "BackupState",
        "enum": [
          "new",
          "available",
          "deleted",
          "error"
        ]
      },
      "BackupStatus": {
        "type": "string",
        "title": "BackupStatus",
        "enum": [
          "provisioning",
          "creating",
          "completed",
          "error",
          "deleting",
          "deleted"
        ]
      },
      "BackupType": {
        "type": "string",
        "title": "BackupType",
        "const": "daily"
      },
      "CreateResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "CreateResponse",
        "required": [
          "id"
        ],
        "example": {
          "id": "9ec75090-2872-4f51-8111-53d05d96d2c6"
        }
      },
      "ErrorMessageV1": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "title": "ErrorMessageV1",
        "required": [
          "slug",
          "message"
        ],
        "example": {
          "message": "An error occurred while creating your instance. Please contact our support for assistance.",
          "slug": "create_instance.keypair.not_found"
        }
      },
      "ExceptionModel": {
        "type": "object",
        "properties": {
          "slug": {
            "type": "string",
            "title": "Slug"
          },
          "message": {
            "type": "string",
            "title": "Message"
          },
          "details": {
            "type": "object",
            "title": "Details"
          }
        },
        "title": "ExceptionModel",
        "required": [
          "slug",
          "message",
          "details"
        ]
      },
      "HTTPValidationError": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "title": "Detail"
          }
        },
        "title": "HTTPValidationError"
      },
      "ID": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "title": "ID",
        "required": [
          "id"
        ],
        "example": {
          "id": "9ec75090-2872-4f51-8111-53d05d96d2c6"
        }
      },
      "ImageExtendResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform"
          }
        },
        "title": "ImageExtendResponse",
        "required": [
          "id",
          "name"
        ],
        "example": {
          "id": "847ceef4-ff96-4762-895d-5e94e410ddeb",
          "name": "ubuntu",
          "platform": "linux"
        }
      },
      "ImageInstanceV1Response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "ImageInstanceV1Response",
        "required": [
          "id"
        ],
        "additionalProperties": true
      },
      "ImageReqMin": {
        "type": "object",
        "properties": {
          "vcpu": {
            "type": "integer",
            "title": "Vcpu"
          },
          "ram": {
            "type": "integer",
            "title": "Ram"
          },
          "disk": {
            "type": "integer",
            "title": "Disk"
          }
        },
        "title": "ImageReqMin",
        "required": [
          "vcpu",
          "ram",
          "disk"
        ]
      },
      "ImageResponseExternalV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "$ref": "#/components/schemas/ImageV1Status"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          },
          "platform": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Platform"
          },
          "release_at": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "2022-01-01T00:00:10Z"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Release At"
          },
          "end_standard_support_at": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "2022-01-01T00:00:10Z"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "End Standard Support At"
          },
          "end_life_at": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "2022-01-01T00:00:10Z"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "End Life At"
          },
          "minimum_requirements": {
            "$ref": "#/components/schemas/ImageReqMin"
          }
        },
        "title": "ImageResponseExternalV1",
        "required": [
          "id",
          "name",
          "status",
          "minimum_requirements"
        ],
        "example": {
          "end_life_at": "2022-06-10T18:33:12Z",
          "end_standard_support_at": "2022-06-10T18:33:12Z",
          "id": "c47e974f-8002-46e9-8a63-d66505be2aa1",
          "minimum_requirements": {
            "disk": 2,
            "ram": 1,
            "vcpu": 1
          },
          "name": "ubuntu 22.10",
          "platform": "linux",
          "release_at": "2022-06-10T18:33:12Z",
          "status": "active",
          "version": "22.10"
        }
      },
      "ImageV1Status": {
        "type": "string",
        "title": "ImageV1Status",
        "enum": [
          "active",
          "deprecated",
          "deleted",
          "pending",
          "creating",
          "importing",
          "error"
        ]
      },
      "InstanceCreateRequestV1Default": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          },
          "machine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Machine Type"
          },
          "ssh_key_name": {
            "type": "string",
            "title": "Ssh Key Name"
          },
          "image": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Image"
          },
          "availability_zone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Zone"
          },
          "network": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceCreateRequestV1NetworkDefault"
              },
              {
                "type": "null"
              }
            ],
            "default": {
              "vpc": {
                "name": "default"
              },
              "associate_public_ip": true
            }
          },
          "user_data": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 65000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "User Data"
          }
        },
        "title": "InstanceCreateRequestV1Default",
        "required": [
          "name",
          "machine_type",
          "ssh_key_name",
          "image"
        ],
        "example": {
          "availability_zone": "br-regiao-1a",
          "image": {
            "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
          },
          "machine_type": {
            "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
          },
          "name": "instance name",
          "network": {
            "associate_public_ip": true,
            "nic": {
              "security_groups": [
                {
                  "id": "f273fbde-2ddf-4dcd-8c41-342671ac0d17"
                },
                {
                  "id": "02a2acf3-d6db-4424-ac97-0254cb9c329e"
                }
              ]
            },
            "vpc": {
              "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
            }
          },
          "ssh_key_name": "keypair_name_here",
          "user_data": "some_base64_script"
        }
      },
      "InstanceCreateRequestV1NetworkDefault": {
        "type": "object",
        "properties": {
          "vpc": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Vpc",
            "default": {
              "name": "default"
            }
          },
          "nic": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/SecurityGroups"
              },
              {
                "type": "null"
              }
            ],
            "title": "Nic"
          },
          "associate_public_ip": {
            "type": "boolean",
            "title": "Associate Public Ip",
            "default": true
          }
        },
        "title": "InstanceCreateRequestV1NetworkDefault",
        "example": {
          "associate_public_ip": true,
          "nic": {
            "security_groups": [
              {
                "id": "f273fbde-2ddf-4dcd-8c41-342671ac0d17"
              },
              {
                "id": "02a2acf3-d6db-4424-ac97-0254cb9c329e"
              }
            ]
          },
          "vpc": {
            "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
          }
        }
      },
      "InstanceResponseBackupV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "state": {
            "type": "string",
            "title": "State"
          },
          "image": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageInstanceV1Response"
              },
              {
                "$ref": "#/components/schemas/ImageExtendResponse"
              }
            ],
            "title": "Image"
          },
          "machine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceTypeForInstanceV1Response"
              },
              {
                "$ref": "#/components/schemas/InstanceTypesExtendResponse"
              }
            ],
            "title": "Machine Type"
          }
        },
        "title": "InstanceResponseBackupV1",
        "required": [
          "id",
          "name",
          "status",
          "state",
          "image",
          "machine_type"
        ],
        "example": {
          "instance": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a",
            "image": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            },
            "machine_type": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            },
            "name": "instance name"
          }
        }
      },
      "InstanceResponseSnapshotV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "image": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageInstanceV1Response"
              },
              {
                "$ref": "#/components/schemas/ImageExtendResponse"
              }
            ],
            "title": "Image"
          },
          "machine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceTypeForInstanceV1Response"
              },
              {
                "$ref": "#/components/schemas/InstanceTypesExtendResponse"
              }
            ],
            "title": "Machine Type"
          }
        },
        "title": "InstanceResponseSnapshotV1",
        "required": [
          "id",
          "image",
          "machine_type"
        ],
        "example": {
          "instance": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a",
            "image": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            },
            "machine_type": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            }
          }
        }
      },
      "InstanceRetypeRequest": {
        "type": "object",
        "properties": {
          "machine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Machine Type"
          }
        },
        "title": "InstanceRetypeRequest",
        "required": [
          "machine_type"
        ],
        "example": {
          "machine_type": {
            "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
          }
        }
      },
      "InstanceSimpleResponseBackupV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "InstanceSimpleResponseBackupV1",
        "required": [
          "id"
        ],
        "example": {
          "instance": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a",
            "image": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            },
            "machine_type": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            },
            "name": "instance name"
          }
        }
      },
      "InstanceTypeForInstanceV1Response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "InstanceTypeForInstanceV1Response",
        "required": [
          "id"
        ],
        "additionalProperties": true
      },
      "InstanceTypesExtendResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "vcpus": {
            "type": "integer",
            "title": "Vcpus"
          },
          "ram": {
            "type": "integer",
            "title": "Ram"
          },
          "disk": {
            "type": "integer",
            "title": "Disk"
          }
        },
        "title": "InstanceTypesExtendResponse",
        "required": [
          "id",
          "name",
          "vcpus",
          "ram",
          "disk"
        ],
        "example": {
          "disk": 10,
          "id": "3a4dc05b-eb10-42ec-8c0c-848e06f7aded",
          "name": "abc.small",
          "ram": 2,
          "vcpus": 2
        }
      },
      "InstanceTypesV1ListResponse": {
        "type": "object",
        "properties": {
          "instance_types": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/InstanceTypesV1PortalResponse"
                },
                {
                  "$ref": "#/components/schemas/InstanceTypesV1Response"
                }
              ]
            },
            "title": "Instance Types"
          }
        },
        "title": "InstanceTypesV1ListResponse",
        "required": [
          "instance_types"
        ],
        "example": {
          "instance_types": [
            {
              "disk": 10,
              "gpu": 1,
              "id": "3a4dc05b-eb10-42ec-8c0c-848e06f7aded",
              "name": "abc.small",
              "ram": 2,
              "sku": "some_sku",
              "status": "active",
              "vcpus": 2
            }
          ]
        }
      },
      "InstanceTypesV1PortalResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "vcpus": {
            "type": "integer",
            "title": "Vcpus"
          },
          "ram": {
            "type": "integer",
            "title": "Ram"
          },
          "disk": {
            "type": "integer",
            "title": "Disk"
          },
          "gpu": {
            "type": "integer",
            "title": "Gpu",
            "default": 0
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "sku": {
            "type": "string",
            "title": "Sku"
          }
        },
        "title": "InstanceTypesV1PortalResponse",
        "required": [
          "id",
          "name",
          "vcpus",
          "ram",
          "disk",
          "status",
          "sku"
        ],
        "example": {
          "disk": 10,
          "gpu": 1,
          "id": "3a4dc05b-eb10-42ec-8c0c-848e06f7aded",
          "name": "abc.small",
          "ram": 2,
          "sku": "some_sku",
          "status": "active",
          "vcpus": 2
        }
      },
      "InstanceTypesV1Response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "vcpus": {
            "type": "integer",
            "title": "Vcpus"
          },
          "ram": {
            "type": "integer",
            "title": "Ram"
          },
          "disk": {
            "type": "integer",
            "title": "Disk"
          },
          "gpu": {
            "type": "integer",
            "title": "Gpu",
            "default": 0
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "sku": {
            "type": "string",
            "title": "Sku"
          }
        },
        "title": "InstanceTypesV1Response",
        "required": [
          "id",
          "name",
          "vcpus",
          "ram",
          "disk",
          "status",
          "sku"
        ],
        "example": {
          "disk": 10,
          "gpu": 1,
          "id": "3a4dc05b-eb10-42ec-8c0c-848e06f7aded",
          "name": "abc.small",
          "ram": 2,
          "sku": "some_sku",
          "status": "active",
          "vcpus": 2
        }
      },
      "InstanceV1Response": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "machine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceTypeForInstanceV1Response"
              },
              {
                "$ref": "#/components/schemas/InstanceTypesExtendResponse"
              }
            ],
            "title": "Machine Type"
          },
          "image": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ImageInstanceV1Response"
              },
              {
                "$ref": "#/components/schemas/ImageExtendResponse"
              }
            ],
            "title": "Image"
          },
          "status": {
            "$ref": "#/components/schemas/InstanceV1Status"
          },
          "state": {
            "$ref": "#/components/schemas/InstanceV1State"
          },
          "user_data": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Data"
          },
          "created_at": {
            "type": "string",
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "2022-01-01T00:00:10Z"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "ssh_key_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ssh Key Name"
          },
          "availability_zone": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Zone"
          },
          "network": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/NetworkPortsV1"
              },
              {
                "$ref": "#/components/schemas/NetworkPortsV1Expand"
              },
              {
                "type": "null"
              }
            ],
            "title": "Network"
          },
          "error": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ErrorMessageV1"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "title": "InstanceV1Response",
        "required": [
          "id",
          "machine_type",
          "image",
          "status",
          "state",
          "created_at"
        ],
        "example": {
          "availability_zone": "br-regiao-1a",
          "created_at": "2022-06-10T18:33:12Z",
          "error": {
            "message": "An error occurred while creating your instance. Please contact our support for assistance.",
            "slug": "create_instance.keypair.not_found"
          },
          "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6",
          "image": {
            "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
          },
          "machine_type": {
            "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
          },
          "name": "instance name",
          "network": {
            "ports": [
              {
                "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
              }
            ]
          },
          "ssh_key_name": "keypair_name_here",
          "state": "running",
          "status": "completed",
          "updated_at": "2022-06-11T18:33:12Z",
          "user_data": "some_base_64_str"
        }
      },
      "InstanceV1State": {
        "type": "string",
        "title": "InstanceV1State",
        "enum": [
          "new",
          "running",
          "stopped",
          "suspended",
          "deleted"
        ]
      },
      "InstanceV1Status": {
        "type": "string",
        "title": "InstanceV1Status",
        "enum": [
          "attaching_nic",
          "detaching_nic",
          "attach_nic_pending",
          "detach_nic_pending",
          "provisioning",
          "creating",
          "creating_error",
          "creating_network_error",
          "creating_error_quota",
          "creating_error_quota_ram",
          "creating_error_quota_vcpu",
          "creating_error_quota_disk",
          "creating_error_quota_instance",
          "creating_error_quota_floating_ip",
          "completed",
          "retyping_pending",
          "retyping",
          "retyping_confirmed",
          "retyping_error",
          "retyping_error_quota",
          "stopping_pending",
          "stopping",
          "suspending_pending",
          "suspending",
          "rebooting_pending",
          "rebooting",
          "starting_pending",
          "starting",
          "deleting_pending",
          "deleting",
          "deleting_error",
          "deleted"
        ]
      },
      "IntanceUpdateRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "title": "IntanceUpdateRequest",
        "required": [
          "name"
        ],
        "example": {
          "name": "new instance name"
        }
      },
      "IpAddressExpand": {
        "type": "object",
        "properties": {
          "publicIpAddress": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Publicipaddress"
          },
          "privateIpAddress": {
            "type": "string",
            "title": "Privateipaddress"
          },
          "ipV6Address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ipv6Address"
          }
        },
        "title": "IpAddressExpand",
        "required": [
          "privateIpAddress"
        ]
      },
      "ListBackupResponse": {
        "type": "object",
        "properties": {
          "backups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackupResponse"
            },
            "title": "Backups"
          }
        },
        "title": "ListBackupResponse",
        "required": [
          "backups"
        ],
        "example": {
          "backups": [
            {
              "backup_type": "daily",
              "created_at": "2022-06-10T18:33:12Z",
              "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6",
              "instance": {
                "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
              },
              "min_disk": 10,
              "name": "backup name ffff",
              "rotation": 1,
              "size": 1000,
              "state": "available",
              "status": "completed",
              "updated_at": "2022-06-11T18:33:12Z"
            }
          ]
        }
      },
      "ListImageExternalV1": {
        "type": "object",
        "properties": {
          "images": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageResponseExternalV1"
            },
            "title": "Images"
          }
        },
        "title": "ListImageExternalV1",
        "required": [
          "images"
        ],
        "example": {
          "images": [
            {
              "end_life_at": "2022-06-10T18:33:12Z",
              "end_standard_support_at": "2022-06-10T18:33:12Z",
              "id": "c47e974f-8002-46e9-8a63-d66505be2aa1",
              "minimum_requirements": {
                "disk": 2,
                "ram": 1,
                "vcpu": 1
              },
              "name": "ubuntu 22.10",
              "platform": "linux",
              "release_at": "2022-06-10T18:33:12Z",
              "status": "active",
              "version": "22.10"
            }
          ]
        }
      },
      "ListInstanceV1Response": {
        "type": "object",
        "properties": {
          "instances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceV1Response"
            },
            "title": "Instances"
          }
        },
        "title": "ListInstanceV1Response",
        "required": [
          "instances"
        ],
        "example": {
          "instances": [
            {
              "availability_zone": "br-regiao-1a",
              "created_at": "2022-06-10T18:33:12Z",
              "error": {
                "message": "An error occurred while creating your instance. Please contact our support for assistance.",
                "slug": "create_instance.keypair.not_found"
              },
              "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6",
              "image": {
                "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
              },
              "machine_type": {
                "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
              },
              "name": "instance name",
              "network": {
                "ports": [
                  {
                    "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
                  }
                ]
              },
              "ssh_key_name": "keypair_name_here",
              "state": "running",
              "status": "completed",
              "updated_at": "2022-06-11T18:33:12Z",
              "user_data": "base64_data"
            }
          ]
        }
      },
      "ListSnapshotResponseV1": {
        "type": "object",
        "properties": {
          "snapshots": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SnapshotResponseV1"
            },
            "title": "Snapshots"
          }
        },
        "title": "ListSnapshotResponseV1",
        "required": [
          "snapshots"
        ],
        "example": {
          "snapshots": [
            {
              "created_at": "2022-06-10T18:33:12Z",
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a",
              "instance": {
                "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a",
                "image": {
                  "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
                },
                "machine_type": {
                  "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
                }
              },
              "name": "snapshot name",
              "size": 1000,
              "state": "available",
              "status": "completed",
              "updated_at": "2022-06-11T18:33:12Z"
            }
          ]
        }
      },
      "Name": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "title": "Name",
        "required": [
          "name"
        ],
        "example": {
          "name": "some_resource_name"
        }
      },
      "NetworkPortsV1": {
        "type": "object",
        "properties": {
          "ports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortID"
            },
            "title": "Ports"
          }
        },
        "title": "NetworkPortsV1",
        "required": [
          "ports"
        ]
      },
      "NetworkPortsV1Expand": {
        "type": "object",
        "properties": {
          "vpc": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/VpcV1Expand"
              },
              {
                "type": "null"
              }
            ]
          },
          "ports": {
            "anyOf": [
              {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PortV1Expand"
                }
              },
              {
                "type": "null"
              }
            ],
            "title": "Ports"
          }
        },
        "title": "NetworkPortsV1Expand"
      },
      "PortID": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          }
        },
        "title": "PortID",
        "required": [
          "id"
        ],
        "example": {
          "id": "c47e974f-8002-46e9-8a63-d66505be2aa1"
        }
      },
      "PortV1Expand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          },
          "ipAddresses": {
            "$ref": "#/components/schemas/IpAddressExpand"
          }
        },
        "title": "PortV1Expand",
        "required": [
          "id",
          "name",
          "ipAddresses"
        ]
      },
      "SecurityGroups": {
        "type": "object",
        "properties": {
          "security_groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ID"
            },
            "title": "Security Groups",
            "default": []
          }
        },
        "title": "SecurityGroups"
      },
      "SnapshotCreateRequestV1": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          },
          "virtual_machine": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Virtual Machine"
          }
        },
        "title": "SnapshotCreateRequestV1",
        "required": [
          "name",
          "virtual_machine"
        ],
        "example": {
          "name": "snapshot name",
          "virtual_machine": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
          }
        }
      },
      "SnapshotRenameRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          }
        },
        "title": "SnapshotRenameRequest",
        "required": [
          "name"
        ],
        "example": {
          "name": "new snapshot name"
        }
      },
      "SnapshotResponseV1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "state": {
            "type": "string",
            "title": "State"
          },
          "created_at": {
            "type": "string",
            "examples": [
              "2022-01-01T00:00:10Z"
            ],
            "title": "Created At"
          },
          "updated_at": {
            "anyOf": [
              {
                "type": "string",
                "examples": [
                  "2022-01-01T00:00:10Z"
                ]
              },
              {
                "type": "null"
              }
            ],
            "title": "Updated At"
          },
          "size": {
            "type": "integer",
            "title": "Size"
          },
          "instance": {
            "$ref": "#/components/schemas/InstanceResponseSnapshotV1"
          }
        },
        "title": "SnapshotResponseV1",
        "required": [
          "id",
          "status",
          "state",
          "created_at",
          "size",
          "instance"
        ],
        "example": {
          "created_at": "2022-06-10T18:33:12Z",
          "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a",
          "instance": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a",
            "image": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            },
            "machine_type": {
              "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
            }
          },
          "name": "snapshot name",
          "size": 1000,
          "state": "available",
          "status": "completed",
          "updated_at": "2022-06-11T18:33:12Z"
        }
      },
      "SnapshotRestoreRequestV1Default": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "maxLength": 255,
            "minLength": 1
          },
          "machine_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ID"
              },
              {
                "$ref": "#/components/schemas/Name"
              }
            ],
            "title": "Machine Type"
          },
          "ssh_key_name": {
            "type": "string",
            "title": "Ssh Key Name"
          },
          "availability_zone": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 255,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "Availability Zone"
          },
          "network": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/InstanceCreateRequestV1NetworkDefault"
              },
              {
                "type": "null"
              }
            ],
            "default": {
              "vpc": {
                "name": "default"
              },
              "associate_public_ip": true
            }
          },
          "user_data": {
            "anyOf": [
              {
                "type": "string",
                "maxLength": 65000,
                "minLength": 1
              },
              {
                "type": "null"
              }
            ],
            "title": "User Data"
          }
        },
        "title": "SnapshotRestoreRequestV1Default",
        "required": [
          "name",
          "machine_type",
          "ssh_key_name"
        ],
        "example": {
          "availability_zone": "br-regiao-1a",
          "machine_type": {
            "id": "4830bfbe-0362-4ebb-a8ba-f36be4b4bc6a"
          },
          "name": "instance name",
          "network": {
            "associate_public_ip": true,
            "nic": {
              "security_groups": [
                {
                  "id": "f273fbde-2ddf-4dcd-8c41-342671ac0d17"
                },
                {
                  "id": "02a2acf3-d6db-4424-ac97-0254cb9c329e"
                }
              ]
            },
            "vpc": {
              "id": "2ae0b896-855c-456c-b4a5-c8f4e6d2f4f6"
            }
          },
          "ssh_key_name": "keypair_name_here",
          "user_data": "some_base64_script"
        }
      },
      "ValidationError": {
        "type": "object",
        "properties": {
          "loc": {
            "type": "array",
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "title": "ValidationError",
        "required": [
          "loc",
          "msg",
          "type"
        ]
      },
      "VpcV1Expand": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "name": {
            "type": "string",
            "title": "Name"
          }
        },
        "title": "VpcV1Expand",
        "required": [
          "id",
          "name"
        ]
      }
    }
  },
  "tags": [
    {
      "name": "instances",
      "description": "Operations with instances, including create, delete, start, stop, reboot and other actions."
    },
    {
      "name": "images",
      "description": "Operations with images for instances."
    },
    {
      "name": "machine-types",
      "description": "Operations with machine types for instances."
    },
    {
      "name": "snapshots",
      "description": "Operations with snapshots for instances."
    }
  ]
}"),
	"index.openapi.json":                    ([]byte)("W3siZGVzY3JpcHRpb24iOiJBUElzIHJlZmVyZW50ZXMgYW8gcHJvZHV0byBkZSBWUEMiLCJuYW1lIjoibmV0d29yayIsInBhdGgiOiJuZXR3b3JrLmpheHllbmR5Lm9wZW5hcGkuanNvbiIsInN1bW1hcnkiOiJBUElzIHJlZmVyZW50ZXMgYW8gcHJvZHV0byBkZSBWUEMiLCJ1cmwiOiJodHRwczovL3ZwYy5ici1uZS0xLmpheHllbmR5LmNvbS9vcGVuYXBpLmpzb24iLCJ2ZXJzaW9uIjoiMS4xMjQuMSIsImNsaSI6dHJ1ZSwidGYiOnRydWUsInNkayI6dHJ1ZX0seyJkZXNjcmlwdGlvbiI6IkJsb2NrIFN0b3JhZ2UgQVBJIFByb2R1Y3QgRG9jdW1lbnRhdGlvbiIsIm5hbWUiOiJibG9jay1zdG9yYWdlIiwicGF0aCI6ImJsb2NrLXN0b3JhZ2UuamF4eWVuZHkub3BlbmFwaS5qc29uIiwic3VtbWFyeSI6IkJsb2NrIFN0b3JhZ2UgQVBJIFByb2R1Y3QgRG9jdW1lbnRhdGlvbiIsInVybCI6Imh0dHBzOi8vYmxvY2stc3RvcmFnZS5ici1uZS0xLmpheHllbmR5LmNvbS92MS9vcGVuYXBpLmpzb24iLCJ2ZXJzaW9uIjoidjEiLCJjbGkiOnRydWUsInRmIjp0cnVlLCJzZGsiOnRydWV9LHsiZGVzY3JpcHRpb24iOiJEQmFhUyBBUEkgUHJvZHVjdC4iLCJuYW1lIjoiZGF0YWJhc2UiLCJwYXRoIjoiZGF0YWJhc2UuamF4eWVuZHkub3BlbmFwaS5qc29uIiwic3VtbWFyeSI6IkRCYWFTIEFQSSBQcm9kdWN0LiIsInVybCI6Imh0dHBzOi8vZGJhYXMuYnItbmUtMS5qYXh5ZW5keS5jb20vb3BlbmFwaS5qc29uIiwidmVyc2lvbiI6IjEuMjAuMCIsImNsaSI6dHJ1ZSwidGYiOnRydWUsInNkayI6dHJ1ZX0seyJkZXNjcmlwdGlvbiI6IkFQSXMgcmVsYXRlZCB0byB0aGUgS3ViZXJuZXRlcyBwcm9kdWN0LiIsIm5hbWUiOiJrdWJlcm5ldGVzIiwicGF0aCI6Imt1YmVybmV0ZXMuamF4eWVuZHkub3BlbmFwaS5qc29uIiwic3VtbWFyeSI6IkFQSXMgcmVsYXRlZCB0byB0aGUgS3ViZXJuZXRlcyBwcm9kdWN0LiIsInVybCI6Imh0dHBzOi8vbWtlLmJyLW5lLTEuamF4eWVuZHkuY29tL2RvY3Mvb3BlbmFwaS13aXRoLXNuaXBwZXRzLmpzb24iLCJ2ZXJzaW9uIjoiMC4xLjAiLCJjbGkiOnRydWUsInRmIjp0cnVlLCJzZGsiOnRydWV9LHsiZGVzY3JpcHRpb24iOiJWaXJ0dWFsIE1hY2hpbmUgQXBpIFByb2R1Y3QiLCJuYW1lIjoidmlydHVhbC1tYWNoaW5lIiwicGF0aCI6InZpcnR1YWwtbWFjaGluZS5qYXh5ZW5keS5vcGVuYXBpLmpzb24iLCJzdW1tYXJ5IjoiVmlydHVhbCBNYWNoaW5lIEFwaSBQcm9kdWN0IiwidXJsIjoiaHR0cHM6Ly92aXJ0dWFsLW1hY2hpbmUuYnItbmUtMS5qYXh5ZW5keS5jb20vdjEvb3BlbmFwaS5qc29uIiwidmVyc2lvbiI6InYxIiwiY2xpIjp0cnVlLCJ0ZiI6dHJ1ZSwic2RrIjp0cnVlfV0="),
}
