package core

import (
	"context"

	"github.com/PaesslerAG/gval"
)

type Array interface {
	gval.Selector

	Len() int
	ForEach(func(key string, v interface{}))
}

type Object interface {
	gval.Selector

	ForEach(func(key string, v interface{}))
}

// New returns an selector for given JSONPath
func New(path string) (gval.Evaluable, error) {
	return lang.NewEvaluable(path)
}

// Get executes given JSONPath on given value
func Get(path string, value interface{}) (interface{}, error) {
	eval, err := lang.NewEvaluable(path)
	if err != nil {
		return nil, err
	}
	return eval(context.Background(), value)
}

var lang = gval.NewLanguage(
	gval.Base(),
	gval.PrefixExtension('$', parseRootPath),
	gval.PrefixExtension('@', parseCurrentPath),
)

// Language is the core.Result Language
func Language() gval.Language {
	return lang
}

var replaceValueExtension = gval.NewLanguage(
	lang,
	gval.PrefixExtension('{', parseJSONObject),
	gval.PrefixExtension('#', parsePlaceholder),
	gval.DefaultExtension(func(ctx context.Context, p *gval.Parser) (gval.Evaluable, error) {
	})
)

// ReplaceValueExtension allows for the injection of core.Result params and configs
func ReplaceValueExtension() gval.Language {
	return replaceValueExtension
}
